/*
 * Copyright (c) Contributors, http://opensimulator.org/
 * See CONTRIBUTORS.TXT for a full list of copyright holders.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the OpenSim Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;using Tools;
namespace OpenSim.Region.ScriptEngine.Shared.CodeTools {
//%+LSLProgramRoot+95
public class LSLProgramRoot : SYMBOL{
 public  LSLProgramRoot (Parser yyp, States  s ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}
 public  LSLProgramRoot (Parser yyp, GlobalDefinitions  gd , States  s ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}

public override string yyname { get { return "LSLProgramRoot"; }}
public override int yynum { get { return 95; }}
public LSLProgramRoot(Parser yyp):base(yyp){}}
//%+GlobalDefinitions+96
public class GlobalDefinitions : SYMBOL{
 public  GlobalDefinitions (Parser yyp, GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ kids . Add ( gfd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gfd );
}

public override string yyname { get { return "GlobalDefinitions"; }}
public override int yynum { get { return 96; }}
public GlobalDefinitions(Parser yyp):base(yyp){}}
//%+GlobalVariableDeclaration+97
public class GlobalVariableDeclaration : SYMBOL{
 public  GlobalVariableDeclaration (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  GlobalVariableDeclaration (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}

public override string yyname { get { return "GlobalVariableDeclaration"; }}
public override int yynum { get { return 97; }}
public GlobalVariableDeclaration(Parser yyp):base(yyp){}}
//%+GlobalFunctionDefinition+98
public class GlobalFunctionDefinition : SYMBOL{
 private  string  m_returnType ;
 private  string  m_name ;
 public  GlobalFunctionDefinition (Parser yyp, string  returnType , string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_returnType = returnType ;
 m_name = name ;
 kids . Add ( adl );
 kids . Add ( cs );
}
 public  string  ReturnType { get { return  m_returnType ;
}
 set { m_returnType = value ;
}
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "GlobalFunctionDefinition"; }}
public override int yynum { get { return 98; }}
public GlobalFunctionDefinition(Parser yyp):base(yyp){}}
//%+States+99
public class States : SYMBOL{
 public  States (Parser yyp, State  ds ):base(((LSLSyntax
)yyp)){ kids . Add ( ds );
}
 public  States (Parser yyp, States  s , State  us ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
 kids . Add ( us );
}

public override string yyname { get { return "States"; }}
public override int yynum { get { return 99; }}
public States(Parser yyp):base(yyp){}}
//%+State+100
public class State : SYMBOL{
 private  string  m_name ;
 public  State (Parser yyp, string  name , StateBody  sb ):base(((LSLSyntax
)yyp)){ m_name = name ;
 while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
}
 public  override  string  ToString (){ return "STATE<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "State"; }}
public override int yynum { get { return 100; }}
public State(Parser yyp):base(yyp){}}
//%+StateBody+101
public class StateBody : SYMBOL{
 public  StateBody (Parser yyp, StateBody  sb , StateEvent  se ):base(((LSLSyntax
)yyp)){ while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
 kids . Add ( se );
}
 public  StateBody (Parser yyp, StateEvent  se ):base(((LSLSyntax
)yyp)){ kids . Add ( se );
}

public override string yyname { get { return "StateBody"; }}
public override int yynum { get { return 101; }}
public StateBody(Parser yyp):base(yyp){}}
//%+StateEvent+102
public class StateEvent : SYMBOL{
 private  string  m_name ;
 public  StateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 kids . Add ( cs );
}
 public  StateEvent (Parser yyp, string  name , ArgumentDeclarationList  dal , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 if (0< dal . kids . Count ) kids . Add ( dal );
 kids . Add ( cs );
}
 public  override  string  ToString (){ return "EVENT<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "StateEvent"; }}
public override int yynum { get { return 102; }}
public StateEvent(Parser yyp):base(yyp){}}
//%+ArgumentDeclarationList+103
public class ArgumentDeclarationList : SYMBOL{
 public  ArgumentDeclarationList (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  ArgumentDeclarationList (Parser yyp, ArgumentDeclarationList  adl , Declaration  d ):base(((LSLSyntax
)yyp)){ while (0< adl . kids . Count ) kids . Add ( adl . kids . Pop ());
 kids . Add ( d );
}

public override string yyname { get { return "ArgumentDeclarationList"; }}
public override int yynum { get { return 103; }}
public ArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+Declaration+104
public class Declaration : SYMBOL{
 private  string  m_datatype ;
 private  string  m_id ;
 public  Declaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp)){ m_datatype = type ;
 m_id = id ;
}
 public  override  string  ToString (){ return "Declaration<"+ m_datatype +":"+ m_id +">";
}
 public  string  Datatype { get { return  m_datatype ;
}
 set { m_datatype = value ;
}
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "Declaration"; }}
public override int yynum { get { return 104; }}
public Declaration(Parser yyp):base(yyp){}}
//%+Typename+105
public class Typename : SYMBOL{
 public  string  yytext ;
 public  Typename (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Typename"; }}
public override int yynum { get { return 105; }}
public Typename(Parser yyp):base(yyp){}}
//%+Event+106
public class Event : SYMBOL{
 public  string  yytext ;
 public  Event (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Event"; }}
public override int yynum { get { return 106; }}
public Event(Parser yyp):base(yyp){}}
//%+CompoundStatement+107
public class CompoundStatement : SYMBOL{
 public  CompoundStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  CompoundStatement (Parser yyp, StatementList  sl ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
}

public override string yyname { get { return "CompoundStatement"; }}
public override int yynum { get { return 107; }}
}
//%+StatementList+108
public class StatementList : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if ( s . kids . Top  is  IfStatement || s . kids . Top  is  WhileStatement || s . kids . Top  is  DoWhileStatement || s . kids . Top  is  ForLoop ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  StatementList (Parser yyp, Statement  s ):base(((LSLSyntax
)yyp)){ AddStatement ( s );
}
 public  StatementList (Parser yyp, StatementList  sl , Statement  s ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
 AddStatement ( s );
}

public override string yyname { get { return "StatementList"; }}
public override int yynum { get { return 108; }}
public StatementList(Parser yyp):base(yyp){}}
//%+Statement+109
public class Statement : SYMBOL{
 public  Statement (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  Statement (Parser yyp, CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ kids . Add ( cs );
}
 public  Statement (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}
 public  Statement (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}
 public  Statement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  Statement (Parser yyp, ReturnStatement  rs ):base(((LSLSyntax
)yyp)){ kids . Add ( rs );
}
 public  Statement (Parser yyp, StateChange  sc ):base(((LSLSyntax
)yyp)){ kids . Add ( sc );
}
 public  Statement (Parser yyp, IfStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, WhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, DoWhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, ForLoop  fl ):base(((LSLSyntax
)yyp)){ kids . Add ( fl );
}
 public  Statement (Parser yyp, JumpLabel  jl ):base(((LSLSyntax
)yyp)){ kids . Add ( jl );
}
 public  Statement (Parser yyp, JumpStatement  js ):base(((LSLSyntax
)yyp)){ kids . Add ( js );
}

public override string yyname { get { return "Statement"; }}
public override int yynum { get { return 109; }}
public Statement(Parser yyp):base(yyp){}}
//%+Assignment+110
public class Assignment : SYMBOL{
 protected  string  m_assignmentType ;
 public  Assignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}
 public  Assignment (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ m_assignmentType = sa . AssignmentType ;
 while (0< sa . kids . Count ) kids . Add ( sa . kids . Pop ());
}
 public  string  AssignmentType { get { return  m_assignmentType ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_assignmentType +">";
}

public override string yyname { get { return "Assignment"; }}
public override int yynum { get { return 110; }}
public Assignment(Parser yyp):base(yyp){}}
//%+SimpleAssignment+111
public class SimpleAssignment : Assignment{
 public  SimpleAssignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}

public override string yyname { get { return "SimpleAssignment"; }}
public override int yynum { get { return 111; }}
public SimpleAssignment(Parser yyp):base(yyp){}}
//%+ReturnStatement+112
public class ReturnStatement : SYMBOL{
 public  ReturnStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  ReturnStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ReturnStatement"; }}
public override int yynum { get { return 112; }}
}
//%+JumpLabel+113
public class JumpLabel : SYMBOL{
 private  string  m_labelName ;
 public  JumpLabel (Parser yyp, string  labelName ):base(((LSLSyntax
)yyp)){ m_labelName = labelName ;
}
 public  string  LabelName { get { return  m_labelName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_labelName +">";
}

public override string yyname { get { return "JumpLabel"; }}
public override int yynum { get { return 113; }}
public JumpLabel(Parser yyp):base(yyp){}}
//%+JumpStatement+114
public class JumpStatement : SYMBOL{
 private  string  m_targetName ;
 public  JumpStatement (Parser yyp, string  targetName ):base(((LSLSyntax
)yyp)){ m_targetName = targetName ;
}
 public  string  TargetName { get { return  m_targetName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_targetName +">";
}

public override string yyname { get { return "JumpStatement"; }}
public override int yynum { get { return 114; }}
public JumpStatement(Parser yyp):base(yyp){}}
//%+StateChange+115
public class StateChange : SYMBOL{
 private  string  m_newState ;
 public  StateChange (Parser yyp, string  newState ):base(((LSLSyntax
)yyp)){ m_newState = newState ;
}
 public  string  NewState { get { return  m_newState ;
}
}

public override string yyname { get { return "StateChange"; }}
public override int yynum { get { return 115; }}
public StateChange(Parser yyp):base(yyp){}}
//%+IfStatement+116
public class IfStatement : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs , Statement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
 if (0< es . kids . Count && es . kids . Top  is  IfStatement ) kids . Add ( es . kids . Pop ());
 else  AddStatement ( es );
}

public override string yyname { get { return "IfStatement"; }}
public override int yynum { get { return 116; }}
public IfStatement(Parser yyp):base(yyp){}}
//%+WhileStatement+117
public class WhileStatement : SYMBOL{
 public  WhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
}

public override string yyname { get { return "WhileStatement"; }}
public override int yynum { get { return 117; }}
public WhileStatement(Parser yyp):base(yyp){}}
//%+DoWhileStatement+118
public class DoWhileStatement : SYMBOL{
 public  DoWhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
 kids . Add ( s );
}

public override string yyname { get { return "DoWhileStatement"; }}
public override int yynum { get { return 118; }}
public DoWhileStatement(Parser yyp):base(yyp){}}
//%+ForLoop+119
public class ForLoop : SYMBOL{
 public  ForLoop (Parser yyp, ForLoopStatement  flsa , Expression  e , ForLoopStatement  flsb , Statement  s ):base(((LSLSyntax
)yyp)){ kids . Add ( flsa );
 kids . Add ( e );
 kids . Add ( flsb );
 if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}

public override string yyname { get { return "ForLoop"; }}
public override int yynum { get { return 119; }}
public ForLoop(Parser yyp):base(yyp){}}
//%+ForLoopStatement+120
public class ForLoopStatement : SYMBOL{
 public  ForLoopStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ kids . Add ( sa );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , Expression  e ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( sa );
}

public override string yyname { get { return "ForLoopStatement"; }}
public override int yynum { get { return 120; }}
public ForLoopStatement(Parser yyp):base(yyp){}}
//%+FunctionCall+121
public class FunctionCall : SYMBOL{
 private  string  m_id ;
 public  FunctionCall (Parser yyp, string  id , ArgumentList  al ):base(((LSLSyntax
)yyp)){ m_id = id ;
 kids . Add ( al );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_id +">";
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "FunctionCall"; }}
public override int yynum { get { return 121; }}
public FunctionCall(Parser yyp):base(yyp){}}
//%+ArgumentList+122
public class ArgumentList : SYMBOL{
 public  ArgumentList (Parser yyp, Argument  a ):base(((LSLSyntax
)yyp)){ AddArgument ( a );
}
 public  ArgumentList (Parser yyp, ArgumentList  al , Argument  a ):base(((LSLSyntax
)yyp)){ while (0< al . kids . Count ) kids . Add ( al . kids . Pop ());
 AddArgument ( a );
}
 private  void  AddArgument ( Argument  a ){ if ( a  is  ExpressionArgument ) while (0< a . kids . Count ) kids . Add ( a . kids . Pop ());
 else  kids . Add ( a );
}

public override string yyname { get { return "ArgumentList"; }}
public override int yynum { get { return 122; }}
public ArgumentList(Parser yyp):base(yyp){}}
//%+Argument+123
public class Argument : SYMBOL{
public override string yyname { get { return "Argument"; }}
public override int yynum { get { return 123; }}
public Argument(Parser yyp):base(yyp){}}
//%+ExpressionArgument+124
public class ExpressionArgument : Argument{
 public  ExpressionArgument (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ExpressionArgument"; }}
public override int yynum { get { return 124; }}
public ExpressionArgument(Parser yyp):base(yyp){}}
//%+Constant+125
public class Constant : SYMBOL{
 private  string  m_type ;
 private  string  m_val ;
 public  Constant (Parser yyp, string  type , string  val ):base(((LSLSyntax
)yyp)){ m_type = type ;
 m_val = val ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_type +":"+ m_val +">";
}
 public  string  Value { get { return  m_val ;
}
 set { m_val = value ;
}
}
 public  string  Type { get { return  m_type ;
}
 set { m_type = value ;
}
}

public override string yyname { get { return "Constant"; }}
public override int yynum { get { return 125; }}
public Constant(Parser yyp):base(yyp){}}
//%+VectorConstant+126
public class VectorConstant : Constant{
 public  VectorConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ ):base(((LSLSyntax
)yyp),"vector", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
}

public override string yyname { get { return "VectorConstant"; }}
public override int yynum { get { return 126; }}
public VectorConstant(Parser yyp):base(yyp){}}
//%+RotationConstant+127
public class RotationConstant : Constant{
 public  RotationConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ , Expression  valS ):base(((LSLSyntax
)yyp),"rotation", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
 kids . Add ( valS );
}

public override string yyname { get { return "RotationConstant"; }}
public override int yynum { get { return 127; }}
public RotationConstant(Parser yyp):base(yyp){}}
//%+ListConstant+128
public class ListConstant : Constant{
 public  ListConstant (Parser yyp, ArgumentList  al ):base(((LSLSyntax
)yyp),"list", null ){ kids . Add ( al );
}

public override string yyname { get { return "ListConstant"; }}
public override int yynum { get { return 128; }}
public ListConstant(Parser yyp):base(yyp){}}
//%+Expression+129
public class Expression : SYMBOL{
 protected  void  AddExpression ( Expression  e ){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "Expression"; }}
public override int yynum { get { return 129; }}
public Expression(Parser yyp):base(yyp){}}
//%+ConstantExpression+130
public class ConstantExpression : Expression{
 public  ConstantExpression (Parser yyp, Constant  c ):base(((LSLSyntax
)yyp)){ kids . Add ( c );
}

public override string yyname { get { return "ConstantExpression"; }}
public override int yynum { get { return 130; }}
public ConstantExpression(Parser yyp):base(yyp){}}
//%+IdentExpression+131
public class IdentExpression : Expression{
 protected  string  m_name ;
 public  IdentExpression (Parser yyp, string  name ):base(((LSLSyntax
)yyp)){ m_name = name ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "IdentExpression"; }}
public override int yynum { get { return 131; }}
public IdentExpression(Parser yyp):base(yyp){}}
//%+IdentDotExpression+132
public class IdentDotExpression : IdentExpression{
 private  string  m_member ;
 public  IdentDotExpression (Parser yyp, string  name , string  member ):base(((LSLSyntax
)yyp), name ){ m_member = member ;
}
 public  override  string  ToString (){ string  baseToString = base . ToString ();
 return  baseToString . Substring (0, baseToString . Length -1)+"."+ m_member +">";
}
 public  string  Member { get { return  m_member ;
}
}

public override string yyname { get { return "IdentDotExpression"; }}
public override int yynum { get { return 132; }}
public IdentDotExpression(Parser yyp):base(yyp){}}
//%+FunctionCallExpression+133
public class FunctionCallExpression : Expression{
 public  FunctionCallExpression (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}

public override string yyname { get { return "FunctionCallExpression"; }}
public override int yynum { get { return 133; }}
public FunctionCallExpression(Parser yyp):base(yyp){}}
//%+BinaryExpression+134
public class BinaryExpression : Expression{
 private  string  m_expressionSymbol ;
 public  BinaryExpression (Parser yyp, Expression  lhs , Expression  rhs , string  expressionSymbol ):base(((LSLSyntax
)yyp)){ m_expressionSymbol = expressionSymbol ;
 AddExpression ( lhs );
 AddExpression ( rhs );
}
 public  string  ExpressionSymbol { get { return  m_expressionSymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_expressionSymbol +">";
}

public override string yyname { get { return "BinaryExpression"; }}
public override int yynum { get { return 134; }}
public BinaryExpression(Parser yyp):base(yyp){}}
//%+UnaryExpression+135
public class UnaryExpression : Expression{
 private  string  m_unarySymbol ;
 public  UnaryExpression (Parser yyp, string  unarySymbol , Expression  e ):base(((LSLSyntax
)yyp)){ m_unarySymbol = unarySymbol ;
 AddExpression ( e );
}
 public  string  UnarySymbol { get { return  m_unarySymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_unarySymbol +">";
}

public override string yyname { get { return "UnaryExpression"; }}
public override int yynum { get { return 135; }}
public UnaryExpression(Parser yyp):base(yyp){}}
//%+TypecastExpression+136
public class TypecastExpression : Expression{
 private  string  m_typecastType ;
 public  TypecastExpression (Parser yyp, string  typecastType , SYMBOL  rhs ):base(((LSLSyntax
)yyp)){ m_typecastType = typecastType ;
 kids . Add ( rhs );
}
 public  string  TypecastType { get { return  m_typecastType ;
}
 set { m_typecastType = value ;
}
}

public override string yyname { get { return "TypecastExpression"; }}
public override int yynum { get { return 136; }}
public TypecastExpression(Parser yyp):base(yyp){}}
//%+ParenthesisExpression+137
public class ParenthesisExpression : Expression{
 public  ParenthesisExpression (Parser yyp, SYMBOL  s ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
}

public override string yyname { get { return "ParenthesisExpression"; }}
public override int yynum { get { return 137; }}
public ParenthesisExpression(Parser yyp):base(yyp){}}
//%+IncrementDecrementExpression+138
public class IncrementDecrementExpression : Expression{
 private  string  m_name ;
 private  string  m_operation ;
 private  bool  m_postOperation ;
 public  IncrementDecrementExpression (Parser yyp, string  name , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_name = name ;
 m_operation = operation ;
 m_postOperation = postOperation ;
}
 public  IncrementDecrementExpression (Parser yyp, IdentDotExpression  ide , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_operation = operation ;
 m_postOperation = postOperation ;
 kids . Add ( ide );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+( m_postOperation ? m_name + m_operation : m_operation + m_name )+">";
}
 public  string  Name { get { return  m_name ;
}
}
 public  string  Operation { get { return  m_operation ;
}
}
 public  bool  PostOperation { get { return  m_postOperation ;
}
}

public override string yyname { get { return "IncrementDecrementExpression"; }}
public override int yynum { get { return 138; }}
public IncrementDecrementExpression(Parser yyp):base(yyp){}}

public class LSLProgramRoot_1 : LSLProgramRoot {
  public LSLProgramRoot_1(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((States)(yyq.StackAt(0).m_value))
	){}}

public class LSLProgramRoot_2 : LSLProgramRoot {
  public LSLProgramRoot_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_1 : GlobalDefinitions {
  public GlobalDefinitions_1(Parser yyq):base(yyq,
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_2 : GlobalDefinitions {
  public GlobalDefinitions_2(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_3 : GlobalDefinitions {
  public GlobalDefinitions_3(Parser yyq):base(yyq,
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_4 : GlobalDefinitions {
  public GlobalDefinitions_4(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalVariableDeclaration_1 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class GlobalVariableDeclaration_2 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_2(Parser yyq):base(yyq,new Assignment(((LSLSyntax
)yyq), 
	((Declaration)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	, 
	((EQUALS)(yyq.StackAt(2).m_value))
	.yytext)){}}

public class GlobalFunctionDefinition_1 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_1(Parser yyq):base(yyq,"void", 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class GlobalFunctionDefinition_2 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class States_1 : States {
  public States_1(Parser yyq):base(yyq,
	((State)(yyq.StackAt(0).m_value))
	){}}

public class States_2 : States {
  public States_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(1).m_value))
	, 
	((State)(yyq.StackAt(0).m_value))
	){}}

public class State_1 : State {
  public State_1(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class State_2 : State {
  public State_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class StateBody_1 : StateBody {
  public StateBody_1(Parser yyq):base(yyq,
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_2 : StateBody {
  public StateBody_2(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateEvent_1 : StateEvent {
  public StateEvent_1(Parser yyq):base(yyq,
	((Event)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_1 : ArgumentDeclarationList {
  public ArgumentDeclarationList_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_2 : ArgumentDeclarationList {
  public ArgumentDeclarationList_2(Parser yyq):base(yyq,
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class Declaration_1 : Declaration {
  public Declaration_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class CompoundStatement_1 : CompoundStatement {
  public CompoundStatement_1(Parser yyq):base(yyq){}}

public class CompoundStatement_2 : CompoundStatement {
  public CompoundStatement_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	){}}

public class StatementList_1 : StatementList {
  public StatementList_1(Parser yyq):base(yyq,
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class StatementList_2 : StatementList {
  public StatementList_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_1 : Statement {
  public Statement_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class Statement_2 : Statement {
  public Statement_2(Parser yyq):base(yyq,
	((Assignment)(yyq.StackAt(1).m_value))
	){}}

public class Statement_3 : Statement {
  public Statement_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class Statement_4 : Statement {
  public Statement_4(Parser yyq):base(yyq,
	((ReturnStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_5 : Statement {
  public Statement_5(Parser yyq):base(yyq,
	((JumpLabel)(yyq.StackAt(1).m_value))
	){}}

public class Statement_6 : Statement {
  public Statement_6(Parser yyq):base(yyq,
	((JumpStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_7 : Statement {
  public Statement_7(Parser yyq):base(yyq,
	((StateChange)(yyq.StackAt(1).m_value))
	){}}

public class Statement_8 : Statement {
  public Statement_8(Parser yyq):base(yyq,
	((IfStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_9 : Statement {
  public Statement_9(Parser yyq):base(yyq,
	((WhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_10 : Statement {
  public Statement_10(Parser yyq):base(yyq,
	((DoWhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_11 : Statement {
  public Statement_11(Parser yyq):base(yyq,
	((ForLoop)(yyq.StackAt(0).m_value))
	){}}

public class Statement_12 : Statement {
  public Statement_12(Parser yyq):base(yyq,
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class JumpLabel_1 : JumpLabel {
  public JumpLabel_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class JumpStatement_1 : JumpStatement {
  public JumpStatement_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_1 : StateChange {
  public StateChange_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_2 : StateChange {
  public StateChange_2(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IfStatement_1 : IfStatement {
  public IfStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_2 : IfStatement {
  public IfStatement_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_3 : IfStatement {
  public IfStatement_3(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_4 : IfStatement {
  public IfStatement_4(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_1 : WhileStatement {
  public WhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_2 : WhileStatement {
  public WhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class DoWhileStatement_1 : DoWhileStatement {
  public DoWhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class DoWhileStatement_2 : DoWhileStatement {
  public DoWhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class ForLoop_1 : ForLoop {
  public ForLoop_1(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(6).m_value))
	, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_1 : ForLoopStatement {
  public ForLoopStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_2 : ForLoopStatement {
  public ForLoopStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_3 : ForLoopStatement {
  public ForLoopStatement_3(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_4 : ForLoopStatement {
  public ForLoopStatement_4(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class Assignment_1 : Assignment {
  public Assignment_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_2 : Assignment {
  public Assignment_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class SimpleAssignment_1 : SimpleAssignment {
  public SimpleAssignment_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_2 : SimpleAssignment {
  public SimpleAssignment_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_3 : SimpleAssignment {
  public SimpleAssignment_3(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_4 : SimpleAssignment {
  public SimpleAssignment_4(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_5 : SimpleAssignment {
  public SimpleAssignment_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_6 : SimpleAssignment {
  public SimpleAssignment_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_7 : SimpleAssignment {
  public SimpleAssignment_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_8 : SimpleAssignment {
  public SimpleAssignment_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_9 : SimpleAssignment {
  public SimpleAssignment_9(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_10 : SimpleAssignment {
  public SimpleAssignment_10(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_11 : SimpleAssignment {
  public SimpleAssignment_11(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_12 : SimpleAssignment {
  public SimpleAssignment_12(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_13 : SimpleAssignment {
  public SimpleAssignment_13(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_14 : SimpleAssignment {
  public SimpleAssignment_14(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_15 : SimpleAssignment {
  public SimpleAssignment_15(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_16 : SimpleAssignment {
  public SimpleAssignment_16(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_17 : SimpleAssignment {
  public SimpleAssignment_17(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_18 : SimpleAssignment {
  public SimpleAssignment_18(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_19 : SimpleAssignment {
  public SimpleAssignment_19(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_20 : SimpleAssignment {
  public SimpleAssignment_20(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_21 : SimpleAssignment {
  public SimpleAssignment_21(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_22 : SimpleAssignment {
  public SimpleAssignment_22(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_23 : SimpleAssignment {
  public SimpleAssignment_23(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_24 : SimpleAssignment {
  public SimpleAssignment_24(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class ReturnStatement_1 : ReturnStatement {
  public ReturnStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ReturnStatement_2 : ReturnStatement {
  public ReturnStatement_2(Parser yyq):base(yyq){}}

public class Constant_1 : Constant {
  public Constant_1(Parser yyq):base(yyq,"integer", 
	((INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_2 : Constant {
  public Constant_2(Parser yyq):base(yyq,"integer", 
	((HEX_INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_3 : Constant {
  public Constant_3(Parser yyq):base(yyq,"float", 
	((FLOAT_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_4 : Constant {
  public Constant_4(Parser yyq):base(yyq,"string", 
	((STRING_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class ListConstant_1 : ListConstant {
  public ListConstant_1(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class VectorConstant_1 : VectorConstant {
  public VectorConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class RotationConstant_1 : RotationConstant {
  public RotationConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(7).m_value))
	, 
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ConstantExpression_1 : ConstantExpression {
  public ConstantExpression_1(Parser yyq):base(yyq,
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class IdentExpression_1 : IdentExpression {
  public IdentExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IdentDotExpression_1 : IdentDotExpression {
  public IdentDotExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IncrementDecrementExpression_1 : IncrementDecrementExpression {
  public IncrementDecrementExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_2 : IncrementDecrementExpression {
  public IncrementDecrementExpression_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_3 : IncrementDecrementExpression {
  public IncrementDecrementExpression_3(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_4 : IncrementDecrementExpression {
  public IncrementDecrementExpression_4(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_5 : IncrementDecrementExpression {
  public IncrementDecrementExpression_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_6 : IncrementDecrementExpression {
  public IncrementDecrementExpression_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_7 : IncrementDecrementExpression {
  public IncrementDecrementExpression_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_8 : IncrementDecrementExpression {
  public IncrementDecrementExpression_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class FunctionCallExpression_1 : FunctionCallExpression {
  public FunctionCallExpression_1(Parser yyq):base(yyq,
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class BinaryExpression_1 : BinaryExpression {
  public BinaryExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_2 : BinaryExpression {
  public BinaryExpression_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_3 : BinaryExpression {
  public BinaryExpression_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_4 : BinaryExpression {
  public BinaryExpression_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_5 : BinaryExpression {
  public BinaryExpression_5(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_6 : BinaryExpression {
  public BinaryExpression_6(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_7 : BinaryExpression {
  public BinaryExpression_7(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_8 : BinaryExpression {
  public BinaryExpression_8(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((CARET)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_9 : BinaryExpression {
  public BinaryExpression_9(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_10 : BinaryExpression {
  public BinaryExpression_10(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_11 : BinaryExpression {
  public BinaryExpression_11(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_12 : BinaryExpression {
  public BinaryExpression_12(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EXCLAMATION_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_13 : BinaryExpression {
  public BinaryExpression_13(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LESS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_14 : BinaryExpression {
  public BinaryExpression_14(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((GREATER_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_15 : BinaryExpression {
  public BinaryExpression_15(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP_AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_16 : BinaryExpression {
  public BinaryExpression_16(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE_STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_17 : BinaryExpression {
  public BinaryExpression_17(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_18 : BinaryExpression {
  public BinaryExpression_18(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class UnaryExpression_1 : UnaryExpression {
  public UnaryExpression_1(Parser yyq):base(yyq,
	((EXCLAMATION)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_2 : UnaryExpression {
  public UnaryExpression_2(Parser yyq):base(yyq,
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_3 : UnaryExpression {
  public UnaryExpression_3(Parser yyq):base(yyq,
	((TILDE)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ParenthesisExpression_1 : ParenthesisExpression {
  public ParenthesisExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ParenthesisExpression_2 : ParenthesisExpression {
  public ParenthesisExpression_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(1).m_value))
	){}}

public class TypecastExpression_1 : TypecastExpression {
  public TypecastExpression_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_2 : TypecastExpression {
  public TypecastExpression_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, new IdentExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_3 : TypecastExpression {
  public TypecastExpression_3(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_4 : TypecastExpression {
  public TypecastExpression_4(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_5 : TypecastExpression {
  public TypecastExpression_5(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_6 : TypecastExpression {
  public TypecastExpression_6(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_7 : TypecastExpression {
  public TypecastExpression_7(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_8 : TypecastExpression {
  public TypecastExpression_8(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_9 : TypecastExpression {
  public TypecastExpression_9(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class FunctionCall_1 : FunctionCall {
  public FunctionCall_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class ArgumentList_1 : ArgumentList {
  public ArgumentList_1(Parser yyq):base(yyq,
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentList_2 : ArgumentList {
  public ArgumentList_2(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(2).m_value))
	, 
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ExpressionArgument_1 : ExpressionArgument {
  public ExpressionArgument_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class Typename_1 : Typename {
  public Typename_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_2 : Typename {
  public Typename_2(Parser yyq):base(yyq,
	((FLOAT_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_3 : Typename {
  public Typename_3(Parser yyq):base(yyq,
	((STRING_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_4 : Typename {
  public Typename_4(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_5 : Typename {
  public Typename_5(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_6 : Typename {
  public Typename_6(Parser yyq):base(yyq,
	((ROTATION_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_7 : Typename {
  public Typename_7(Parser yyq):base(yyq,
	((LIST_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_1 : Event {
  public Event_1(Parser yyq):base(yyq,
	((AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_2 : Event {
  public Event_2(Parser yyq):base(yyq,
	((AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_3 : Event {
  public Event_3(Parser yyq):base(yyq,
	((ATTACH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_4 : Event {
  public Event_4(Parser yyq):base(yyq,
	((CHANGED_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_5 : Event {
  public Event_5(Parser yyq):base(yyq,
	((COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_6 : Event {
  public Event_6(Parser yyq):base(yyq,
	((COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_7 : Event {
  public Event_7(Parser yyq):base(yyq,
	((COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_8 : Event {
  public Event_8(Parser yyq):base(yyq,
	((CONTROL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_9 : Event {
  public Event_9(Parser yyq):base(yyq,
	((DATASERVER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_10 : Event {
  public Event_10(Parser yyq):base(yyq,
	((EMAIL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_11 : Event {
  public Event_11(Parser yyq):base(yyq,
	((HTTP_RESPONSE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_12 : Event {
  public Event_12(Parser yyq):base(yyq,
	((LAND_COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_13 : Event {
  public Event_13(Parser yyq):base(yyq,
	((LAND_COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_14 : Event {
  public Event_14(Parser yyq):base(yyq,
	((LAND_COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_15 : Event {
  public Event_15(Parser yyq):base(yyq,
	((LINK_MESSAGE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_16 : Event {
  public Event_16(Parser yyq):base(yyq,
	((LISTEN_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_17 : Event {
  public Event_17(Parser yyq):base(yyq,
	((MONEY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_18 : Event {
  public Event_18(Parser yyq):base(yyq,
	((MOVING_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_19 : Event {
  public Event_19(Parser yyq):base(yyq,
	((MOVING_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_20 : Event {
  public Event_20(Parser yyq):base(yyq,
	((NO_SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_21 : Event {
  public Event_21(Parser yyq):base(yyq,
	((NOT_AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_22 : Event {
  public Event_22(Parser yyq):base(yyq,
	((NOT_AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_23 : Event {
  public Event_23(Parser yyq):base(yyq,
	((OBJECT_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_24 : Event {
  public Event_24(Parser yyq):base(yyq,
	((ON_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_25 : Event {
  public Event_25(Parser yyq):base(yyq,
	((REMOTE_DATA_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_26 : Event {
  public Event_26(Parser yyq):base(yyq,
	((RUN_TIME_PERMISSIONS_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_27 : Event {
  public Event_27(Parser yyq):base(yyq,
	((SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_28 : Event {
  public Event_28(Parser yyq):base(yyq,
	((STATE_ENTRY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_29 : Event {
  public Event_29(Parser yyq):base(yyq,
	((STATE_EXIT_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_30 : Event {
  public Event_30(Parser yyq):base(yyq,
	((TIMER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_31 : Event {
  public Event_31(Parser yyq):base(yyq,
	((TOUCH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_32 : Event {
  public Event_32(Parser yyq):base(yyq,
	((TOUCH_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_33 : Event {
  public Event_33(Parser yyq):base(yyq,
	((TOUCH_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}
public class yyLSLSyntax
: YyParser {
  public override object Action(Parser yyq,SYMBOL yysym, int yyact) {
    switch(yyact) {
	 case -1: break; //// keep compiler happy
}  return null; }

public class ArgumentDeclarationList_3 : ArgumentDeclarationList {
  public ArgumentDeclarationList_3(Parser yyq):base(yyq){}}

public class ArgumentList_3 : ArgumentList {
  public ArgumentList_3(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_4 : ArgumentDeclarationList {
  public ArgumentDeclarationList_4(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_5 : ArgumentDeclarationList {
  public ArgumentDeclarationList_5(Parser yyq):base(yyq){}}

public class Statement_13 : Statement {
  public Statement_13(Parser yyq):base(yyq){}}

public class ArgumentList_4 : ArgumentList {
  public ArgumentList_4(Parser yyq):base(yyq){}}
public yyLSLSyntax
():base() { arr = new int[] { 
101,4,6,52,0,
46,0,53,0,102,
20,103,4,28,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,95,1,
2,104,18,1,2609,
102,2,0,105,5,
312,1,0,106,18,
1,0,0,2,0,
1,1,107,18,1,
1,108,20,109,4,
18,76,0,73,0,
83,0,84,0,95,
0,84,0,89,0,
80,0,69,0,1,
57,1,1,2,0,
1,2,110,18,1,
2,111,20,112,4,
26,82,0,79,0,
84,0,65,0,84,
0,73,0,79,0,
78,0,95,0,84,
0,89,0,80,0,
69,0,1,56,1,
1,2,0,1,3,
113,18,1,3,114,
20,115,4,22,86,
0,69,0,67,0,
84,0,79,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,55,1,1,
2,0,1,4,116,
18,1,4,117,20,
118,4,16,75,0,
69,0,89,0,95,
0,84,0,89,0,
80,0,69,0,1,
54,1,1,2,0,
1,5,119,18,1,
5,120,20,121,4,
22,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
84,0,89,0,80,
0,69,0,1,53,
1,1,2,0,1,
6,122,18,1,6,
123,20,124,4,20,
70,0,76,0,79,
0,65,0,84,0,
95,0,84,0,89,
0,80,0,69,0,
1,52,1,1,2,
0,1,7,125,18,
1,7,126,20,127,
4,24,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,51,1,1,
2,0,1,8,128,
18,1,8,129,20,
130,4,16,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
105,1,2,2,0,
1,9,131,18,1,
9,132,20,133,4,
10,73,0,68,0,
69,0,78,0,84,
0,1,91,1,1,
2,0,1,10,134,
18,1,10,135,20,
136,4,20,76,0,
69,0,70,0,84,
0,95,0,80,0,
65,0,82,0,69,
0,78,0,1,16,
1,1,2,0,1,
18,137,18,1,18,
129,2,0,1,19,
138,18,1,19,132,
2,0,1,20,139,
18,1,20,140,20,
141,4,46,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
103,1,2,2,0,
1,21,142,18,1,
21,143,20,144,4,
10,67,0,79,0,
77,0,77,0,65,
0,1,14,1,1,
2,0,1,1694,145,
18,1,1694,146,20,
147,4,32,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,120,1,2,2,
0,1,1695,148,18,
1,1695,143,2,0,
1,30,149,18,1,
30,150,20,151,4,
22,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,104,
1,2,2,0,1,
31,152,18,1,31,
153,20,154,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,80,0,65,
0,82,0,69,0,
78,0,1,17,1,
1,2,0,1,32,
155,18,1,32,156,
20,157,4,20,76,
0,69,0,70,0,
84,0,95,0,66,
0,82,0,65,0,
67,0,69,0,1,
12,1,1,2,0,
1,1114,158,18,1,
1114,132,2,0,1,
1152,159,18,1,1152,
160,20,161,4,32,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,1,111,1,
2,2,0,1,1117,
162,18,1,1117,163,
20,164,4,28,80,
0,69,0,82,0,
67,0,69,0,78,
0,84,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,10,1,
1,2,0,1,40,
165,18,1,40,132,
2,0,1,41,166,
18,1,41,135,2,
0,1,42,167,18,
1,42,168,20,169,
4,20,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,129,1,
2,2,0,1,43,
170,18,1,43,171,
20,172,4,22,82,
0,73,0,71,0,
72,0,84,0,95,
0,83,0,72,0,
73,0,70,0,84,
0,1,41,1,1,
2,0,1,44,173,
18,1,44,132,2,
0,1,1159,174,18,
1,1159,168,2,0,
1,46,175,18,1,
46,176,20,177,4,
12,80,0,69,0,
82,0,73,0,79,
0,68,0,1,24,
1,1,2,0,1,
47,178,18,1,47,
132,2,0,1,48,
179,18,1,48,180,
20,181,4,18,68,
0,69,0,67,0,
82,0,69,0,77,
0,69,0,78,0,
84,0,1,5,1,
1,2,0,1,49,
182,18,1,49,183,
20,184,4,18,73,
0,78,0,67,0,
82,0,69,0,77,
0,69,0,78,0,
84,0,1,4,1,
1,2,0,1,50,
185,18,1,50,180,
2,0,1,51,186,
18,1,51,183,2,
0,1,52,187,18,
1,52,135,2,0,
1,1730,188,18,1,
1730,160,2,0,1,
1731,189,18,1,1731,
190,20,191,4,18,
83,0,69,0,77,
0,73,0,67,0,
79,0,76,0,79,
0,78,0,1,11,
1,1,2,0,1,
61,192,18,1,61,
129,2,0,1,62,
193,18,1,62,153,
2,0,1,63,194,
18,1,63,132,2,
0,1,65,195,18,
1,65,176,2,0,
1,66,196,18,1,
66,132,2,0,1,
67,197,18,1,67,
180,2,0,1,68,
198,18,1,68,183,
2,0,1,69,199,
18,1,69,180,2,
0,1,70,200,18,
1,70,183,2,0,
1,71,201,18,1,
71,135,2,0,1,
73,202,18,1,73,
168,2,0,1,74,
203,18,1,74,153,
2,0,1,1189,204,
18,1,1189,205,20,
206,4,22,83,0,
84,0,65,0,82,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,8,1,1,2,
0,1,76,207,18,
1,76,208,20,209,
4,20,76,0,69,
0,70,0,84,0,
95,0,83,0,72,
0,73,0,70,0,
84,0,1,40,1,
1,2,0,1,1153,
210,18,1,1153,211,
20,212,4,24,83,
0,76,0,65,0,
83,0,72,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,9,
1,1,2,0,1,
79,213,18,1,79,
214,20,215,4,10,
84,0,73,0,76,
0,68,0,69,0,
1,36,1,1,2,
0,1,1195,216,18,
1,1195,168,2,0,
1,82,217,18,1,
82,168,2,0,1,
1123,218,18,1,1123,
168,2,0,1,85,
219,18,1,85,220,
20,221,4,26,83,
0,84,0,82,0,
79,0,75,0,69,
0,95,0,83,0,
84,0,82,0,79,
0,75,0,69,0,
1,39,1,1,2,
0,1,2547,222,18,
1,2547,223,20,224,
4,34,67,0,111,
0,109,0,112,0,
111,0,117,0,110,
0,100,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,107,1,2,
2,0,1,89,225,
18,1,89,226,20,
227,4,10,77,0,
73,0,78,0,85,
0,83,0,1,19,
1,1,2,0,1,
93,228,18,1,93,
168,2,0,1,97,
229,18,1,97,230,
20,231,4,14,65,
0,77,0,80,0,
95,0,65,0,77,
0,80,0,1,38,
1,1,2,0,1,
102,232,18,1,102,
233,20,234,4,22,
69,0,88,0,67,
0,76,0,65,0,
77,0,65,0,84,
0,73,0,79,0,
78,0,1,37,1,
1,2,0,1,1775,
235,18,1,1775,153,
2,0,1,107,236,
18,1,107,168,2,
0,1,2196,237,18,
1,2196,160,2,0,
1,1224,238,18,1,
1224,160,2,0,1,
1225,239,18,1,1225,
240,20,241,4,24,
77,0,73,0,78,
0,85,0,83,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
7,1,1,2,0,
1,112,242,18,1,
112,243,20,244,4,
28,71,0,82,0,
69,0,65,0,84,
0,69,0,82,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
32,1,1,2,0,
1,1188,245,18,1,
1188,160,2,0,1,
1231,246,18,1,1231,
168,2,0,1,118,
247,18,1,118,168,
2,0,1,1737,248,
18,1,1737,168,2,
0,1,124,249,18,
1,124,250,20,251,
4,22,76,0,69,
0,83,0,83,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
31,1,1,2,0,
1,2280,252,18,1,
2280,160,2,0,1,
2354,253,18,1,2354,
254,20,255,4,18,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,109,
1,2,2,0,1,
2355,256,18,1,2355,
257,20,258,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
69,0,1,13,1,
1,2,0,1,130,
259,18,1,130,168,
2,0,1,1802,260,
18,1,1802,254,2,
0,1,2360,261,18,
1,2360,257,2,0,
1,1804,262,18,1,
1804,263,20,264,4,
4,68,0,79,0,
1,44,1,1,2,
0,1,2362,265,18,
1,2362,223,2,0,
1,2363,266,18,1,
2363,150,2,0,1,
2364,267,18,1,2364,
268,20,269,4,10,
83,0,84,0,65,
0,84,0,69,0,
1,48,1,1,2,
0,1,137,270,18,
1,137,271,20,272,
4,36,69,0,88,
0,67,0,76,0,
65,0,77,0,65,
0,84,0,73,0,
79,0,78,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,30,
1,1,2,0,1,
2366,273,18,1,2366,
156,2,0,1,2367,
274,18,1,2367,275,
20,276,4,34,84,
0,79,0,85,0,
67,0,72,0,95,
0,83,0,84,0,
65,0,82,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,89,
1,1,2,0,1,
1701,277,18,1,1701,
168,2,0,1,1756,
278,18,1,1756,190,
2,0,1,2370,279,
18,1,2370,280,20,
281,4,22,84,0,
73,0,77,0,69,
0,82,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,87,1,1,2,
0,1,143,282,18,
1,143,168,2,0,
1,2372,283,18,1,
2372,284,20,285,4,
34,83,0,84,0,
65,0,84,0,69,
0,95,0,69,0,
78,0,84,0,82,
0,89,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,85,1,1,2,
0,1,2373,286,18,
1,2373,287,20,288,
4,24,83,0,69,
0,78,0,83,0,
79,0,82,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,84,1,1,
2,0,1,1260,289,
18,1,1260,160,2,
0,1,1261,290,18,
1,1261,291,20,292,
4,22,80,0,76,
0,85,0,83,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
6,1,1,2,0,
1,2376,293,18,1,
2376,294,20,295,4,
24,79,0,78,0,
95,0,82,0,69,
0,90,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,81,1,1,2,
0,1,2377,296,18,
1,2377,297,20,298,
4,32,79,0,66,
0,74,0,69,0,
67,0,84,0,95,
0,82,0,69,0,
90,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
80,1,1,2,0,
1,2378,299,18,1,
2378,300,20,301,4,
38,78,0,79,0,
84,0,95,0,65,
0,84,0,95,0,
84,0,65,0,82,
0,71,0,69,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
79,1,1,2,0,
1,151,302,18,1,
151,303,20,304,4,
26,69,0,81,0,
85,0,65,0,76,
0,83,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,29,1,
1,2,0,1,2380,
305,18,1,2380,306,
20,307,4,30,78,
0,79,0,95,0,
83,0,69,0,78,
0,83,0,79,0,
82,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
77,1,1,2,0,
1,1267,308,18,1,
1267,168,2,0,1,
2382,309,18,1,2382,
310,20,311,4,32,
77,0,79,0,86,
0,73,0,78,0,
71,0,95,0,69,
0,78,0,68,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,75,1,
1,2,0,1,2309,
312,18,1,2309,313,
20,314,4,26,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
1,108,1,2,2,
0,1,2384,315,18,
1,2384,316,20,317,
4,24,76,0,73,
0,83,0,84,0,
69,0,78,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,73,1,1,
2,0,1,157,318,
18,1,157,168,2,
0,1,2386,319,18,
1,2386,320,20,321,
4,52,76,0,65,
0,78,0,68,0,
95,0,67,0,79,
0,76,0,76,0,
73,0,83,0,73,
0,79,0,78,0,
95,0,83,0,84,
0,65,0,82,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
71,1,1,2,0,
1,1773,322,18,1,
1773,146,2,0,1,
2388,323,18,1,2388,
324,20,325,4,40,
76,0,65,0,78,
0,68,0,95,0,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,69,1,1,2,
0,1,1832,326,18,
1,1832,254,2,0,
1,1833,327,18,1,
1833,328,20,329,4,
10,87,0,72,0,
73,0,76,0,69,
0,1,45,1,1,
2,0,1,1834,330,
18,1,1834,135,2,
0,1,2392,331,18,
1,2392,332,20,333,
4,26,67,0,79,
0,78,0,84,0,
82,0,79,0,76,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,65,
1,1,2,0,1,
2393,334,18,1,2393,
335,20,336,4,42,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
83,0,84,0,65,
0,82,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,64,1,
1,2,0,1,166,
337,18,1,166,338,
20,339,4,20,76,
0,69,0,70,0,
84,0,95,0,65,
0,78,0,71,0,
76,0,69,0,1,
25,1,1,2,0,
1,2395,340,18,1,
2395,341,20,342,4,
30,67,0,79,0,
76,0,76,0,73,
0,83,0,73,0,
79,0,78,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,62,1,1,
2,0,1,2396,343,
18,1,2396,344,20,
345,4,26,67,0,
72,0,65,0,78,
0,71,0,69,0,
68,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
61,1,1,2,0,
1,1840,346,18,1,
1840,168,2,0,1,
2398,347,18,1,2398,
348,20,349,4,30,
65,0,84,0,95,
0,84,0,65,0,
82,0,71,0,69,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,59,1,1,2,
0,1,2399,350,18,
1,2399,351,20,352,
4,38,65,0,84,
0,95,0,82,0,
79,0,84,0,95,
0,84,0,65,0,
82,0,71,0,69,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,58,1,1,2,
0,1,172,353,18,
1,172,168,2,0,
1,2401,354,18,1,
2401,135,2,0,1,
2605,355,18,1,2605,
356,20,357,4,48,
71,0,108,0,111,
0,98,0,97,0,
108,0,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,1,98,
1,2,2,0,1,
1296,358,18,1,1296,
160,2,0,1,1297,
359,18,1,1297,360,
20,361,4,12,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,15,1,1,
2,0,1,2412,362,
18,1,2412,153,2,
0,1,2414,363,18,
1,2414,223,2,0,
1,1859,364,18,1,
1859,153,2,0,1,
1860,365,18,1,1860,
190,2,0,1,188,
366,18,1,188,168,
2,0,1,182,367,
18,1,182,368,20,
369,4,22,82,0,
73,0,71,0,72,
0,84,0,95,0,
65,0,78,0,71,
0,76,0,69,0,
1,26,1,1,2,
0,1,199,370,18,
1,199,371,20,372,
4,10,67,0,65,
0,82,0,69,0,
84,0,1,35,1,
1,2,0,1,1871,
373,18,1,1871,160,
2,0,1,1872,374,
18,1,1872,153,2,
0,1,1873,375,18,
1,1873,190,2,0,
1,1875,376,18,1,
1875,328,2,0,1,
205,377,18,1,205,
168,2,0,1,1882,
378,18,1,1882,168,
2,0,1,2365,379,
18,1,2365,132,2,
0,1,2368,380,18,
1,2368,381,20,382,
4,30,84,0,79,
0,85,0,67,0,
72,0,95,0,69,
0,78,0,68,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,90,1,
1,2,0,1,217,
383,18,1,217,384,
20,385,4,12,83,
0,84,0,82,0,
79,0,75,0,69,
0,1,34,1,1,
2,0,1,1332,386,
18,1,1332,160,2,
0,1,2371,387,18,
1,2371,388,20,389,
4,32,83,0,84,
0,65,0,84,0,
69,0,95,0,69,
0,88,0,73,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
86,1,1,2,0,
1,1335,390,18,1,
1335,163,2,0,1,
2374,391,18,1,2374,
392,20,393,4,52,
82,0,85,0,78,
0,95,0,84,0,
73,0,77,0,69,
0,95,0,80,0,
69,0,82,0,77,
0,73,0,83,0,
83,0,73,0,79,
0,78,0,83,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,83,1,
1,2,0,1,223,
394,18,1,223,168,
2,0,1,2452,395,
18,1,2452,257,2,
0,1,2453,396,18,
1,2453,397,20,398,
4,20,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,1,102,1,
2,2,0,1,2454,
399,18,1,2454,400,
20,401,4,26,68,
0,69,0,70,0,
65,0,85,0,76,
0,84,0,95,0,
83,0,84,0,65,
0,84,0,69,0,
1,47,1,1,2,
0,1,1341,402,18,
1,1341,168,2,0,
1,2381,403,18,1,
2381,404,20,405,4,
36,77,0,79,0,
86,0,73,0,78,
0,71,0,95,0,
83,0,84,0,65,
0,82,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,76,1,
1,2,0,1,1901,
406,18,1,1901,153,
2,0,1,1303,407,
18,1,1303,168,2,
0,1,2385,408,18,
1,2385,409,20,410,
4,36,76,0,73,
0,78,0,75,0,
95,0,77,0,69,
0,83,0,83,0,
65,0,71,0,69,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,72,
1,1,2,0,1,
2387,411,18,1,2387,
412,20,413,4,48,
76,0,65,0,78,
0,68,0,95,0,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
69,0,78,0,68,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,70,
1,1,2,0,1,
236,414,18,1,236,
415,20,416,4,6,
65,0,77,0,80,
0,1,33,1,1,
2,0,1,2389,417,
18,1,2389,418,20,
419,4,38,72,0,
84,0,84,0,80,
0,95,0,82,0,
69,0,83,0,80,
0,79,0,78,0,
83,0,69,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,68,1,1,
2,0,1,2390,420,
18,1,2390,421,20,
422,4,22,69,0,
77,0,65,0,73,
0,76,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,67,1,1,2,
0,1,2391,423,18,
1,2391,424,20,425,
4,32,68,0,65,
0,84,0,65,0,
83,0,69,0,82,
0,86,0,69,0,
82,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
66,1,1,2,0,
1,242,426,18,1,
242,168,2,0,1,
2397,427,18,1,2397,
428,20,429,4,24,
65,0,84,0,84,
0,65,0,67,0,
72,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
60,1,1,2,0,
1,2400,430,18,1,
2400,431,20,432,4,
10,69,0,118,0,
101,0,110,0,116,
0,1,106,1,2,
2,0,1,256,433,
18,1,256,434,20,
435,4,14,80,0,
69,0,82,0,67,
0,69,0,78,0,
84,0,1,22,1,
1,2,0,1,1371,
436,18,1,1371,211,
2,0,1,2410,437,
18,1,2410,140,2,
0,1,1931,438,18,
1,1931,254,2,0,
1,1932,439,18,1,
1932,440,20,441,4,
4,73,0,70,0,
1,42,1,1,2,
0,1,262,442,18,
1,262,168,2,0,
1,1377,443,18,1,
1377,168,2,0,1,
1876,444,18,1,1876,
135,2,0,1,1939,
445,18,1,1939,168,
2,0,1,827,446,
18,1,827,168,2,
0,1,277,447,18,
1,277,448,20,449,
4,10,83,0,76,
0,65,0,83,0,
72,0,1,21,1,
1,2,0,1,2358,
450,18,1,2358,254,
2,0,1,283,451,
18,1,283,168,2,
0,1,1958,452,18,
1,1958,153,2,0,
1,1406,453,18,1,
1406,160,2,0,1,
1407,454,18,1,1407,
205,2,0,1,2526,
455,18,1,2526,257,
2,0,1,299,456,
18,1,299,457,20,
458,4,8,83,0,
84,0,65,0,82,
0,1,20,1,1,
2,0,1,1370,459,
18,1,1370,160,2,
0,1,2451,460,18,
1,2451,397,2,0,
1,2379,461,18,1,
2379,462,20,463,4,
46,78,0,79,0,
84,0,95,0,65,
0,84,0,95,0,
82,0,79,0,84,
0,95,0,84,0,
65,0,82,0,71,
0,69,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,78,1,
1,2,0,1,2532,
464,18,1,2532,465,
20,466,4,10,83,
0,116,0,97,0,
116,0,101,0,1,
100,1,2,2,0,
1,305,467,18,1,
305,168,2,0,1,
2534,468,18,1,2534,
135,2,0,1,2383,
469,18,1,2383,470,
20,471,4,22,77,
0,79,0,78,0,
69,0,89,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,74,1,1,
2,0,1,2528,472,
18,1,2528,473,20,
474,4,12,83,0,
116,0,97,0,116,
0,101,0,115,0,
1,99,1,2,2,
0,1,2543,475,18,
1,2543,140,2,0,
1,2545,476,18,1,
2545,153,2,0,1,
1989,477,18,1,1989,
254,2,0,1,1990,
478,18,1,1990,479,
20,480,4,8,69,
0,76,0,83,0,
69,0,1,43,1,
1,2,0,1,2607,
481,18,1,2607,356,
2,0,1,2549,482,
18,1,2549,150,2,
0,1,322,483,18,
1,322,226,2,0,
1,1933,484,18,1,
1933,135,2,0,1,
883,485,18,1,883,
168,2,0,1,328,
486,18,1,328,168,
2,0,1,1443,487,
18,1,1443,240,2,
0,1,1449,488,18,
1,1449,168,2,0,
1,2490,489,18,1,
2490,490,20,491,4,
18,83,0,116,0,
97,0,116,0,101,
0,66,0,111,0,
100,0,121,0,1,
101,1,2,2,0,
1,2416,492,18,1,
2416,490,2,0,1,
1413,493,18,1,1413,
168,2,0,1,346,
494,18,1,346,495,
20,496,4,8,80,
0,76,0,85,0,
83,0,1,18,1,
1,2,0,1,2575,
497,18,1,2575,190,
2,0,1,2021,498,
18,1,2021,254,2,
0,1,2022,499,18,
1,2022,268,2,0,
1,352,500,18,1,
352,168,2,0,1,
2024,501,18,1,2024,
132,2,0,1,2025,
502,18,1,2025,503,
20,504,4,8,74,
0,85,0,77,0,
80,0,1,49,1,
1,2,0,1,2026,
505,18,1,2026,132,
2,0,1,2027,506,
18,1,2027,507,20,
508,4,4,65,0,
84,0,1,23,1,
1,2,0,1,2028,
509,18,1,2028,132,
2,0,1,2029,510,
18,1,2029,223,2,
0,1,2030,511,18,
1,2030,512,20,513,
4,14,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,1,119,1,2,
2,0,1,2031,514,
18,1,2031,515,20,
516,4,32,68,0,
111,0,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,118,1,2,2,
0,1,2032,517,18,
1,2032,518,20,519,
4,28,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,117,1,2,2,
0,1,2033,520,18,
1,2033,521,20,522,
4,22,73,0,102,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
116,1,2,2,0,
1,2034,523,18,1,
2034,524,20,525,4,
22,83,0,116,0,
97,0,116,0,101,
0,67,0,104,0,
97,0,110,0,103,
0,101,0,1,115,
1,2,2,0,1,
1478,526,18,1,1478,
160,2,0,1,1479,
527,18,1,1479,291,
2,0,1,2037,528,
18,1,2037,190,2,
0,1,2038,529,18,
1,2038,530,20,531,
4,18,74,0,117,
0,109,0,112,0,
76,0,97,0,98,
0,101,0,108,0,
1,113,1,2,2,
0,1,2039,532,18,
1,2039,190,2,0,
1,2040,533,18,1,
2040,534,20,535,4,
30,82,0,101,0,
116,0,117,0,114,
0,110,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,112,1,2,
2,0,1,2041,536,
18,1,2041,190,2,
0,1,1485,537,18,
1,1485,168,2,0,
1,372,538,18,1,
372,180,2,0,1,
373,539,18,1,373,
132,2,0,1,374,
540,18,1,374,176,
2,0,1,375,541,
18,1,375,132,2,
0,1,376,542,18,
1,376,183,2,0,
1,377,543,18,1,
377,132,2,0,1,
378,544,18,1,378,
176,2,0,1,379,
545,18,1,379,132,
2,0,1,380,546,
18,1,380,547,20,
548,4,16,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
125,1,2,2,0,
1,381,549,18,1,
381,338,2,0,1,
2610,550,18,1,2610,
551,23,552,4,6,
69,0,79,0,70,
0,1,2,1,6,
2,0,1,2455,553,
18,1,2455,156,2,
0,1,371,554,18,
1,371,555,20,556,
4,24,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,67,0,
97,0,108,0,108,
0,1,121,1,2,
2,0,1,942,557,
18,1,942,168,2,
0,1,2533,558,18,
1,2533,132,2,0,
1,387,559,18,1,
387,168,2,0,1,
2394,560,18,1,2394,
561,20,562,4,38,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
69,0,78,0,68,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,63,
1,1,2,0,1,
1514,563,18,1,1514,
160,2,0,1,1515,
564,18,1,1515,360,
2,0,1,2073,565,
18,1,2073,160,2,
0,1,2074,566,18,
1,2074,153,2,0,
1,406,567,18,1,
406,143,2,0,1,
1521,568,18,1,1521,
168,2,0,1,2556,
569,18,1,2556,168,
2,0,1,412,570,
18,1,412,168,2,
0,1,2023,571,18,
1,2023,400,2,0,
1,1442,572,18,1,
1442,160,2,0,1,
2035,573,18,1,2035,
190,2,0,1,2036,
574,18,1,2036,575,
20,576,4,26,74,
0,117,0,109,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,114,1,2,2,
0,1,431,577,18,
1,431,143,2,0,
1,2104,578,18,1,
2104,254,2,0,1,
2105,579,18,1,2105,
479,2,0,1,1550,
580,18,1,1550,160,
2,0,1,437,581,
18,1,437,168,2,
0,1,2044,582,18,
1,2044,190,2,0,
1,2586,583,18,1,
2586,190,2,0,1,
1555,584,18,1,1555,
168,2,0,1,1001,
585,18,1,1001,555,
2,0,1,1002,586,
18,1,1002,547,2,
0,1,447,587,18,
1,447,368,2,0,
1,2375,588,18,1,
2375,589,20,590,4,
34,82,0,69,0,
77,0,79,0,84,
0,69,0,95,0,
68,0,65,0,84,
0,65,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,82,1,1,2,
0,1,1010,591,18,
1,1010,160,2,0,
1,1011,592,18,1,
1011,153,2,0,1,
1012,593,18,1,1012,
168,2,0,1,1013,
594,18,1,1013,153,
2,0,1,459,595,
18,1,459,596,20,
597,4,24,76,0,
69,0,70,0,84,
0,95,0,66,0,
82,0,65,0,67,
0,75,0,69,0,
84,0,1,27,1,
1,2,0,1,1574,
598,18,1,1574,190,
2,0,1,461,599,
18,1,461,600,20,
601,4,24,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,1,122,1,
2,2,0,1,462,
602,18,1,462,143,
2,0,1,2608,603,
18,1,2608,604,20,
605,4,50,71,0,
108,0,111,0,98,
0,97,0,108,0,
86,0,97,0,114,
0,105,0,97,0,
98,0,108,0,101,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,1,97,
1,2,2,0,1,
464,606,18,1,464,
607,20,608,4,16,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,1,123,1,2,
2,0,1,2531,609,
18,1,2531,465,2,
0,1,1585,610,18,
1,1585,611,20,612,
4,12,82,0,69,
0,84,0,85,0,
82,0,78,0,1,
50,1,1,2,0,
1,476,613,18,1,
476,614,20,615,4,
30,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
67,0,79,0,78,
0,83,0,84,0,
65,0,78,0,84,
0,1,3,1,1,
2,0,1,477,616,
18,1,477,617,20,
618,4,28,70,0,
76,0,79,0,65,
0,84,0,95,0,
67,0,79,0,78,
0,83,0,84,0,
65,0,78,0,84,
0,1,94,1,1,
2,0,1,478,619,
18,1,478,620,20,
621,4,40,72,0,
69,0,88,0,95,
0,73,0,78,0,
84,0,69,0,71,
0,69,0,82,0,
95,0,67,0,79,
0,78,0,83,0,
84,0,65,0,78,
0,84,0,1,93,
1,1,2,0,1,
479,622,18,1,479,
623,20,624,4,32,
73,0,78,0,84,
0,69,0,71,0,
69,0,82,0,95,
0,67,0,79,0,
78,0,83,0,84,
0,65,0,78,0,
84,0,1,92,1,
1,2,0,1,480,
625,18,1,480,626,
20,627,4,26,82,
0,73,0,71,0,
72,0,84,0,95,
0,66,0,82,0,
65,0,67,0,75,
0,69,0,84,0,
1,28,1,1,2,
0,1,481,628,18,
1,481,607,2,0,
1,2550,629,18,1,
2550,360,2,0,1,
2606,630,18,1,2606,
604,2,0,1,1048,
631,18,1,1048,168,
2,0,1,2042,632,
18,1,2042,633,20,
634,4,20,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,1,110,
1,2,2,0,1,
2043,635,18,1,2043,
190,2,0,1,1620,
636,18,1,1620,160,
2,0,1,1621,637,
18,1,1621,150,2,
0,1,1622,638,18,
1,1622,360,2,0,
1,509,639,18,1,
509,143,2,0,1,
1628,640,18,1,1628,
168,2,0,1,515,
641,18,1,515,168,
2,0,1,2369,642,
18,1,2369,643,20,
644,4,22,84,0,
79,0,85,0,67,
0,72,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,88,1,1,2,
0,1,2587,645,18,
1,2587,646,20,647,
4,34,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,1,96,1,2,
2,0,1,525,648,
18,1,525,368,2,
0,1,2197,649,18,
1,2197,153,2,0,
1,1591,650,18,1,
1591,168,2,0,1,
2135,651,18,1,2135,
254,2,0,1,2598,
652,18,1,2598,473,
2,0,1,1094,653,
18,1,1094,600,2,
0,1,1096,654,18,
1,1096,153,2,0,
1,1657,655,18,1,
1657,190,2,0,1,
1658,656,18,1,1658,
657,20,658,4,6,
70,0,79,0,82,
0,1,46,1,1,
2,0,1,1659,659,
18,1,1659,135,2,
0,1,2609,104,1,
1665,660,18,1,1665,
168,2,0,1,2226,
661,18,1,2226,254,
2,0,1,1113,662,
18,1,1113,176,2,
0,663,5,0,664,
5,319,1,2,665,
19,552,1,2,666,
5,6,1,2531,667,
17,668,15,669,4,
14,37,0,83,0,
116,0,97,0,116,
0,101,0,115,0,
1,-1,1,5,670,
20,671,4,16,83,
0,116,0,97,0,
116,0,101,0,115,
0,95,0,50,0,
1,151,1,3,1,
3,1,2,672,22,
1,12,1,2532,673,
17,674,15,669,1,
-1,1,5,675,20,
676,4,16,83,0,
116,0,97,0,116,
0,101,0,115,0,
95,0,49,0,1,
150,1,3,1,2,
1,1,677,22,1,
11,1,2598,678,17,
679,15,680,4,30,
37,0,76,0,83,
0,76,0,80,0,
114,0,111,0,103,
0,114,0,97,0,
109,0,82,0,111,
0,111,0,116,0,
1,-1,1,5,681,
20,682,4,32,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,95,0,49,
0,1,140,1,3,
1,3,1,2,683,
22,1,1,1,2526,
684,17,685,15,686,
4,12,37,0,83,
0,116,0,97,0,
116,0,101,0,1,
-1,1,5,687,20,
688,4,14,83,0,
116,0,97,0,116,
0,101,0,95,0,
49,0,1,152,1,
3,1,5,1,4,
689,22,1,13,1,
2528,690,17,691,15,
680,1,-1,1,5,
692,20,693,4,32,
76,0,83,0,76,
0,80,0,114,0,
111,0,103,0,114,
0,97,0,109,0,
82,0,111,0,111,
0,116,0,95,0,
50,0,1,141,1,
3,1,2,1,1,
694,22,1,2,1,
2452,695,17,696,15,
686,1,-1,1,5,
697,20,698,4,14,
83,0,116,0,97,
0,116,0,101,0,
95,0,50,0,1,
153,1,3,1,6,
1,5,699,22,1,
14,1,3,700,19,
615,1,3,701,5,
91,1,256,702,16,
0,613,1,1261,703,
16,0,613,1,509,
704,16,0,613,1,
2197,705,16,0,613,
1,1515,706,16,0,
613,1,2021,707,17,
708,15,709,4,24,
37,0,73,0,102,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,710,20,
711,4,26,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
181,1,3,1,8,
1,7,712,22,1,
44,1,1775,713,16,
0,613,1,2029,714,
17,715,15,716,4,
20,37,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
717,20,718,4,24,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,50,0,1,
175,1,3,1,2,
1,1,719,22,1,
38,1,2030,720,17,
721,15,716,1,-1,
1,5,722,20,723,
4,24,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,49,
0,1,174,1,3,
1,2,1,1,724,
22,1,37,1,2031,
725,17,726,15,716,
1,-1,1,5,727,
20,728,4,24,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,48,0,1,173,
1,3,1,2,1,
1,729,22,1,36,
1,2032,730,17,731,
15,716,1,-1,1,
5,732,20,733,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,57,0,1,172,
1,3,1,2,1,
1,734,22,1,35,
1,2033,735,17,736,
15,716,1,-1,1,
5,737,20,738,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,56,0,1,171,
1,3,1,2,1,
1,739,22,1,34,
1,277,740,16,0,
613,1,2035,741,17,
742,15,716,1,-1,
1,5,743,20,744,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,55,0,1,
170,1,3,1,3,
1,2,745,22,1,
33,1,2037,746,17,
747,15,716,1,-1,
1,5,748,20,749,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,54,0,1,
169,1,3,1,3,
1,2,750,22,1,
32,1,2039,751,17,
752,15,716,1,-1,
1,5,753,20,754,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,53,0,1,
168,1,3,1,3,
1,2,755,22,1,
31,1,32,756,16,
0,613,1,2041,757,
17,758,15,716,1,
-1,1,5,759,20,
760,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,52,0,
1,167,1,3,1,
3,1,2,761,22,
1,30,1,2043,762,
17,763,15,716,1,
-1,1,5,764,20,
765,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,165,1,3,1,
3,1,2,766,22,
1,28,1,2044,767,
17,768,15,716,1,
-1,1,5,254,1,
1,1,1,769,22,
1,26,1,2550,770,
16,0,613,1,41,
771,16,0,613,1,
1297,772,16,0,613,
1,43,773,16,0,
613,1,1802,774,17,
775,15,776,4,16,
37,0,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,1,-1,1,5,
777,20,778,4,18,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,95,
0,49,0,1,188,
1,3,1,10,1,
9,779,22,1,51,
1,1804,780,16,0,
613,1,299,781,16,
0,613,1,2309,782,
16,0,613,1,52,
783,16,0,613,1,
525,784,16,0,613,
1,62,785,16,0,
613,1,2074,786,16,
0,613,1,1574,787,
17,788,15,716,1,
-1,1,5,789,20,
790,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,51,0,
1,166,1,3,1,
3,1,2,791,22,
1,29,1,71,792,
16,0,613,1,76,
793,16,0,613,1,
1834,794,16,0,613,
1,1585,795,16,0,
613,1,1335,796,16,
0,613,1,79,797,
16,0,613,1,85,
798,16,0,613,1,
89,799,16,0,613,
1,346,800,16,0,
613,1,2104,801,17,
802,15,709,1,-1,
1,5,803,20,804,
4,26,73,0,102,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,51,0,1,182,
1,3,1,6,1,
5,805,22,1,45,
1,2105,806,16,0,
613,1,2358,807,17,
808,15,809,4,28,
37,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,1,-1,
1,5,810,20,811,
4,30,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,95,0,
49,0,1,162,1,
3,1,2,1,1,
812,22,1,24,1,
2360,813,17,814,15,
815,4,36,37,0,
67,0,111,0,109,
0,112,0,111,0,
117,0,110,0,100,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,816,20,
817,4,38,67,0,
111,0,109,0,112,
0,111,0,117,0,
110,0,100,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,160,1,3,
1,3,1,2,818,
22,1,22,1,97,
819,16,0,613,1,
1860,820,17,821,15,
822,4,34,37,0,
68,0,111,0,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,823,20,824,4,
36,68,0,111,0,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,186,1,
3,1,8,1,7,
825,22,1,49,1,
102,826,16,0,613,
1,112,827,16,0,
613,1,1117,828,16,
0,613,1,1873,829,
17,830,15,822,1,
-1,1,5,831,20,
832,4,36,68,0,
111,0,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
187,1,3,1,8,
1,7,833,22,1,
50,1,1876,834,16,
0,613,1,124,835,
16,0,613,1,2135,
836,17,837,15,709,
1,-1,1,5,838,
20,839,4,26,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,52,0,
1,183,1,3,1,
8,1,7,840,22,
1,46,1,381,841,
16,0,613,1,322,
842,16,0,613,1,
137,843,16,0,613,
1,1901,844,16,0,
613,1,1153,845,16,
0,613,1,151,846,
16,0,613,1,1407,
847,16,0,613,1,
1659,848,16,0,613,
1,406,849,16,0,
613,1,1371,850,16,
0,613,1,166,851,
16,0,613,1,1622,
852,16,0,613,1,
2354,853,17,854,15,
809,1,-1,1,5,
855,20,856,4,30,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,95,0,50,0,
1,163,1,3,1,
3,1,2,857,22,
1,25,1,2355,858,
17,859,15,815,1,
-1,1,5,860,20,
861,4,38,67,0,
111,0,109,0,112,
0,111,0,117,0,
110,0,100,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,161,1,3,
1,4,1,3,862,
22,1,23,1,1931,
863,17,864,15,865,
4,30,37,0,87,
0,104,0,105,0,
108,0,101,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,866,20,867,4,
32,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,184,
1,3,1,6,1,
5,868,22,1,47,
1,1933,869,16,0,
613,1,431,870,16,
0,613,1,182,871,
16,0,613,1,1189,
872,16,0,613,1,
1443,873,16,0,613,
1,1695,874,16,0,
613,1,447,875,16,
0,613,1,199,876,
16,0,613,1,1958,
877,16,0,613,1,
1657,878,17,879,15,
716,1,-1,1,5,
880,20,881,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,164,1,
3,1,3,1,2,
882,22,1,27,1,
459,883,16,0,613,
1,462,884,16,0,
613,1,217,885,16,
0,613,1,2226,886,
17,887,15,865,1,
-1,1,5,888,20,
889,4,32,87,0,
104,0,105,0,108,
0,101,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,185,1,3,1,
6,1,5,890,22,
1,48,1,1225,891,
16,0,613,1,1479,
892,16,0,613,1,
1731,893,16,0,613,
1,1989,894,17,895,
15,709,1,-1,1,
5,896,20,897,4,
26,73,0,102,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,180,1,
3,1,6,1,5,
898,22,1,43,1,
1990,899,16,0,613,
1,236,900,16,0,
613,1,1756,901,16,
0,613,1,4,902,
19,184,1,4,903,
5,96,1,256,904,
16,0,542,1,1261,
905,16,0,542,1,
509,906,16,0,542,
1,2197,907,16,0,
542,1,1515,908,16,
0,542,1,2021,707,
1,1775,909,16,0,
542,1,2029,714,1,
2030,720,1,2031,725,
1,2032,730,1,2033,
735,1,277,910,16,
0,542,1,2035,741,
1,2037,746,1,2039,
751,1,32,911,16,
0,542,1,2041,757,
1,2043,762,1,2044,
767,1,40,912,16,
0,186,1,41,913,
16,0,542,1,1297,
914,16,0,542,1,
43,915,16,0,542,
1,44,916,16,0,
186,1,1802,774,1,
1804,917,16,0,542,
1,299,918,16,0,
542,1,2309,919,16,
0,542,1,52,920,
16,0,542,1,47,
921,16,0,182,1,
525,922,16,0,542,
1,63,923,16,0,
200,1,2074,924,16,
0,542,1,1574,787,
1,66,925,16,0,
198,1,71,926,16,
0,542,1,76,927,
16,0,542,1,1834,
928,16,0,542,1,
79,929,16,0,542,
1,1335,930,16,0,
542,1,322,931,16,
0,542,1,85,932,
16,0,542,1,89,
933,16,0,542,1,
346,934,16,0,542,
1,2104,801,1,2105,
935,16,0,542,1,
2358,807,1,2360,813,
1,97,936,16,0,
542,1,1860,820,1,
102,937,16,0,542,
1,1114,938,16,0,
182,1,112,939,16,
0,542,1,1117,940,
16,0,542,1,1873,
829,1,1876,941,16,
0,542,1,2550,942,
16,0,542,1,124,
943,16,0,542,1,
2135,836,1,381,944,
16,0,542,1,137,
945,16,0,542,1,
1901,946,16,0,542,
1,1153,947,16,0,
542,1,151,948,16,
0,542,1,1407,949,
16,0,542,1,1659,
950,16,0,542,1,
406,951,16,0,542,
1,1371,952,16,0,
542,1,166,953,16,
0,542,1,1622,954,
16,0,542,1,2354,
853,1,2355,858,1,
1931,863,1,1933,955,
16,0,542,1,431,
956,16,0,542,1,
1585,957,16,0,542,
1,182,958,16,0,
542,1,1189,959,16,
0,542,1,1443,960,
16,0,542,1,1695,
961,16,0,542,1,
447,962,16,0,542,
1,199,963,16,0,
542,1,1958,964,16,
0,542,1,1657,878,
1,459,965,16,0,
542,1,462,966,16,
0,542,1,217,967,
16,0,542,1,2226,
886,1,1225,968,16,
0,542,1,1479,969,
16,0,542,1,1731,
970,16,0,542,1,
1989,894,1,1990,971,
16,0,542,1,236,
972,16,0,542,1,
1756,973,16,0,542,
1,5,974,19,181,
1,5,975,5,96,
1,256,976,16,0,
538,1,1261,977,16,
0,538,1,509,978,
16,0,538,1,2197,
979,16,0,538,1,
1515,980,16,0,538,
1,2021,707,1,1775,
981,16,0,538,1,
2029,714,1,2030,720,
1,2031,725,1,2032,
730,1,2033,735,1,
277,982,16,0,538,
1,2035,741,1,2037,
746,1,2039,751,1,
32,983,16,0,538,
1,2041,757,1,2043,
762,1,2044,767,1,
40,984,16,0,185,
1,41,985,16,0,
538,1,1297,986,16,
0,538,1,43,987,
16,0,538,1,44,
988,16,0,185,1,
1802,774,1,1804,989,
16,0,538,1,299,
990,16,0,538,1,
2309,991,16,0,538,
1,52,992,16,0,
538,1,47,993,16,
0,179,1,525,994,
16,0,538,1,63,
995,16,0,199,1,
2074,996,16,0,538,
1,1574,787,1,66,
997,16,0,197,1,
71,998,16,0,538,
1,76,999,16,0,
538,1,1834,1000,16,
0,538,1,79,1001,
16,0,538,1,1335,
1002,16,0,538,1,
322,1003,16,0,538,
1,85,1004,16,0,
538,1,89,1005,16,
0,538,1,346,1006,
16,0,538,1,2104,
801,1,2105,1007,16,
0,538,1,2358,807,
1,2360,813,1,97,
1008,16,0,538,1,
1860,820,1,102,1009,
16,0,538,1,1114,
1010,16,0,179,1,
112,1011,16,0,538,
1,1117,1012,16,0,
538,1,1873,829,1,
1876,1013,16,0,538,
1,2550,1014,16,0,
538,1,124,1015,16,
0,538,1,2135,836,
1,381,1016,16,0,
538,1,137,1017,16,
0,538,1,1901,1018,
16,0,538,1,1153,
1019,16,0,538,1,
151,1020,16,0,538,
1,1407,1021,16,0,
538,1,1659,1022,16,
0,538,1,406,1023,
16,0,538,1,1371,
1024,16,0,538,1,
166,1025,16,0,538,
1,1622,1026,16,0,
538,1,2354,853,1,
2355,858,1,1931,863,
1,1933,1027,16,0,
538,1,431,1028,16,
0,538,1,1585,1029,
16,0,538,1,182,
1030,16,0,538,1,
1189,1031,16,0,538,
1,1443,1032,16,0,
538,1,1695,1033,16,
0,538,1,447,1034,
16,0,538,1,199,
1035,16,0,538,1,
1958,1036,16,0,538,
1,1657,878,1,459,
1037,16,0,538,1,
462,1038,16,0,538,
1,217,1039,16,0,
538,1,2226,886,1,
1225,1040,16,0,538,
1,1479,1041,16,0,
538,1,1731,1042,16,
0,538,1,1989,894,
1,1990,1043,16,0,
538,1,236,1044,16,
0,538,1,1756,1045,
16,0,538,1,6,
1046,19,292,1,6,
1047,5,2,1,1114,
1048,16,0,290,1,
40,1049,16,0,527,
1,7,1050,19,241,
1,7,1051,5,2,
1,1114,1052,16,0,
239,1,40,1053,16,
0,487,1,8,1054,
19,206,1,8,1055,
5,2,1,1114,1056,
16,0,204,1,40,
1057,16,0,454,1,
9,1058,19,212,1,
9,1059,5,2,1,
1114,1060,16,0,210,
1,40,1061,16,0,
436,1,10,1062,19,
164,1,10,1063,5,
2,1,1114,1064,16,
0,162,1,40,1065,
16,0,390,1,11,
1066,19,191,1,11,
1067,5,141,1,1260,
1068,17,1069,15,1070,
4,34,37,0,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1071,20,1072,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,49,0,1,215,
1,3,1,6,1,
5,1073,22,1,78,
1,1011,1074,17,1075,
15,1076,4,44,37,
0,80,0,97,0,
114,0,101,0,110,
0,116,0,104,0,
101,0,115,0,105,
0,115,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1077,20,1078,
4,46,80,0,97,
0,114,0,101,0,
110,0,116,0,104,
0,101,0,115,0,
105,0,115,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,262,
1,3,1,4,1,
3,1079,22,1,125,
1,1514,1080,17,1081,
15,1070,1,-1,1,
5,1082,20,1083,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,52,0,1,
208,1,3,1,4,
1,3,1084,22,1,
71,1,9,1085,17,
1086,15,1087,4,24,
37,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,1088,20,
1089,4,26,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
159,1,3,1,3,
1,2,1090,22,1,
21,1,262,1091,17,
1092,15,1093,4,34,
37,0,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1094,20,
1095,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,53,0,1,
244,1,3,1,4,
1,3,1096,22,1,
107,1,1267,1097,17,
1098,15,1070,1,-1,
1,5,1099,20,1100,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,56,0,1,202,
1,3,1,6,1,
5,1101,22,1,65,
1,2021,707,1,1521,
1102,17,1103,15,1070,
1,-1,1,5,1104,
20,1105,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,195,1,3,1,
4,1,3,1106,22,
1,58,1,2024,1107,
17,1108,15,1109,4,
24,37,0,83,0,
116,0,97,0,116,
0,101,0,67,0,
104,0,97,0,110,
0,103,0,101,0,
1,-1,1,5,1110,
20,1111,4,26,83,
0,116,0,97,0,
116,0,101,0,67,
0,104,0,97,0,
110,0,103,0,101,
0,95,0,49,0,
1,178,1,3,1,
3,1,2,1112,22,
1,41,1,1775,1113,
16,0,582,1,19,
1114,17,1086,1,2,
1090,1,2028,1115,17,
1116,15,1117,4,20,
37,0,74,0,117,
0,109,0,112,0,
76,0,97,0,98,
0,101,0,108,0,
1,-1,1,5,1118,
20,1119,4,22,74,
0,117,0,109,0,
112,0,76,0,97,
0,98,0,101,0,
108,0,95,0,49,
0,1,176,1,3,
1,3,1,2,1120,
22,1,39,1,2280,
1121,17,1122,15,1123,
4,34,37,0,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1124,20,1125,4,36,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,190,1,3,
1,2,1,1,1126,
22,1,53,1,2030,
720,1,2031,725,1,
2032,730,1,2033,735,
1,2034,1127,16,0,
573,1,2035,741,1,
2036,1128,16,0,528,
1,2037,746,1,2038,
1129,16,0,532,1,
2039,751,1,32,1130,
16,0,582,1,2041,
757,1,2042,1131,16,
0,635,1,2043,762,
1,2044,767,1,2226,
886,1,2549,1132,16,
0,583,1,40,1133,
17,1134,15,1135,4,
32,37,0,73,0,
100,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1136,20,1137,
4,34,73,0,100,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,229,1,3,
1,2,1,1,1138,
22,1,92,1,1296,
1139,17,1140,15,1070,
1,-1,1,5,1141,
20,1142,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
48,0,1,214,1,
3,1,6,1,5,
1143,22,1,77,1,
283,1144,17,1145,15,
1093,1,-1,1,5,
1146,20,1147,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,52,
0,1,243,1,3,
1,4,1,3,1148,
22,1,106,1,44,
1149,17,1134,1,1,
1138,1,1802,774,1,
2556,1150,16,0,497,
1,47,1151,17,1152,
15,1153,4,38,37,
0,73,0,100,0,
101,0,110,0,116,
0,68,0,111,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1154,20,1155,4,
40,73,0,100,0,
101,0,110,0,116,
0,68,0,111,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,230,1,3,
1,4,1,3,1156,
22,1,93,1,48,
1157,17,1158,15,1159,
4,58,37,0,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1160,
20,1161,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,52,0,1,
234,1,3,1,5,
1,4,1162,22,1,
97,1,49,1163,17,
1164,15,1159,1,-1,
1,5,1165,20,1166,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
51,0,1,233,1,
3,1,5,1,4,
1167,22,1,96,1,
2309,1168,16,0,582,
1,51,1169,17,1170,
15,1159,1,-1,1,
5,1171,20,1172,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,231,1,3,
1,3,1,2,1173,
22,1,94,1,50,
1174,17,1175,15,1159,
1,-1,1,5,1176,
20,1177,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,50,0,1,
232,1,3,1,3,
1,2,1178,22,1,
95,1,305,1179,17,
1180,15,1093,1,-1,
1,5,1181,20,1182,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,51,0,1,242,
1,3,1,4,1,
3,1183,22,1,105,
1,525,1184,17,1185,
15,1186,4,34,37,
0,82,0,111,0,
116,0,97,0,116,
0,105,0,111,0,
110,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,-1,
1,5,1187,20,1188,
4,36,82,0,111,
0,116,0,97,0,
116,0,105,0,111,
0,110,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,49,0,1,227,
1,3,1,10,1,
9,1189,22,1,90,
1,63,1190,17,1191,
15,1192,4,38,37,
0,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1193,20,1194,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,50,
0,1,264,1,3,
1,5,1,4,1195,
22,1,127,1,66,
1196,17,1197,15,1192,
1,-1,1,5,1198,
20,1199,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,51,0,1,
265,1,3,1,7,
1,6,1200,22,1,
128,1,67,1201,17,
1202,15,1192,1,-1,
1,5,1203,20,1204,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
55,0,1,269,1,
3,1,8,1,7,
1205,22,1,132,1,
68,1206,17,1207,15,
1192,1,-1,1,5,
1208,20,1209,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,53,0,
1,267,1,3,1,
8,1,7,1210,22,
1,130,1,69,1211,
17,1212,15,1192,1,
-1,1,5,1213,20,
1214,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,54,0,1,268,
1,3,1,6,1,
5,1215,22,1,131,
1,70,1216,17,1217,
15,1192,1,-1,1,
5,1218,20,1219,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,52,
0,1,266,1,3,
1,6,1,5,1220,
22,1,129,1,74,
1221,17,1222,15,1192,
1,-1,1,5,1223,
20,1224,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,57,0,1,
271,1,3,1,7,
1,6,1225,22,1,
134,1,1013,1226,17,
1227,15,1076,1,-1,
1,5,1228,20,1229,
4,46,80,0,97,
0,114,0,101,0,
110,0,116,0,104,
0,101,0,115,0,
105,0,115,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,1,261,
1,3,1,4,1,
3,1230,22,1,124,
1,1332,1231,17,1232,
15,1070,1,-1,1,
5,1233,20,1234,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,57,0,1,
213,1,3,1,6,
1,5,1235,22,1,
76,1,1048,1236,17,
1237,15,1093,1,-1,
1,5,1238,20,1239,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,56,0,
1,257,1,3,1,
4,1,3,1240,22,
1,120,1,1585,1241,
17,1242,15,1243,4,
32,37,0,82,0,
101,0,116,0,117,
0,114,0,110,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1244,20,1245,
4,34,82,0,101,
0,116,0,117,0,
114,0,110,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,220,1,3,
1,2,1,1,1246,
22,1,83,1,2023,
1247,17,1248,15,1109,
1,-1,1,5,1249,
20,1250,4,26,83,
0,116,0,97,0,
116,0,101,0,67,
0,104,0,97,0,
110,0,103,0,101,
0,95,0,50,0,
1,179,1,3,1,
3,1,2,1251,22,
1,42,1,82,1252,
17,1253,15,1254,4,
32,37,0,85,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1255,20,1256,
4,34,85,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,51,
0,1,260,1,3,
1,3,1,2,1257,
22,1,123,1,2026,
1258,17,1259,15,1260,
4,28,37,0,74,
0,117,0,109,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1261,
20,1262,4,30,74,
0,117,0,109,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
177,1,3,1,3,
1,2,1263,22,1,
40,1,1591,1264,17,
1265,15,1243,1,-1,
1,5,1266,20,1267,
4,34,82,0,101,
0,116,0,117,0,
114,0,110,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,219,1,3,
1,3,1,2,1268,
22,1,82,1,1341,
1269,17,1270,15,1070,
1,-1,1,5,1271,
20,1272,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,54,0,
1,200,1,3,1,
4,1,3,1273,22,
1,63,1,328,1274,
17,1275,15,1093,1,
-1,1,5,1276,20,
1277,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,50,0,1,
241,1,3,1,4,
1,3,1278,22,1,
104,1,1303,1279,17,
1280,15,1070,1,-1,
1,5,1281,20,1282,
4,36,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,55,0,1,201,
1,3,1,6,1,
5,1283,22,1,64,
1,1096,1284,17,1285,
15,1286,4,26,37,
0,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
1,-1,1,5,1287,
20,1288,4,28,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
67,0,97,0,108,
0,108,0,95,0,
49,0,1,272,1,
3,1,5,1,4,
1289,22,1,135,1,
93,1290,17,1291,15,
1254,1,-1,1,5,
1292,20,1293,4,34,
85,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,50,0,1,
259,1,3,1,3,
1,2,1294,22,1,
122,1,1550,1295,17,
1296,15,1070,1,-1,
1,5,1297,20,1298,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,51,0,
1,207,1,3,1,
4,1,3,1299,22,
1,70,1,2354,853,
1,2355,858,1,2040,
1300,16,0,536,1,
2358,807,1,352,1301,
17,1302,15,1093,1,
-1,1,5,1303,20,
1304,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
240,1,3,1,4,
1,3,1305,22,1,
103,1,1859,1306,16,
0,365,1,1860,820,
1,1804,1307,16,0,
582,1,107,1308,17,
1309,15,1254,1,-1,
1,5,1310,20,1311,
4,34,85,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,258,1,3,
1,3,1,2,1312,
22,1,121,1,1114,
1313,17,1152,1,3,
1156,1,2105,1314,16,
0,582,1,1872,1315,
16,0,375,1,1873,
829,1,118,1316,17,
1317,15,1093,1,-1,
1,5,1318,20,1319,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,52,0,
1,253,1,3,1,
4,1,3,1320,22,
1,116,1,1123,1321,
17,1322,15,1070,1,
-1,1,5,1323,20,
1324,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,50,
0,1,206,1,3,
1,6,1,5,1325,
22,1,69,1,371,
1326,17,1327,15,1328,
4,46,37,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
67,0,97,0,108,
0,108,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1329,20,1330,
4,48,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,67,0,
97,0,108,0,108,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,239,1,3,1,
2,1,1,1331,22,
1,102,1,1377,1332,
17,1333,15,1070,1,
-1,1,5,1334,20,
1335,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,53,0,1,
199,1,3,1,4,
1,3,1336,22,1,
62,1,375,1337,17,
1338,15,1159,1,-1,
1,5,1339,20,1340,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
56,0,1,238,1,
3,1,5,1,4,
1341,22,1,101,1,
377,1342,17,1343,15,
1159,1,-1,1,5,
1344,20,1345,4,60,
73,0,110,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,53,0,
1,235,1,3,1,
3,1,2,1346,22,
1,98,1,2135,836,
1,827,1347,17,1348,
15,1093,1,-1,1,
5,1349,20,1350,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,53,0,1,
254,1,3,1,4,
1,3,1351,22,1,
117,1,380,1352,17,
1353,15,1354,4,38,
37,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1355,20,1356,
4,40,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,228,1,
3,1,2,1,1,
1357,22,1,91,1,
130,1358,17,1359,15,
1093,1,-1,1,5,
1360,20,1361,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,51,0,1,252,
1,3,1,4,1,
3,1362,22,1,115,
1,1628,1363,17,1364,
15,1365,4,22,37,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,1,-1,1,5,
1366,20,1367,4,24,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
193,1,3,1,4,
1,3,1368,22,1,
56,1,2074,1369,16,
0,582,1,373,1370,
17,1371,15,1159,1,
-1,1,5,1372,20,
1373,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,54,0,1,236,
1,3,1,3,1,
2,1374,22,1,99,
1,379,1375,17,1376,
15,1159,1,-1,1,
5,1377,20,1378,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,55,
0,1,237,1,3,
1,5,1,4,1379,
22,1,100,1,143,
1380,17,1381,15,1093,
1,-1,1,5,1382,
20,1383,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
50,0,1,251,1,
3,1,4,1,3,
1384,22,1,114,1,
1901,1385,16,0,582,
1,1152,1386,17,1387,
15,1070,1,-1,1,
5,1388,20,1389,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,52,0,1,
218,1,3,1,6,
1,5,1390,22,1,
81,1,1555,1391,16,
0,598,1,1406,1392,
17,1393,15,1070,1,
-1,1,5,1394,20,
1395,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,55,
0,1,211,1,3,
1,4,1,3,1396,
22,1,74,1,1159,
1397,17,1398,15,1070,
1,-1,1,5,1399,
20,1400,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
49,0,1,205,1,
3,1,6,1,5,
1401,22,1,68,1,
157,1402,17,1403,15,
1093,1,-1,1,5,
1404,20,1405,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,49,0,1,250,
1,3,1,4,1,
3,1406,22,1,113,
1,1413,1407,17,1408,
15,1070,1,-1,1,
5,1409,20,1410,4,
36,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
52,0,1,198,1,
3,1,4,1,3,
1411,22,1,61,1,
883,1412,17,1413,15,
1093,1,-1,1,5,
1414,20,1415,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,54,0,1,255,
1,3,1,4,1,
3,1416,22,1,118,
1,2104,801,1,1478,
1417,17,1418,15,1070,
1,-1,1,5,1419,
20,1420,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
53,0,1,209,1,
3,1,4,1,3,
1421,22,1,72,1,
1620,1422,17,1423,15,
1365,1,-1,1,5,
1424,20,1425,4,24,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
194,1,3,1,2,
1,1,1426,22,1,
57,1,1621,1427,16,
0,655,1,1574,787,
1,172,1428,17,1429,
15,1093,1,-1,1,
5,1430,20,1431,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,48,0,1,
249,1,3,1,4,
1,3,1432,22,1,
112,1,1931,863,1,
2360,813,1,1188,1433,
17,1434,15,1070,1,
-1,1,5,1435,20,
1436,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,50,0,51,
0,1,217,1,3,
1,6,1,5,1437,
22,1,80,1,1442,
1438,17,1439,15,1070,
1,-1,1,5,1440,
20,1441,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
54,0,1,210,1,
3,1,4,1,3,
1442,22,1,73,1,
1694,1443,16,0,189,
1,942,1444,17,1445,
15,1093,1,-1,1,
5,1446,20,1447,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,55,0,1,
256,1,3,1,4,
1,3,1448,22,1,
119,1,1195,1449,17,
1450,15,1070,1,-1,
1,5,1451,20,1452,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,48,0,
1,204,1,3,1,
6,1,5,1453,22,
1,67,1,1449,1454,
17,1455,15,1070,1,
-1,1,5,1456,20,
1457,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,51,0,1,
197,1,3,1,4,
1,3,1458,22,1,
60,1,1701,1459,17,
1460,15,1123,1,-1,
1,5,1461,20,1462,
4,36,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,51,0,1,191,
1,3,1,4,1,
3,1463,22,1,54,
1,447,1464,17,1465,
15,1466,4,30,37,
0,86,0,101,0,
99,0,116,0,111,
0,114,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
-1,1,5,1467,20,
1468,4,32,86,0,
101,0,99,0,116,
0,111,0,114,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,49,0,
1,226,1,3,1,
8,1,7,1469,22,
1,89,1,1958,1470,
16,0,582,1,188,
1471,17,1472,15,1093,
1,-1,1,5,1473,
20,1474,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,57,0,
1,248,1,3,1,
4,1,3,1475,22,
1,111,1,1370,1476,
17,1477,15,1070,1,
-1,1,5,1478,20,
1479,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,56,
0,1,212,1,3,
1,4,1,3,1480,
22,1,75,1,1657,
878,1,205,1481,17,
1482,15,1093,1,-1,
1,5,1483,20,1484,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,56,0,1,247,
1,3,1,4,1,
3,1485,22,1,110,
1,1665,1486,17,1487,
15,1123,1,-1,1,
5,1488,20,1489,4,
36,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,189,1,
3,1,2,1,1,
1490,22,1,52,1,
2029,714,1,2197,1491,
16,0,582,1,1224,
1492,17,1493,15,1070,
1,-1,1,5,1494,
20,1495,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
50,0,1,216,1,
3,1,6,1,5,
1496,22,1,79,1,
223,1497,17,1498,15,
1093,1,-1,1,5,
1499,20,1500,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,55,
0,1,246,1,3,
1,4,1,3,1501,
22,1,109,1,1730,
1502,17,1503,15,1123,
1,-1,1,5,1504,
20,1505,4,36,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,52,0,
1,192,1,3,1,
4,1,3,1506,22,
1,55,1,476,1507,
17,1508,15,1509,4,
18,37,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
-1,1,5,1510,20,
1511,4,20,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,52,0,1,224,
1,3,1,2,1,
1,1512,22,1,87,
1,477,1513,17,1514,
15,1509,1,-1,1,
5,1515,20,1516,4,
20,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,51,
0,1,223,1,3,
1,2,1,1,1517,
22,1,86,1,1231,
1518,17,1519,15,1070,
1,-1,1,5,1520,
20,1521,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,57,0,
1,203,1,3,1,
6,1,5,1522,22,
1,66,1,479,1523,
17,1524,15,1509,1,
-1,1,5,1525,20,
1526,4,20,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,49,0,1,221,
1,3,1,2,1,
1,1527,22,1,84,
1,480,1528,17,1529,
15,1530,4,26,37,
0,76,0,105,0,
115,0,116,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,-1,1,5,1531,
20,1532,4,28,76,
0,105,0,115,0,
116,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,95,0,
49,0,1,225,1,
3,1,4,1,3,
1533,22,1,88,1,
1485,1534,17,1535,15,
1070,1,-1,1,5,
1536,20,1537,4,36,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,196,1,3,
1,4,1,3,1538,
22,1,59,1,1737,
1539,16,0,278,1,
1989,894,1,1990,1540,
16,0,582,1,242,
1541,17,1542,15,1093,
1,-1,1,5,1543,
20,1544,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,54,0,
1,245,1,3,1,
4,1,3,1545,22,
1,108,1,478,1546,
17,1547,15,1509,1,
-1,1,5,1548,20,
1549,4,20,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,50,0,1,222,
1,3,1,2,1,
1,1550,22,1,85,
1,1001,1551,17,1552,
15,1192,1,-1,1,
5,1553,20,1554,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,56,
0,1,270,1,3,
1,5,1,4,1555,
22,1,133,1,1002,
1556,17,1557,15,1192,
1,-1,1,5,1558,
20,1559,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
263,1,3,1,5,
1,4,1560,22,1,
126,1,12,1561,19,
157,1,12,1562,5,
41,1,2074,1563,16,
0,155,1,1860,820,
1,2412,1564,16,0,
155,1,2197,1565,16,
0,155,1,2309,1566,
16,0,155,1,1657,
878,1,1989,894,1,
1990,1567,16,0,155,
1,31,1568,16,0,
155,1,32,1569,16,
0,155,1,2104,801,
1,2105,1570,16,0,
155,1,2358,807,1,
2545,1571,16,0,155,
1,2226,886,1,1901,
1572,16,0,155,1,
2454,1573,16,0,553,
1,1802,774,1,2021,
707,1,1804,1574,16,
0,155,1,2135,836,
1,2354,853,1,2355,
858,1,2029,714,1,
2030,720,1,2031,725,
1,2032,730,1,2360,
813,1,2035,741,1,
2037,746,1,2365,1575,
16,0,273,1,2039,
751,1,1931,863,1,
2041,757,1,1873,829,
1,2043,762,1,2044,
767,1,1775,1576,16,
0,155,1,2033,735,
1,1574,787,1,1958,
1577,16,0,155,1,
13,1578,19,258,1,
13,1579,5,33,1,
1860,820,1,2414,1580,
17,1581,15,1582,4,
22,37,0,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,-1,
1,5,1583,20,1584,
4,24,83,0,116,
0,97,0,116,0,
101,0,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,1,156,1,3,
1,6,1,5,1585,
22,1,17,1,2416,
1586,16,0,395,1,
2309,1587,16,0,256,
1,1657,878,1,2031,
725,1,1989,894,1,
32,1588,16,0,261,
1,2104,801,1,2226,
886,1,2033,735,1,
2451,1589,17,1590,15,
1591,4,20,37,0,
83,0,116,0,97,
0,116,0,101,0,
66,0,111,0,100,
0,121,0,1,-1,
1,5,1592,20,1593,
4,22,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,50,0,1,
155,1,3,1,3,
1,2,1594,22,1,
16,1,2453,1595,17,
1596,15,1591,1,-1,
1,5,1597,20,1598,
4,22,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,49,0,1,
154,1,3,1,2,
1,1,1599,22,1,
15,1,1802,774,1,
2021,707,1,2135,836,
1,2354,853,1,2355,
858,1,2029,714,1,
2030,720,1,2358,807,
1,2032,730,1,2360,
813,1,2035,741,1,
2037,746,1,2039,751,
1,1931,863,1,2041,
757,1,1873,829,1,
2043,762,1,2044,767,
1,2490,1600,16,0,
455,1,1574,787,1,
14,1601,19,144,1,
14,1602,5,104,1,
1260,1068,1,1011,1074,
1,1514,1080,1,9,
1085,1,10,1603,17,
1604,15,1605,4,48,
37,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,1,-1,
1,5,140,1,0,
1,0,1606,22,1,
18,1,262,1091,1,
1267,1097,1,1521,1102,
1,1773,1607,16,0,
148,1,19,1114,1,
20,1608,16,0,142,
1,2280,1121,1,525,
1184,1,2534,1609,17,
1610,15,1605,1,-1,
1,5,140,1,0,
1,0,1606,1,30,
1611,17,1612,15,1605,
1,-1,1,5,1613,
20,1614,4,50,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,50,0,1,
158,1,3,1,4,
1,3,1615,22,1,
20,1,283,1144,1,
2543,1616,16,0,142,
1,40,1133,1,41,
1617,17,1618,15,1619,
4,26,37,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,1,-1,
1,5,600,1,0,
1,0,1620,22,1,
136,1,42,1621,17,
1622,15,1623,4,38,
37,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1624,20,1625,
4,40,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,275,1,
3,1,2,1,1,
1626,22,1,139,1,
44,1149,1,47,1151,
1,48,1157,1,49,
1163,1,50,1174,1,
51,1169,1,305,1179,
1,63,1190,1,66,
1196,1,67,1201,1,
1478,1417,1,69,1211,
1,70,1216,1,68,
1206,1,74,1221,1,
1013,1226,1,1332,1231,
1,1048,1236,1,82,
1252,1,1296,1139,1,
1341,1269,1,328,1274,
1,1303,1279,1,1096,
1284,1,93,1290,1,
1550,1295,1,352,1301,
1,2363,1627,17,1628,
15,1605,1,-1,1,
5,1629,20,1630,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,49,
0,1,157,1,3,
1,2,1,1,1631,
22,1,19,1,107,
1308,1,1114,1313,1,
1370,1476,1,118,1316,
1,1123,1321,1,371,
1326,1,1377,1332,1,
375,1337,1,377,1342,
1,379,1375,1,380,
1352,1,883,1412,1,
373,1370,1,130,1358,
1,2401,1632,17,1633,
15,1605,1,-1,1,
5,140,1,0,1,
0,1606,1,143,1380,
1,1152,1386,1,387,
1634,16,0,567,1,
1406,1392,1,1159,1397,
1,157,1402,1,1413,
1407,1,1665,1486,1,
412,1635,16,0,577,
1,1094,1636,16,0,
602,1,172,1428,1,
827,1347,1,1188,1433,
1,437,1637,16,0,
639,1,1442,1438,1,
1694,1638,16,0,148,
1,942,1444,1,1195,
1449,1,1449,1454,1,
1701,1459,1,447,1464,
1,188,1471,1,205,
1481,1,459,1639,17,
1640,15,1619,1,-1,
1,5,600,1,0,
1,0,1620,1,461,
1641,16,0,602,1,
464,1642,17,1643,15,
1619,1,-1,1,5,
1644,20,1645,4,28,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,50,0,1,274,
1,3,1,4,1,
3,1646,22,1,138,
1,1224,1492,1,223,
1497,1,1730,1502,1,
476,1507,1,477,1513,
1,1231,1518,1,2410,
1647,16,0,142,1,
480,1528,1,1485,1534,
1,242,1541,1,478,
1546,1,479,1523,1,
481,1648,17,1649,15,
1619,1,-1,1,5,
1650,20,1651,4,28,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,49,0,1,273,
1,3,1,2,1,
1,1652,22,1,137,
1,1001,1551,1,1002,
1556,1,15,1653,19,
361,1,15,1654,5,
6,1,1114,1655,16,
0,359,1,1621,1656,
16,0,638,1,40,
1657,16,0,564,1,
19,1114,1,9,1085,
1,2549,1658,16,0,
629,1,16,1659,19,
136,1,16,1660,5,
134,1,256,1661,16,
0,187,1,1261,1662,
16,0,187,1,509,
1663,16,0,187,1,
2197,1664,16,0,187,
1,9,1665,16,0,
134,1,2021,707,1,
2372,1666,17,1667,15,
1668,4,12,37,0,
69,0,118,0,101,
0,110,0,116,0,
1,-1,1,5,1669,
20,1670,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,56,0,
1,310,1,3,1,
2,1,1,1671,22,
1,174,1,1775,1672,
16,0,187,1,2029,
714,1,2030,720,1,
2031,725,1,2032,730,
1,2033,735,1,277,
1673,16,0,187,1,
2035,741,1,2037,746,
1,2039,751,1,32,
1674,16,0,187,1,
2041,757,1,2043,762,
1,2044,767,1,40,
1675,16,0,166,1,
41,1676,16,0,187,
1,1297,1677,16,0,
187,1,43,1678,16,
0,187,1,44,1679,
16,0,166,1,1802,
774,1,1804,1680,16,
0,187,1,299,1681,
16,0,187,1,2309,
1682,16,0,187,1,
52,1683,16,0,187,
1,1515,1684,16,0,
187,1,525,1685,16,
0,187,1,62,1686,
16,0,201,1,63,
1687,16,0,166,1,
2074,1688,16,0,187,
1,1574,787,1,71,
1689,16,0,187,1,
1833,1690,16,0,330,
1,1834,1691,16,0,
187,1,79,1692,16,
0,187,1,1335,1693,
16,0,187,1,322,
1694,16,0,187,1,
76,1695,16,0,187,
1,85,1696,16,0,
187,1,89,1697,16,
0,187,1,2354,853,
1,2355,858,1,97,
1698,16,0,187,1,
2358,807,1,2360,813,
1,102,1699,16,0,
187,1,1860,820,1,
2533,1700,16,0,468,
1,346,1701,16,0,
187,1,2367,1702,17,
1703,15,1668,1,-1,
1,5,1704,20,1705,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,51,
0,51,0,1,315,
1,3,1,2,1,
1,1706,22,1,179,
1,2368,1707,17,1708,
15,1668,1,-1,1,
5,1709,20,1710,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,51,0,
50,0,1,314,1,
3,1,2,1,1,
1711,22,1,178,1,
2369,1712,17,1713,15,
1668,1,-1,1,5,
1714,20,1715,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,51,0,49,
0,1,313,1,3,
1,2,1,1,1716,
22,1,177,1,2370,
1717,17,1718,15,1668,
1,-1,1,5,1719,
20,1720,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,51,0,48,0,
1,312,1,3,1,
2,1,1,1721,22,
1,176,1,112,1722,
16,0,187,1,1117,
1723,16,0,187,1,
2373,1724,17,1725,15,
1668,1,-1,1,5,
1726,20,1727,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,55,
0,1,309,1,3,
1,2,1,1,1728,
22,1,173,1,2374,
1729,17,1730,15,1668,
1,-1,1,5,1731,
20,1732,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,54,0,
1,308,1,3,1,
2,1,1,1733,22,
1,172,1,1873,829,
1,2376,1734,17,1735,
15,1668,1,-1,1,
5,1736,20,1737,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,50,0,
52,0,1,306,1,
3,1,2,1,1,
1738,22,1,170,1,
1875,1739,16,0,444,
1,2378,1740,17,1741,
15,1668,1,-1,1,
5,1742,20,1743,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,50,0,
50,0,1,304,1,
3,1,2,1,1,
1744,22,1,168,1,
2379,1745,17,1746,15,
1668,1,-1,1,5,
1747,20,1748,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,49,
0,1,303,1,3,
1,2,1,1,1749,
22,1,167,1,2380,
1750,17,1751,15,1668,
1,-1,1,5,1752,
20,1753,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,48,0,
1,302,1,3,1,
2,1,1,1754,22,
1,166,1,2381,1755,
17,1756,15,1668,1,
-1,1,5,1757,20,
1758,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,57,0,1,
301,1,3,1,2,
1,1,1759,22,1,
165,1,2382,1760,17,
1761,15,1668,1,-1,
1,5,1762,20,1763,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,56,0,1,300,
1,3,1,2,1,
1,1764,22,1,164,
1,124,1765,16,0,
187,1,2384,1766,17,
1767,15,1668,1,-1,
1,5,1768,20,1769,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,54,0,1,298,
1,3,1,2,1,
1,1770,22,1,162,
1,2385,1771,17,1772,
15,1668,1,-1,1,
5,1773,20,1774,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
53,0,1,297,1,
3,1,2,1,1,
1775,22,1,161,1,
2386,1776,17,1777,15,
1668,1,-1,1,5,
1778,20,1779,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,52,
0,1,296,1,3,
1,2,1,1,1780,
22,1,160,1,2387,
1781,17,1782,15,1668,
1,-1,1,5,1783,
20,1784,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,51,0,
1,295,1,3,1,
2,1,1,1785,22,
1,159,1,2388,1786,
17,1787,15,1668,1,
-1,1,5,1788,20,
1789,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,50,0,1,
294,1,3,1,2,
1,1,1790,22,1,
158,1,2389,1791,17,
1792,15,1668,1,-1,
1,5,1793,20,1794,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,49,0,1,293,
1,3,1,2,1,
1,1795,22,1,157,
1,2390,1796,17,1797,
15,1668,1,-1,1,
5,1798,20,1799,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
48,0,1,292,1,
3,1,2,1,1,
1800,22,1,156,1,
2391,1801,17,1802,15,
1668,1,-1,1,5,
1803,20,1804,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,57,0,1,
291,1,3,1,2,
1,1,1805,22,1,
155,1,2392,1806,17,
1807,15,1668,1,-1,
1,5,1808,20,1809,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,56,
0,1,290,1,3,
1,2,1,1,1810,
22,1,154,1,2393,
1811,17,1812,15,1668,
1,-1,1,5,1813,
20,1814,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,55,0,1,289,
1,3,1,2,1,
1,1815,22,1,153,
1,2394,1816,17,1817,
15,1668,1,-1,1,
5,1818,20,1819,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,54,0,
1,288,1,3,1,
2,1,1,1820,22,
1,152,1,2395,1821,
17,1822,15,1668,1,
-1,1,5,1823,20,
1824,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
53,0,1,287,1,
3,1,2,1,1,
1825,22,1,151,1,
137,1826,16,0,187,
1,2397,1827,17,1828,
15,1668,1,-1,1,
5,1829,20,1830,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,51,0,
1,285,1,3,1,
2,1,1,1831,22,
1,149,1,2398,1832,
17,1833,15,1668,1,
-1,1,5,1834,20,
1835,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,1,284,1,
3,1,2,1,1,
1836,22,1,148,1,
2399,1837,17,1838,15,
1668,1,-1,1,5,
1839,20,1840,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
283,1,3,1,2,
1,1,1841,22,1,
147,1,2400,1842,16,
0,354,1,381,1843,
16,0,187,1,1901,
1844,16,0,187,1,
1153,1845,16,0,187,
1,151,1846,16,0,
187,1,1407,1847,16,
0,187,1,1659,1848,
16,0,187,1,406,
1849,16,0,187,1,
1371,1850,16,0,187,
1,2104,801,1,2105,
1851,16,0,187,1,
166,1852,16,0,187,
1,1622,1853,16,0,
187,1,1931,863,1,
1932,1854,16,0,484,
1,1933,1855,16,0,
187,1,1876,1856,16,
0,187,1,431,1857,
16,0,187,1,1585,
1858,16,0,187,1,
182,1859,16,0,187,
1,1189,1860,16,0,
187,1,2371,1861,17,
1862,15,1668,1,-1,
1,5,1863,20,1864,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,57,0,1,311,
1,3,1,2,1,
1,1865,22,1,175,
1,1695,1866,16,0,
187,1,2375,1867,17,
1868,15,1668,1,-1,
1,5,1869,20,1870,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,53,0,1,307,
1,3,1,2,1,
1,1871,22,1,171,
1,2377,1872,17,1873,
15,1668,1,-1,1,
5,1874,20,1875,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,50,0,
51,0,1,305,1,
3,1,2,1,1,
1876,22,1,169,1,
2135,836,1,447,1877,
16,0,187,1,199,
1878,16,0,187,1,
2383,1879,17,1880,15,
1668,1,-1,1,5,
1881,20,1882,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,55,
0,1,299,1,3,
1,2,1,1,1883,
22,1,163,1,1958,
1884,16,0,187,1,
2550,1885,16,0,187,
1,1657,878,1,1658,
1886,16,0,659,1,
459,1887,16,0,187,
1,462,1888,16,0,
187,1,2396,1889,17,
1890,15,1668,1,-1,
1,5,1891,20,1892,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,52,
0,1,286,1,3,
1,2,1,1,1893,
22,1,150,1,217,
1894,16,0,187,1,
2226,886,1,1225,1895,
16,0,187,1,1479,
1896,16,0,187,1,
1731,1897,16,0,187,
1,1989,894,1,1990,
1898,16,0,187,1,
1443,1899,16,0,187,
1,236,1900,16,0,
187,1,1756,1901,16,
0,187,1,17,1902,
19,154,1,17,1903,
5,116,1,1,1904,
17,1905,15,1906,4,
18,37,0,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
-1,1,5,1907,20,
1908,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,55,0,1,282,
1,3,1,2,1,
1,1909,22,1,146,
1,2,1910,17,1911,
15,1906,1,-1,1,
5,1912,20,1913,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,54,
0,1,281,1,3,
1,2,1,1,1914,
22,1,145,1,3,
1915,17,1916,15,1906,
1,-1,1,5,1917,
20,1918,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,53,0,1,
280,1,3,1,2,
1,1,1919,22,1,
144,1,4,1920,17,
1921,15,1906,1,-1,
1,5,1922,20,1923,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
52,0,1,279,1,
3,1,2,1,1,
1924,22,1,143,1,
5,1925,17,1926,15,
1906,1,-1,1,5,
1927,20,1928,4,20,
84,0,121,0,112,
0,101,0,110,0,
97,0,109,0,101,
0,95,0,51,0,
1,278,1,3,1,
2,1,1,1929,22,
1,142,1,6,1930,
17,1931,15,1906,1,
-1,1,5,1932,20,
1933,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,50,0,1,277,
1,3,1,2,1,
1,1934,22,1,141,
1,7,1935,17,1936,
15,1906,1,-1,1,
5,1937,20,1938,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,49,
0,1,276,1,3,
1,2,1,1,1939,
22,1,140,1,1514,
1080,1,9,1085,1,
10,1603,1,262,1091,
1,1267,1097,1,1521,
1102,1,1773,1940,16,
0,235,1,19,1114,
1,20,1941,16,0,
152,1,2280,1121,1,
525,1184,1,2534,1609,
1,30,1611,1,283,
1144,1,2543,1942,16,
0,476,1,1010,1943,
16,0,592,1,40,
1133,1,41,1617,1,
42,1621,1,44,1149,
1,1260,1068,1,47,
1151,1,1303,1279,1,
49,1163,1,50,1174,
1,48,1157,1,305,
1179,1,51,1169,1,
61,1944,16,0,193,
1,63,1190,1,2073,
1945,16,0,566,1,
66,1196,1,67,1201,
1,68,1206,1,69,
1211,1,70,1216,1,
73,1946,16,0,203,
1,74,1221,1,1013,
1226,1,328,1274,1,
1048,1236,1,82,1252,
1,1840,1947,16,0,
364,1,1341,1269,1,
1094,1948,16,0,654,
1,1096,1284,1,93,
1290,1,1550,1295,1,
827,1347,1,2363,1627,
1,1011,1074,1,107,
1308,1,1114,1313,1,
1871,1949,16,0,374,
1,1370,1476,1,1478,
1417,1,118,1316,1,
1123,1321,1,1332,1231,
1,1377,1332,1,375,
1337,1,1882,1950,16,
0,406,1,377,1342,
1,352,1301,1,379,
1375,1,380,1352,1,
130,1358,1,371,1326,
1,373,1370,1,1012,
1951,16,0,594,1,
2401,1632,1,143,1380,
1,1152,1386,1,1406,
1392,1,1159,1397,1,
157,1402,1,1413,1407,
1,883,1412,1,1296,
1139,1,172,1428,1,
1665,1486,1,1939,1952,
16,0,452,1,1188,
1433,1,1442,1438,1,
2196,1953,16,0,649,
1,942,1444,1,1195,
1449,1,1449,1454,1,
1701,1459,1,447,1464,
1,188,1471,1,205,
1481,1,459,1639,1,
464,1642,1,1224,1492,
1,223,1497,1,1730,
1502,1,476,1507,1,
477,1513,1,1231,1518,
1,2410,1954,16,0,
362,1,480,1528,1,
1485,1534,1,242,1541,
1,478,1546,1,479,
1523,1,481,1648,1,
1001,1551,1,1002,1556,
1,18,1955,19,496,
1,18,1956,5,83,
1,1011,1074,1,1012,
1957,16,0,494,1,
1013,1226,1,262,1091,
1,1267,1958,16,0,
494,1,515,1959,16,
0,494,1,1521,1960,
16,0,494,1,525,
1184,1,283,1144,1,
40,1133,1,42,1961,
16,0,494,1,44,
1149,1,2556,1962,16,
0,494,1,47,1151,
1,1303,1963,16,0,
494,1,1555,1964,16,
0,494,1,50,1174,
1,48,1157,1,49,
1163,1,51,1169,1,
63,1190,1,305,1179,
1,66,1196,1,67,
1201,1,68,1206,1,
69,1211,1,70,1216,
1,73,1965,16,0,
494,1,74,1221,1,
328,1274,1,1048,1966,
16,0,494,1,82,
1967,16,0,494,1,
1840,1968,16,0,494,
1,1591,1969,16,0,
494,1,1341,1970,16,
0,494,1,1096,1284,
1,93,1290,1,352,
1301,1,107,1971,16,
0,494,1,1114,1313,
1,118,1972,16,0,
494,1,1123,1973,16,
0,494,1,371,1326,
1,1628,1974,16,0,
494,1,375,1337,1,
1882,1975,16,0,494,
1,377,1342,1,379,
1375,1,380,1352,1,
883,1976,16,0,494,
1,373,1370,1,130,
1977,16,0,494,1,
143,1978,16,0,494,
1,387,1979,16,0,
494,1,1159,1980,16,
0,494,1,157,1981,
16,0,494,1,1413,
1982,16,0,494,1,
1665,1983,16,0,494,
1,412,1984,16,0,
494,1,1377,1985,16,
0,494,1,172,1986,
16,0,494,1,1939,
1987,16,0,494,1,
437,1988,16,0,494,
1,188,1989,16,0,
494,1,942,1990,16,
0,494,1,1195,1991,
16,0,494,1,1449,
1992,16,0,494,1,
1701,1993,16,0,494,
1,447,1464,1,205,
1994,16,0,494,1,
827,1995,16,0,494,
1,223,1996,16,0,
494,1,476,1507,1,
477,1513,1,1231,1997,
16,0,494,1,479,
1523,1,480,1528,1,
1485,1998,16,0,494,
1,1737,1999,16,0,
494,1,242,2000,16,
0,494,1,478,1546,
1,1001,1551,1,1002,
1556,1,19,2001,19,
227,1,19,2002,5,
171,1,256,2003,16,
0,225,1,1261,2004,
16,0,225,1,1011,
1074,1,1012,2005,16,
0,483,1,1515,2006,
16,0,225,1,262,
1091,1,1267,2007,16,
0,483,1,2021,707,
1,1521,2008,16,0,
483,1,1775,2009,16,
0,225,1,2029,714,
1,2030,720,1,2031,
725,1,2032,730,1,
2033,735,1,277,2010,
16,0,225,1,2035,
741,1,2037,746,1,
2039,751,1,32,2011,
16,0,225,1,2041,
757,1,2043,762,1,
2044,767,1,40,1133,
1,41,2012,16,0,
225,1,42,2013,16,
0,483,1,43,2014,
16,0,225,1,44,
1149,1,1802,774,1,
2556,2015,16,0,483,
1,1804,2016,16,0,
225,1,48,1157,1,
49,1163,1,2309,2017,
16,0,225,1,51,
1169,1,52,2018,16,
0,225,1,47,1151,
1,305,1179,1,50,
1174,1,509,2019,16,
0,225,1,299,2020,
16,0,225,1,283,
1144,1,63,1190,1,
1002,1556,1,66,1196,
1,67,1201,1,68,
1206,1,69,1211,1,
70,1216,1,71,2021,
16,0,225,1,73,
2022,16,0,483,1,
74,1221,1,1013,1226,
1,76,2023,16,0,
225,1,1834,2024,16,
0,225,1,1048,2025,
16,0,483,1,79,
2026,16,0,225,1,
1335,2027,16,0,225,
1,82,2028,16,0,
483,1,1840,2029,16,
0,483,1,1297,2030,
16,0,225,1,85,
2031,16,0,225,1,
1341,2032,16,0,483,
1,89,2033,16,0,
225,1,1303,2034,16,
0,483,1,1096,1284,
1,93,1290,1,2354,
853,1,2355,858,1,
97,2035,16,0,225,
1,2358,807,1,2360,
813,1,102,2036,16,
0,225,1,1860,820,
1,107,2037,16,0,
483,1,1114,1313,1,
112,2038,16,0,225,
1,1117,2039,16,0,
225,1,352,1301,1,
1873,829,1,118,2040,
16,0,483,1,1123,
2041,16,0,483,1,
371,1326,1,2550,2042,
16,0,225,1,1377,
2043,16,0,483,1,
124,2044,16,0,225,
1,1882,2045,16,0,
483,1,377,1342,1,
2135,836,1,827,2046,
16,0,483,1,380,
1352,1,130,2047,16,
0,483,1,322,2048,
16,0,225,1,2074,
2049,16,0,225,1,
373,1370,1,387,2050,
16,0,483,1,137,
2051,16,0,225,1,
515,2052,16,0,483,
1,379,1375,1,143,
2053,16,0,483,1,
1901,2054,16,0,225,
1,2197,2055,16,0,
225,1,1153,2056,16,
0,225,1,375,1337,
1,151,2057,16,0,
225,1,1407,2058,16,
0,225,1,1659,2059,
16,0,225,1,1159,
2060,16,0,483,1,
381,2061,16,0,225,
1,157,2062,16,0,
483,1,1413,2063,16,
0,483,1,883,2064,
16,0,483,1,1371,
2065,16,0,225,1,
328,1274,1,2104,801,
1,2105,2066,16,0,
225,1,166,2067,16,
0,225,1,346,2068,
16,0,225,1,1622,
2069,16,0,225,1,
406,2070,16,0,225,
1,1574,787,1,172,
2071,16,0,483,1,
1931,863,1,412,2072,
16,0,483,1,1933,
2073,16,0,225,1,
1876,2074,16,0,225,
1,431,2075,16,0,
225,1,1585,2076,16,
0,225,1,182,2077,
16,0,225,1,1628,
2078,16,0,483,1,
1189,2079,16,0,225,
1,437,2080,16,0,
483,1,1591,2081,16,
0,483,1,188,2082,
16,0,483,1,1695,
2083,16,0,225,1,
1195,2084,16,0,483,
1,1449,2085,16,0,
483,1,1701,2086,16,
0,483,1,447,2087,
16,0,225,1,199,
2088,16,0,225,1,
1958,2089,16,0,225,
1,525,2090,16,0,
225,1,1657,878,1,
205,2091,16,0,483,
1,459,2092,16,0,
225,1,462,2093,16,
0,225,1,1665,2094,
16,0,483,1,217,
2095,16,0,225,1,
2226,886,1,942,2096,
16,0,483,1,1225,
2097,16,0,225,1,
223,2098,16,0,483,
1,1479,2099,16,0,
225,1,1731,2100,16,
0,225,1,477,1513,
1,1231,2101,16,0,
483,1,479,1523,1,
480,1528,1,1485,2102,
16,0,483,1,1737,
2103,16,0,483,1,
1989,894,1,1990,2104,
16,0,225,1,1443,
2105,16,0,225,1,
236,2106,16,0,225,
1,476,1507,1,242,
2107,16,0,483,1,
478,1546,1,1939,2108,
16,0,483,1,1001,
1551,1,1555,2109,16,
0,483,1,1756,2110,
16,0,225,1,20,
2111,19,458,1,20,
2112,5,83,1,1011,
1074,1,1012,2113,16,
0,456,1,1013,1226,
1,262,1091,1,1267,
2114,16,0,456,1,
515,2115,16,0,456,
1,1521,2116,16,0,
456,1,525,1184,1,
283,1144,1,40,1133,
1,42,2117,16,0,
456,1,44,1149,1,
2556,2118,16,0,456,
1,47,1151,1,1303,
2119,16,0,456,1,
1555,2120,16,0,456,
1,50,1174,1,48,
1157,1,49,1163,1,
51,1169,1,63,1190,
1,305,1179,1,66,
1196,1,67,1201,1,
68,1206,1,69,1211,
1,70,1216,1,73,
2121,16,0,456,1,
74,1221,1,328,2122,
16,0,456,1,1048,
2123,16,0,456,1,
82,2124,16,0,456,
1,1840,2125,16,0,
456,1,1591,2126,16,
0,456,1,1341,2127,
16,0,456,1,1096,
1284,1,93,1290,1,
352,2128,16,0,456,
1,107,2129,16,0,
456,1,1114,1313,1,
118,2130,16,0,456,
1,1123,2131,16,0,
456,1,371,1326,1,
1628,2132,16,0,456,
1,375,1337,1,1882,
2133,16,0,456,1,
377,1342,1,379,1375,
1,380,1352,1,883,
2134,16,0,456,1,
373,1370,1,130,2135,
16,0,456,1,143,
2136,16,0,456,1,
387,2137,16,0,456,
1,1159,2138,16,0,
456,1,157,2139,16,
0,456,1,1413,2140,
16,0,456,1,1665,
2141,16,0,456,1,
412,2142,16,0,456,
1,1377,2143,16,0,
456,1,172,2144,16,
0,456,1,1939,2145,
16,0,456,1,437,
2146,16,0,456,1,
188,2147,16,0,456,
1,942,2148,16,0,
456,1,1195,2149,16,
0,456,1,1449,2150,
16,0,456,1,1701,
2151,16,0,456,1,
447,1464,1,205,2152,
16,0,456,1,827,
2153,16,0,456,1,
223,2154,16,0,456,
1,476,1507,1,477,
1513,1,1231,2155,16,
0,456,1,479,1523,
1,480,1528,1,1485,
2156,16,0,456,1,
1737,2157,16,0,456,
1,242,2158,16,0,
456,1,478,1546,1,
1001,1551,1,1002,1556,
1,21,2159,19,449,
1,21,2160,5,83,
1,1011,1074,1,1012,
2161,16,0,447,1,
1013,1226,1,262,1091,
1,1267,2162,16,0,
447,1,515,2163,16,
0,447,1,1521,2164,
16,0,447,1,525,
1184,1,283,1144,1,
40,1133,1,42,2165,
16,0,447,1,44,
1149,1,2556,2166,16,
0,447,1,47,1151,
1,1303,2167,16,0,
447,1,1555,2168,16,
0,447,1,50,1174,
1,48,1157,1,49,
1163,1,51,1169,1,
63,1190,1,305,1179,
1,66,1196,1,67,
1201,1,68,1206,1,
69,1211,1,70,1216,
1,73,2169,16,0,
447,1,74,1221,1,
328,2170,16,0,447,
1,1048,2171,16,0,
447,1,82,2172,16,
0,447,1,1840,2173,
16,0,447,1,1591,
2174,16,0,447,1,
1341,2175,16,0,447,
1,1096,1284,1,93,
1290,1,352,2176,16,
0,447,1,107,2177,
16,0,447,1,1114,
1313,1,118,2178,16,
0,447,1,1123,2179,
16,0,447,1,371,
1326,1,1628,2180,16,
0,447,1,375,1337,
1,1882,2181,16,0,
447,1,377,1342,1,
379,1375,1,380,1352,
1,883,2182,16,0,
447,1,373,1370,1,
130,2183,16,0,447,
1,143,2184,16,0,
447,1,387,2185,16,
0,447,1,1159,2186,
16,0,447,1,157,
2187,16,0,447,1,
1413,2188,16,0,447,
1,1665,2189,16,0,
447,1,412,2190,16,
0,447,1,1377,2191,
16,0,447,1,172,
2192,16,0,447,1,
1939,2193,16,0,447,
1,437,2194,16,0,
447,1,188,2195,16,
0,447,1,942,2196,
16,0,447,1,1195,
2197,16,0,447,1,
1449,2198,16,0,447,
1,1701,2199,16,0,
447,1,447,1464,1,
205,2200,16,0,447,
1,827,2201,16,0,
447,1,223,2202,16,
0,447,1,476,1507,
1,477,1513,1,1231,
2203,16,0,447,1,
479,1523,1,480,1528,
1,1485,2204,16,0,
447,1,1737,2205,16,
0,447,1,242,2206,
16,0,447,1,478,
1546,1,1001,1551,1,
1002,1556,1,22,2207,
19,435,1,22,2208,
5,83,1,1011,1074,
1,1012,2209,16,0,
433,1,1013,1226,1,
262,1091,1,1267,2210,
16,0,433,1,515,
2211,16,0,433,1,
1521,2212,16,0,433,
1,525,1184,1,283,
1144,1,40,1133,1,
42,2213,16,0,433,
1,44,1149,1,2556,
2214,16,0,433,1,
47,1151,1,1303,2215,
16,0,433,1,1555,
2216,16,0,433,1,
50,1174,1,48,1157,
1,49,1163,1,51,
1169,1,63,1190,1,
305,1179,1,66,1196,
1,67,1201,1,68,
1206,1,69,1211,1,
70,1216,1,73,2217,
16,0,433,1,74,
1221,1,328,2218,16,
0,433,1,1048,2219,
16,0,433,1,82,
2220,16,0,433,1,
1840,2221,16,0,433,
1,1591,2222,16,0,
433,1,1341,2223,16,
0,433,1,1096,1284,
1,93,1290,1,352,
2224,16,0,433,1,
107,2225,16,0,433,
1,1114,1313,1,118,
2226,16,0,433,1,
1123,2227,16,0,433,
1,371,1326,1,1628,
2228,16,0,433,1,
375,1337,1,1882,2229,
16,0,433,1,377,
1342,1,379,1375,1,
380,1352,1,883,2230,
16,0,433,1,373,
1370,1,130,2231,16,
0,433,1,143,2232,
16,0,433,1,387,
2233,16,0,433,1,
1159,2234,16,0,433,
1,157,2235,16,0,
433,1,1413,2236,16,
0,433,1,1665,2237,
16,0,433,1,412,
2238,16,0,433,1,
1377,2239,16,0,433,
1,172,2240,16,0,
433,1,1939,2241,16,
0,433,1,437,2242,
16,0,433,1,188,
2243,16,0,433,1,
942,2244,16,0,433,
1,1195,2245,16,0,
433,1,1449,2246,16,
0,433,1,1701,2247,
16,0,433,1,447,
1464,1,205,2248,16,
0,433,1,827,2249,
16,0,433,1,223,
2250,16,0,433,1,
476,1507,1,477,1513,
1,1231,2251,16,0,
433,1,479,1523,1,
480,1528,1,1485,2252,
16,0,433,1,1737,
2253,16,0,433,1,
242,2254,16,0,433,
1,478,1546,1,1001,
1551,1,1002,1556,1,
23,2255,19,508,1,
23,2256,5,36,1,
2074,2257,16,0,506,
1,1860,820,1,2197,
2258,16,0,506,1,
2309,2259,16,0,506,
1,1657,878,1,2031,
725,1,1989,894,1,
1990,2260,16,0,506,
1,1775,2261,16,0,
506,1,32,2262,16,
0,506,1,2104,801,
1,2105,2263,16,0,
506,1,2226,886,1,
1901,2264,16,0,506,
1,1802,774,1,2021,
707,1,1804,2265,16,
0,506,1,2135,836,
1,2354,853,1,2355,
858,1,2029,714,1,
2030,720,1,2358,807,
1,2032,730,1,2360,
813,1,2035,741,1,
2037,746,1,2039,751,
1,1931,863,1,2041,
757,1,1873,829,1,
2043,762,1,2044,767,
1,2033,735,1,1574,
787,1,1958,2266,16,
0,506,1,24,2267,
19,177,1,24,2268,
5,5,1,44,2269,
16,0,175,1,377,
2270,16,0,544,1,
40,2271,16,0,662,
1,63,2272,16,0,
195,1,373,2273,16,
0,540,1,25,2274,
19,339,1,25,2275,
5,172,1,256,2276,
16,0,549,1,1261,
2277,16,0,549,1,
1011,1074,1,1012,2278,
16,0,337,1,1515,
2279,16,0,549,1,
262,1091,1,1267,2280,
16,0,337,1,2021,
707,1,1521,2281,16,
0,337,1,1775,2282,
16,0,549,1,2029,
714,1,2030,720,1,
2031,725,1,2032,730,
1,2033,735,1,277,
2283,16,0,549,1,
2035,741,1,2037,746,
1,2039,751,1,32,
2284,16,0,549,1,
2041,757,1,2043,762,
1,2044,767,1,40,
1133,1,41,2285,16,
0,549,1,42,2286,
16,0,337,1,43,
2287,16,0,549,1,
44,1149,1,1802,774,
1,2556,2288,16,0,
337,1,1804,2289,16,
0,549,1,48,1157,
1,49,1163,1,2309,
2290,16,0,549,1,
51,1169,1,52,2291,
16,0,549,1,47,
1151,1,305,1179,1,
50,1174,1,509,2292,
16,0,549,1,299,
2293,16,0,549,1,
62,2294,16,0,549,
1,63,1190,1,1002,
1556,1,66,1196,1,
67,1201,1,68,1206,
1,69,1211,1,70,
1216,1,71,2295,16,
0,549,1,283,1144,
1,73,2296,16,0,
337,1,74,1221,1,
1013,1226,1,76,2297,
16,0,549,1,1834,
2298,16,0,549,1,
1048,1236,1,79,2299,
16,0,549,1,1335,
2300,16,0,549,1,
82,2301,16,0,337,
1,1840,2302,16,0,
337,1,1297,2303,16,
0,549,1,85,2304,
16,0,549,1,1341,
2305,16,0,337,1,
89,2306,16,0,549,
1,1303,2307,16,0,
337,1,1096,1284,1,
93,1290,1,2354,853,
1,2355,858,1,97,
2308,16,0,549,1,
2358,807,1,2360,813,
1,102,2309,16,0,
549,1,1860,820,1,
107,2310,16,0,337,
1,1114,1313,1,112,
2311,16,0,549,1,
1117,2312,16,0,549,
1,352,1301,1,1873,
829,1,118,1316,1,
1123,2313,16,0,337,
1,371,1326,1,2550,
2314,16,0,549,1,
1377,2315,16,0,337,
1,124,2316,16,0,
549,1,1882,2317,16,
0,337,1,377,1342,
1,2135,836,1,827,
2318,16,0,337,1,
380,1352,1,130,1358,
1,322,2319,16,0,
549,1,2074,2320,16,
0,549,1,373,1370,
1,387,2321,16,0,
337,1,137,2322,16,
0,549,1,515,2323,
16,0,337,1,379,
1375,1,143,2324,16,
0,337,1,1901,2325,
16,0,549,1,2197,
2326,16,0,549,1,
1153,2327,16,0,549,
1,375,1337,1,151,
2328,16,0,549,1,
1407,2329,16,0,549,
1,1659,2330,16,0,
549,1,1159,2331,16,
0,337,1,381,2332,
16,0,549,1,157,
2333,16,0,337,1,
1413,2334,16,0,337,
1,883,2335,16,0,
337,1,1371,2336,16,
0,549,1,328,1274,
1,2104,801,1,2105,
2337,16,0,549,1,
166,2338,16,0,549,
1,346,2339,16,0,
549,1,1622,2340,16,
0,549,1,406,2341,
16,0,549,1,1574,
787,1,172,1428,1,
1931,863,1,412,2342,
16,0,337,1,1933,
2343,16,0,549,1,
1876,2344,16,0,549,
1,431,2345,16,0,
549,1,1585,2346,16,
0,549,1,182,2347,
16,0,549,1,1628,
2348,16,0,337,1,
1189,2349,16,0,549,
1,437,2350,16,0,
337,1,1591,2351,16,
0,337,1,188,1471,
1,1695,2352,16,0,
549,1,1195,2353,16,
0,337,1,1449,2354,
16,0,337,1,1701,
2355,16,0,337,1,
447,2356,16,0,549,
1,199,2357,16,0,
549,1,1958,2358,16,
0,549,1,525,2359,
16,0,549,1,1657,
878,1,205,2360,16,
0,337,1,459,2361,
16,0,549,1,462,
2362,16,0,549,1,
1665,2363,16,0,337,
1,217,2364,16,0,
549,1,2226,886,1,
942,1444,1,1225,2365,
16,0,549,1,223,
2366,16,0,337,1,
1479,2367,16,0,549,
1,1731,2368,16,0,
549,1,477,1513,1,
1231,2369,16,0,337,
1,479,1523,1,480,
1528,1,1485,2370,16,
0,337,1,1737,2371,
16,0,337,1,1989,
894,1,1990,2372,16,
0,549,1,1443,2373,
16,0,549,1,236,
2374,16,0,549,1,
476,1507,1,242,2375,
16,0,337,1,478,
1546,1,1939,2376,16,
0,337,1,1001,1551,
1,1555,2377,16,0,
337,1,1756,2378,16,
0,549,1,26,2379,
19,369,1,26,2380,
5,83,1,1011,1074,
1,1012,2381,16,0,
367,1,1013,1226,1,
262,1091,1,1267,2382,
16,0,367,1,515,
2383,16,0,648,1,
1521,2384,16,0,367,
1,525,1184,1,283,
1144,1,40,1133,1,
42,2385,16,0,367,
1,44,1149,1,2556,
2386,16,0,367,1,
47,1151,1,1303,2387,
16,0,367,1,1555,
2388,16,0,367,1,
50,1174,1,48,1157,
1,49,1163,1,51,
1169,1,63,1190,1,
305,1179,1,66,1196,
1,67,1201,1,68,
1206,1,69,1211,1,
70,1216,1,73,2389,
16,0,367,1,74,
1221,1,328,1274,1,
1048,1236,1,82,2390,
16,0,367,1,1840,
2391,16,0,367,1,
1591,2392,16,0,367,
1,1341,2393,16,0,
367,1,1096,1284,1,
93,1290,1,352,1301,
1,107,2394,16,0,
367,1,1114,1313,1,
118,1316,1,1123,2395,
16,0,367,1,371,
1326,1,1628,2396,16,
0,367,1,375,1337,
1,1882,2397,16,0,
367,1,377,1342,1,
379,1375,1,380,1352,
1,883,2398,16,0,
367,1,373,1370,1,
130,1358,1,143,2399,
16,0,367,1,387,
2400,16,0,367,1,
1159,2401,16,0,367,
1,157,2402,16,0,
367,1,1413,2403,16,
0,367,1,1665,2404,
16,0,367,1,412,
2405,16,0,367,1,
1377,2406,16,0,367,
1,172,1428,1,1939,
2407,16,0,367,1,
437,2408,16,0,587,
1,188,1471,1,942,
1444,1,1195,2409,16,
0,367,1,1449,2410,
16,0,367,1,1701,
2411,16,0,367,1,
447,1464,1,205,2412,
16,0,367,1,827,
2413,16,0,367,1,
223,2414,16,0,367,
1,476,1507,1,477,
1513,1,1231,2415,16,
0,367,1,479,1523,
1,480,1528,1,1485,
2416,16,0,367,1,
1737,2417,16,0,367,
1,242,2418,16,0,
367,1,478,1546,1,
1001,1551,1,1002,1556,
1,27,2419,19,597,
1,27,2420,5,91,
1,256,2421,16,0,
595,1,1261,2422,16,
0,595,1,509,2423,
16,0,595,1,2197,
2424,16,0,595,1,
1515,2425,16,0,595,
1,2021,707,1,1775,
2426,16,0,595,1,
2029,714,1,2030,720,
1,2031,725,1,2032,
730,1,2033,735,1,
277,2427,16,0,595,
1,2035,741,1,2037,
746,1,2039,751,1,
32,2428,16,0,595,
1,2041,757,1,2043,
762,1,2044,767,1,
2550,2429,16,0,595,
1,41,2430,16,0,
595,1,1297,2431,16,
0,595,1,43,2432,
16,0,595,1,1802,
774,1,1804,2433,16,
0,595,1,299,2434,
16,0,595,1,2309,
2435,16,0,595,1,
52,2436,16,0,595,
1,525,2437,16,0,
595,1,62,2438,16,
0,595,1,2074,2439,
16,0,595,1,1574,
787,1,71,2440,16,
0,595,1,76,2441,
16,0,595,1,1834,
2442,16,0,595,1,
1585,2443,16,0,595,
1,1335,2444,16,0,
595,1,79,2445,16,
0,595,1,85,2446,
16,0,595,1,89,
2447,16,0,595,1,
346,2448,16,0,595,
1,2104,801,1,2105,
2449,16,0,595,1,
2358,807,1,2360,813,
1,97,2450,16,0,
595,1,1860,820,1,
102,2451,16,0,595,
1,112,2452,16,0,
595,1,1117,2453,16,
0,595,1,1873,829,
1,1876,2454,16,0,
595,1,124,2455,16,
0,595,1,2135,836,
1,381,2456,16,0,
595,1,322,2457,16,
0,595,1,137,2458,
16,0,595,1,1901,
2459,16,0,595,1,
1153,2460,16,0,595,
1,151,2461,16,0,
595,1,1407,2462,16,
0,595,1,1659,2463,
16,0,595,1,406,
2464,16,0,595,1,
1371,2465,16,0,595,
1,166,2466,16,0,
595,1,1622,2467,16,
0,595,1,2354,853,
1,2355,858,1,1931,
863,1,1933,2468,16,
0,595,1,431,2469,
16,0,595,1,182,
2470,16,0,595,1,
1189,2471,16,0,595,
1,1443,2472,16,0,
595,1,1695,2473,16,
0,595,1,447,2474,
16,0,595,1,199,
2475,16,0,595,1,
1958,2476,16,0,595,
1,1657,878,1,459,
2477,16,0,595,1,
462,2478,16,0,595,
1,217,2479,16,0,
595,1,2226,886,1,
1225,2480,16,0,595,
1,1479,2481,16,0,
595,1,1731,2482,16,
0,595,1,1989,894,
1,1990,2483,16,0,
595,1,236,2484,16,
0,595,1,1756,2485,
16,0,595,1,28,
2486,19,627,1,28,
2487,5,60,1,328,
1274,1,223,1497,1,
1096,1284,1,118,1316,
1,883,1412,1,525,
1184,1,1001,1551,1,
130,1358,1,459,1639,
1,1114,1313,1,352,
1301,1,447,1464,1,
464,1642,1,1011,1074,
1,1013,1226,1,242,
1541,1,143,1380,1,
40,1133,1,41,1617,
1,42,1621,1,479,
1523,1,44,1149,1,
481,1648,1,373,1370,
1,47,1151,1,157,
1402,1,49,1163,1,
50,1174,1,48,1157,
1,379,1375,1,380,
1352,1,51,1169,1,
476,1507,1,371,1326,
1,478,1546,1,1048,
1236,1,375,1337,1,
172,1428,1,262,1091,
1,283,1144,1,63,
1190,1,67,1201,1,
68,1206,1,69,1211,
1,66,1196,1,461,
2488,16,0,625,1,
74,1221,1,377,1342,
1,1002,1556,1,70,
1216,1,188,1471,1,
82,1252,1,305,1179,
1,477,1513,1,827,
1347,1,93,1290,1,
480,1528,1,205,1481,
1,942,1444,1,107,
1308,1,29,2489,19,
304,1,29,2490,5,
83,1,1011,1074,1,
1012,2491,16,0,302,
1,1013,1226,1,262,
1091,1,1267,2492,16,
0,302,1,515,2493,
16,0,302,1,1521,
2494,16,0,302,1,
525,1184,1,283,1144,
1,40,1133,1,42,
2495,16,0,302,1,
44,1149,1,2556,2496,
16,0,302,1,47,
1151,1,1303,2497,16,
0,302,1,1555,2498,
16,0,302,1,50,
1174,1,48,1157,1,
49,1163,1,51,1169,
1,63,1190,1,305,
1179,1,66,1196,1,
67,1201,1,68,1206,
1,69,1211,1,70,
1216,1,73,2499,16,
0,302,1,74,1221,
1,328,1274,1,1048,
1236,1,82,2500,16,
0,302,1,1840,2501,
16,0,302,1,1591,
2502,16,0,302,1,
1341,2503,16,0,302,
1,1096,1284,1,93,
1290,1,352,1301,1,
107,2504,16,0,302,
1,1114,1313,1,118,
1316,1,1123,2505,16,
0,302,1,371,1326,
1,1628,2506,16,0,
302,1,375,1337,1,
1882,2507,16,0,302,
1,377,1342,1,379,
1375,1,380,1352,1,
883,2508,16,0,302,
1,373,1370,1,130,
1358,1,143,1380,1,
387,2509,16,0,302,
1,1159,2510,16,0,
302,1,157,1402,1,
1413,2511,16,0,302,
1,1665,2512,16,0,
302,1,412,2513,16,
0,302,1,1377,2514,
16,0,302,1,172,
1428,1,1939,2515,16,
0,302,1,437,2516,
16,0,302,1,188,
1471,1,942,1444,1,
1195,2517,16,0,302,
1,1449,2518,16,0,
302,1,1701,2519,16,
0,302,1,447,1464,
1,205,2520,16,0,
302,1,827,2521,16,
0,302,1,223,2522,
16,0,302,1,476,
1507,1,477,1513,1,
1231,2523,16,0,302,
1,479,1523,1,480,
1528,1,1485,2524,16,
0,302,1,1737,2525,
16,0,302,1,242,
2526,16,0,302,1,
478,1546,1,1001,1551,
1,1002,1556,1,30,
2527,19,272,1,30,
2528,5,83,1,1011,
1074,1,1012,2529,16,
0,270,1,1013,1226,
1,262,1091,1,1267,
2530,16,0,270,1,
515,2531,16,0,270,
1,1521,2532,16,0,
270,1,525,1184,1,
283,1144,1,40,1133,
1,42,2533,16,0,
270,1,44,1149,1,
2556,2534,16,0,270,
1,47,1151,1,1303,
2535,16,0,270,1,
1555,2536,16,0,270,
1,50,1174,1,48,
1157,1,49,1163,1,
51,1169,1,63,1190,
1,305,1179,1,66,
1196,1,67,1201,1,
68,1206,1,69,1211,
1,70,1216,1,73,
2537,16,0,270,1,
74,1221,1,328,1274,
1,1048,1236,1,82,
2538,16,0,270,1,
1840,2539,16,0,270,
1,1591,2540,16,0,
270,1,1341,2541,16,
0,270,1,1096,1284,
1,93,1290,1,352,
1301,1,107,2542,16,
0,270,1,1114,1313,
1,118,1316,1,1123,
2543,16,0,270,1,
371,1326,1,1628,2544,
16,0,270,1,375,
1337,1,1882,2545,16,
0,270,1,377,1342,
1,379,1375,1,380,
1352,1,883,2546,16,
0,270,1,373,1370,
1,130,1358,1,143,
1380,1,387,2547,16,
0,270,1,1159,2548,
16,0,270,1,157,
1402,1,1413,2549,16,
0,270,1,1665,2550,
16,0,270,1,412,
2551,16,0,270,1,
1377,2552,16,0,270,
1,172,1428,1,1939,
2553,16,0,270,1,
437,2554,16,0,270,
1,188,1471,1,942,
1444,1,1195,2555,16,
0,270,1,1449,2556,
16,0,270,1,1701,
2557,16,0,270,1,
447,1464,1,205,2558,
16,0,270,1,827,
2559,16,0,270,1,
223,2560,16,0,270,
1,476,1507,1,477,
1513,1,1231,2561,16,
0,270,1,479,1523,
1,480,1528,1,1485,
2562,16,0,270,1,
1737,2563,16,0,270,
1,242,2564,16,0,
270,1,478,1546,1,
1001,1551,1,1002,1556,
1,31,2565,19,251,
1,31,2566,5,83,
1,1011,1074,1,1012,
2567,16,0,249,1,
1013,1226,1,262,1091,
1,1267,2568,16,0,
249,1,515,2569,16,
0,249,1,1521,2570,
16,0,249,1,525,
1184,1,283,1144,1,
40,1133,1,42,2571,
16,0,249,1,44,
1149,1,2556,2572,16,
0,249,1,47,1151,
1,1303,2573,16,0,
249,1,1555,2574,16,
0,249,1,50,1174,
1,48,1157,1,49,
1163,1,51,1169,1,
63,1190,1,305,1179,
1,66,1196,1,67,
1201,1,68,1206,1,
69,1211,1,70,1216,
1,73,2575,16,0,
249,1,74,1221,1,
328,1274,1,1048,1236,
1,82,2576,16,0,
249,1,1840,2577,16,
0,249,1,1591,2578,
16,0,249,1,1341,
2579,16,0,249,1,
1096,1284,1,93,1290,
1,352,1301,1,107,
2580,16,0,249,1,
1114,1313,1,118,1316,
1,1123,2581,16,0,
249,1,371,1326,1,
1628,2582,16,0,249,
1,375,1337,1,1882,
2583,16,0,249,1,
377,1342,1,379,1375,
1,380,1352,1,883,
2584,16,0,249,1,
373,1370,1,130,1358,
1,143,2585,16,0,
249,1,387,2586,16,
0,249,1,1159,2587,
16,0,249,1,157,
2588,16,0,249,1,
1413,2589,16,0,249,
1,1665,2590,16,0,
249,1,412,2591,16,
0,249,1,1377,2592,
16,0,249,1,172,
1428,1,1939,2593,16,
0,249,1,437,2594,
16,0,249,1,188,
1471,1,942,1444,1,
1195,2595,16,0,249,
1,1449,2596,16,0,
249,1,1701,2597,16,
0,249,1,447,1464,
1,205,2598,16,0,
249,1,827,2599,16,
0,249,1,223,2600,
16,0,249,1,476,
1507,1,477,1513,1,
1231,2601,16,0,249,
1,479,1523,1,480,
1528,1,1485,2602,16,
0,249,1,1737,2603,
16,0,249,1,242,
2604,16,0,249,1,
478,1546,1,1001,1551,
1,1002,1556,1,32,
2605,19,244,1,32,
2606,5,83,1,1011,
1074,1,1012,2607,16,
0,242,1,1013,1226,
1,262,1091,1,1267,
2608,16,0,242,1,
515,2609,16,0,242,
1,1521,2610,16,0,
242,1,525,1184,1,
283,1144,1,40,1133,
1,42,2611,16,0,
242,1,44,1149,1,
2556,2612,16,0,242,
1,47,1151,1,1303,
2613,16,0,242,1,
1555,2614,16,0,242,
1,50,1174,1,48,
1157,1,49,1163,1,
51,1169,1,63,1190,
1,305,1179,1,66,
1196,1,67,1201,1,
68,1206,1,69,1211,
1,70,1216,1,73,
2615,16,0,242,1,
74,1221,1,328,1274,
1,1048,1236,1,82,
2616,16,0,242,1,
1840,2617,16,0,242,
1,1591,2618,16,0,
242,1,1341,2619,16,
0,242,1,1096,1284,
1,93,1290,1,352,
1301,1,107,2620,16,
0,242,1,1114,1313,
1,118,1316,1,1123,
2621,16,0,242,1,
371,1326,1,1628,2622,
16,0,242,1,375,
1337,1,1882,2623,16,
0,242,1,377,1342,
1,379,1375,1,380,
1352,1,883,2624,16,
0,242,1,373,1370,
1,130,1358,1,143,
2625,16,0,242,1,
387,2626,16,0,242,
1,1159,2627,16,0,
242,1,157,2628,16,
0,242,1,1413,2629,
16,0,242,1,1665,
2630,16,0,242,1,
412,2631,16,0,242,
1,1377,2632,16,0,
242,1,172,1428,1,
1939,2633,16,0,242,
1,437,2634,16,0,
242,1,188,1471,1,
942,1444,1,1195,2635,
16,0,242,1,1449,
2636,16,0,242,1,
1701,2637,16,0,242,
1,447,1464,1,205,
2638,16,0,242,1,
827,2639,16,0,242,
1,223,2640,16,0,
242,1,476,1507,1,
477,1513,1,1231,2641,
16,0,242,1,479,
1523,1,480,1528,1,
1485,2642,16,0,242,
1,1737,2643,16,0,
242,1,242,2644,16,
0,242,1,478,1546,
1,1001,1551,1,1002,
1556,1,33,2645,19,
416,1,33,2646,5,
83,1,1011,1074,1,
1012,2647,16,0,414,
1,1013,1226,1,262,
1091,1,1267,2648,16,
0,414,1,515,2649,
16,0,414,1,1521,
2650,16,0,414,1,
525,1184,1,283,1144,
1,40,1133,1,42,
2651,16,0,414,1,
44,1149,1,2556,2652,
16,0,414,1,47,
1151,1,1303,2653,16,
0,414,1,1555,2654,
16,0,414,1,50,
1174,1,48,1157,1,
49,1163,1,51,1169,
1,63,1190,1,305,
1179,1,66,1196,1,
67,1201,1,68,1206,
1,69,1211,1,70,
1216,1,73,2655,16,
0,414,1,74,1221,
1,328,1274,1,1048,
1236,1,82,2656,16,
0,414,1,1840,2657,
16,0,414,1,1591,
2658,16,0,414,1,
1341,2659,16,0,414,
1,1096,1284,1,93,
1290,1,352,1301,1,
107,2660,16,0,414,
1,1114,1313,1,118,
1316,1,1123,2661,16,
0,414,1,371,1326,
1,1628,2662,16,0,
414,1,375,1337,1,
1882,2663,16,0,414,
1,377,1342,1,379,
1375,1,380,1352,1,
883,2664,16,0,414,
1,373,1370,1,130,
1358,1,143,1380,1,
387,2665,16,0,414,
1,1159,2666,16,0,
414,1,157,1402,1,
1413,2667,16,0,414,
1,1665,2668,16,0,
414,1,412,2669,16,
0,414,1,1377,2670,
16,0,414,1,172,
1428,1,1939,2671,16,
0,414,1,437,2672,
16,0,414,1,188,
1471,1,942,1444,1,
1195,2673,16,0,414,
1,1449,2674,16,0,
414,1,1701,2675,16,
0,414,1,447,1464,
1,205,2676,16,0,
414,1,827,2677,16,
0,414,1,223,2678,
16,0,414,1,476,
1507,1,477,1513,1,
1231,2679,16,0,414,
1,479,1523,1,480,
1528,1,1485,2680,16,
0,414,1,1737,2681,
16,0,414,1,242,
1541,1,478,1546,1,
1001,1551,1,1002,1556,
1,34,2682,19,385,
1,34,2683,5,83,
1,1011,1074,1,1012,
2684,16,0,383,1,
1013,1226,1,262,1091,
1,1267,2685,16,0,
383,1,515,2686,16,
0,383,1,1521,2687,
16,0,383,1,525,
1184,1,283,1144,1,
40,1133,1,42,2688,
16,0,383,1,44,
1149,1,2556,2689,16,
0,383,1,47,1151,
1,1303,2690,16,0,
383,1,1555,2691,16,
0,383,1,50,1174,
1,48,1157,1,49,
1163,1,51,1169,1,
63,1190,1,305,1179,
1,66,1196,1,67,
1201,1,68,1206,1,
69,1211,1,70,1216,
1,73,2692,16,0,
383,1,74,1221,1,
328,1274,1,1048,1236,
1,82,2693,16,0,
383,1,1840,2694,16,
0,383,1,1591,2695,
16,0,383,1,1341,
2696,16,0,383,1,
1096,1284,1,93,1290,
1,352,1301,1,107,
2697,16,0,383,1,
1114,1313,1,118,1316,
1,1123,2698,16,0,
383,1,371,1326,1,
1628,2699,16,0,383,
1,375,1337,1,1882,
2700,16,0,383,1,
377,1342,1,379,1375,
1,380,1352,1,883,
2701,16,0,383,1,
373,1370,1,130,1358,
1,143,1380,1,387,
2702,16,0,383,1,
1159,2703,16,0,383,
1,157,1402,1,1413,
2704,16,0,383,1,
1665,2705,16,0,383,
1,412,2706,16,0,
383,1,1377,2707,16,
0,383,1,172,1428,
1,1939,2708,16,0,
383,1,437,2709,16,
0,383,1,188,1471,
1,942,1444,1,1195,
2710,16,0,383,1,
1449,2711,16,0,383,
1,1701,2712,16,0,
383,1,447,1464,1,
205,1481,1,827,2713,
16,0,383,1,223,
1497,1,476,1507,1,
477,1513,1,1231,2714,
16,0,383,1,479,
1523,1,480,1528,1,
1485,2715,16,0,383,
1,1737,2716,16,0,
383,1,242,1541,1,
478,1546,1,1001,1551,
1,1002,1556,1,35,
2717,19,372,1,35,
2718,5,83,1,1011,
1074,1,1012,2719,16,
0,370,1,1013,1226,
1,262,1091,1,1267,
2720,16,0,370,1,
515,2721,16,0,370,
1,1521,2722,16,0,
370,1,525,1184,1,
283,1144,1,40,1133,
1,42,2723,16,0,
370,1,44,1149,1,
2556,2724,16,0,370,
1,47,1151,1,1303,
2725,16,0,370,1,
1555,2726,16,0,370,
1,50,1174,1,48,
1157,1,49,1163,1,
51,1169,1,63,1190,
1,305,1179,1,66,
1196,1,67,1201,1,
68,1206,1,69,1211,
1,70,1216,1,73,
2727,16,0,370,1,
74,1221,1,328,1274,
1,1048,1236,1,82,
2728,16,0,370,1,
1840,2729,16,0,370,
1,1591,2730,16,0,
370,1,1341,2731,16,
0,370,1,1096,1284,
1,93,1290,1,352,
1301,1,107,2732,16,
0,370,1,1114,1313,
1,118,1316,1,1123,
2733,16,0,370,1,
371,1326,1,1628,2734,
16,0,370,1,375,
1337,1,1882,2735,16,
0,370,1,377,1342,
1,379,1375,1,380,
1352,1,883,2736,16,
0,370,1,373,1370,
1,130,1358,1,143,
1380,1,387,2737,16,
0,370,1,1159,2738,
16,0,370,1,157,
1402,1,1413,2739,16,
0,370,1,1665,2740,
16,0,370,1,412,
2741,16,0,370,1,
1377,2742,16,0,370,
1,172,1428,1,1939,
2743,16,0,370,1,
437,2744,16,0,370,
1,188,1471,1,942,
1444,1,1195,2745,16,
0,370,1,1449,2746,
16,0,370,1,1701,
2747,16,0,370,1,
447,1464,1,205,1481,
1,827,2748,16,0,
370,1,223,2749,16,
0,370,1,476,1507,
1,477,1513,1,1231,
2750,16,0,370,1,
479,1523,1,480,1528,
1,1485,2751,16,0,
370,1,1737,2752,16,
0,370,1,242,1541,
1,478,1546,1,1001,
1551,1,1002,1556,1,
36,2753,19,215,1,
36,2754,5,90,1,
256,2755,16,0,213,
1,1261,2756,16,0,
213,1,509,2757,16,
0,213,1,2197,2758,
16,0,213,1,1515,
2759,16,0,213,1,
2021,707,1,1775,2760,
16,0,213,1,2029,
714,1,2030,720,1,
2031,725,1,2032,730,
1,2033,735,1,277,
2761,16,0,213,1,
2035,741,1,2037,746,
1,2039,751,1,32,
2762,16,0,213,1,
2041,757,1,2043,762,
1,2044,767,1,2550,
2763,16,0,213,1,
41,2764,16,0,213,
1,1297,2765,16,0,
213,1,43,2766,16,
0,213,1,1802,774,
1,1804,2767,16,0,
213,1,299,2768,16,
0,213,1,2309,2769,
16,0,213,1,52,
2770,16,0,213,1,
525,2771,16,0,213,
1,2074,2772,16,0,
213,1,1574,787,1,
71,2773,16,0,213,
1,76,2774,16,0,
213,1,1834,2775,16,
0,213,1,79,2776,
16,0,213,1,1335,
2777,16,0,213,1,
322,2778,16,0,213,
1,85,2779,16,0,
213,1,89,2780,16,
0,213,1,346,2781,
16,0,213,1,2104,
801,1,2105,2782,16,
0,213,1,2358,807,
1,2360,813,1,97,
2783,16,0,213,1,
1860,820,1,102,2784,
16,0,213,1,112,
2785,16,0,213,1,
1117,2786,16,0,213,
1,1873,829,1,1876,
2787,16,0,213,1,
124,2788,16,0,213,
1,2135,836,1,381,
2789,16,0,213,1,
137,2790,16,0,213,
1,1901,2791,16,0,
213,1,1153,2792,16,
0,213,1,151,2793,
16,0,213,1,1407,
2794,16,0,213,1,
1659,2795,16,0,213,
1,406,2796,16,0,
213,1,1371,2797,16,
0,213,1,166,2798,
16,0,213,1,1622,
2799,16,0,213,1,
2354,853,1,2355,858,
1,1931,863,1,1933,
2800,16,0,213,1,
431,2801,16,0,213,
1,1585,2802,16,0,
213,1,182,2803,16,
0,213,1,1189,2804,
16,0,213,1,1443,
2805,16,0,213,1,
1695,2806,16,0,213,
1,447,2807,16,0,
213,1,199,2808,16,
0,213,1,1958,2809,
16,0,213,1,1657,
878,1,459,2810,16,
0,213,1,462,2811,
16,0,213,1,217,
2812,16,0,213,1,
2226,886,1,1225,2813,
16,0,213,1,1479,
2814,16,0,213,1,
1731,2815,16,0,213,
1,1989,894,1,1990,
2816,16,0,213,1,
236,2817,16,0,213,
1,1756,2818,16,0,
213,1,37,2819,19,
234,1,37,2820,5,
90,1,256,2821,16,
0,232,1,1261,2822,
16,0,232,1,509,
2823,16,0,232,1,
2197,2824,16,0,232,
1,1515,2825,16,0,
232,1,2021,707,1,
1775,2826,16,0,232,
1,2029,714,1,2030,
720,1,2031,725,1,
2032,730,1,2033,735,
1,277,2827,16,0,
232,1,2035,741,1,
2037,746,1,2039,751,
1,32,2828,16,0,
232,1,2041,757,1,
2043,762,1,2044,767,
1,2550,2829,16,0,
232,1,41,2830,16,
0,232,1,1297,2831,
16,0,232,1,43,
2832,16,0,232,1,
1802,774,1,1804,2833,
16,0,232,1,299,
2834,16,0,232,1,
2309,2835,16,0,232,
1,52,2836,16,0,
232,1,525,2837,16,
0,232,1,2074,2838,
16,0,232,1,1574,
787,1,71,2839,16,
0,232,1,76,2840,
16,0,232,1,1834,
2841,16,0,232,1,
79,2842,16,0,232,
1,1335,2843,16,0,
232,1,322,2844,16,
0,232,1,85,2845,
16,0,232,1,89,
2846,16,0,232,1,
346,2847,16,0,232,
1,2104,801,1,2105,
2848,16,0,232,1,
2358,807,1,2360,813,
1,97,2849,16,0,
232,1,1860,820,1,
102,2850,16,0,232,
1,112,2851,16,0,
232,1,1117,2852,16,
0,232,1,1873,829,
1,1876,2853,16,0,
232,1,124,2854,16,
0,232,1,2135,836,
1,381,2855,16,0,
232,1,137,2856,16,
0,232,1,1901,2857,
16,0,232,1,1153,
2858,16,0,232,1,
151,2859,16,0,232,
1,1407,2860,16,0,
232,1,1659,2861,16,
0,232,1,406,2862,
16,0,232,1,1371,
2863,16,0,232,1,
166,2864,16,0,232,
1,1622,2865,16,0,
232,1,2354,853,1,
2355,858,1,1931,863,
1,1933,2866,16,0,
232,1,431,2867,16,
0,232,1,1585,2868,
16,0,232,1,182,
2869,16,0,232,1,
1189,2870,16,0,232,
1,1443,2871,16,0,
232,1,1695,2872,16,
0,232,1,447,2873,
16,0,232,1,199,
2874,16,0,232,1,
1958,2875,16,0,232,
1,1657,878,1,459,
2876,16,0,232,1,
462,2877,16,0,232,
1,217,2878,16,0,
232,1,2226,886,1,
1225,2879,16,0,232,
1,1479,2880,16,0,
232,1,1731,2881,16,
0,232,1,1989,894,
1,1990,2882,16,0,
232,1,236,2883,16,
0,232,1,1756,2884,
16,0,232,1,38,
2885,19,231,1,38,
2886,5,83,1,1011,
1074,1,1012,2887,16,
0,229,1,1013,1226,
1,262,1091,1,1267,
2888,16,0,229,1,
515,2889,16,0,229,
1,1521,2890,16,0,
229,1,525,1184,1,
283,1144,1,40,1133,
1,42,2891,16,0,
229,1,44,1149,1,
2556,2892,16,0,229,
1,47,1151,1,1303,
2893,16,0,229,1,
1555,2894,16,0,229,
1,50,1174,1,48,
1157,1,49,1163,1,
51,1169,1,63,1190,
1,305,1179,1,66,
1196,1,67,1201,1,
68,1206,1,69,1211,
1,70,1216,1,73,
2895,16,0,229,1,
74,1221,1,328,1274,
1,1048,1236,1,82,
2896,16,0,229,1,
1840,2897,16,0,229,
1,1591,2898,16,0,
229,1,1341,2899,16,
0,229,1,1096,1284,
1,93,1290,1,352,
1301,1,107,2900,16,
0,229,1,1114,1313,
1,118,1316,1,1123,
2901,16,0,229,1,
371,1326,1,1628,2902,
16,0,229,1,375,
1337,1,1882,2903,16,
0,229,1,377,1342,
1,379,1375,1,380,
1352,1,883,1412,1,
373,1370,1,130,1358,
1,143,1380,1,387,
2904,16,0,229,1,
1159,2905,16,0,229,
1,157,1402,1,1413,
2906,16,0,229,1,
1665,2907,16,0,229,
1,412,2908,16,0,
229,1,1377,2909,16,
0,229,1,172,1428,
1,1939,2910,16,0,
229,1,437,2911,16,
0,229,1,188,1471,
1,942,1444,1,1195,
2912,16,0,229,1,
1449,2913,16,0,229,
1,1701,2914,16,0,
229,1,447,1464,1,
205,1481,1,827,1347,
1,223,1497,1,476,
1507,1,477,1513,1,
1231,2915,16,0,229,
1,479,1523,1,480,
1528,1,1485,2916,16,
0,229,1,1737,2917,
16,0,229,1,242,
1541,1,478,1546,1,
1001,1551,1,1002,1556,
1,39,2918,19,221,
1,39,2919,5,83,
1,1011,1074,1,1012,
2920,16,0,219,1,
1013,1226,1,262,1091,
1,1267,2921,16,0,
219,1,515,2922,16,
0,219,1,1521,2923,
16,0,219,1,525,
1184,1,283,1144,1,
40,1133,1,42,2924,
16,0,219,1,44,
1149,1,2556,2925,16,
0,219,1,47,1151,
1,1303,2926,16,0,
219,1,1555,2927,16,
0,219,1,50,1174,
1,48,1157,1,49,
1163,1,51,1169,1,
63,1190,1,305,1179,
1,66,1196,1,67,
1201,1,68,1206,1,
69,1211,1,70,1216,
1,73,2928,16,0,
219,1,74,1221,1,
328,1274,1,1048,1236,
1,82,2929,16,0,
219,1,1840,2930,16,
0,219,1,1591,2931,
16,0,219,1,1341,
2932,16,0,219,1,
1096,1284,1,93,1290,
1,352,1301,1,107,
2933,16,0,219,1,
1114,1313,1,118,1316,
1,1123,2934,16,0,
219,1,371,1326,1,
1628,2935,16,0,219,
1,375,1337,1,1882,
2936,16,0,219,1,
377,1342,1,379,1375,
1,380,1352,1,883,
1412,1,373,1370,1,
130,1358,1,143,1380,
1,387,2937,16,0,
219,1,1159,2938,16,
0,219,1,157,1402,
1,1413,2939,16,0,
219,1,1665,2940,16,
0,219,1,412,2941,
16,0,219,1,1377,
2942,16,0,219,1,
172,1428,1,1939,2943,
16,0,219,1,437,
2944,16,0,219,1,
188,1471,1,942,1444,
1,1195,2945,16,0,
219,1,1449,2946,16,
0,219,1,1701,2947,
16,0,219,1,447,
1464,1,205,1481,1,
827,1347,1,223,1497,
1,476,1507,1,477,
1513,1,1231,2948,16,
0,219,1,479,1523,
1,480,1528,1,1485,
2949,16,0,219,1,
1737,2950,16,0,219,
1,242,1541,1,478,
1546,1,1001,1551,1,
1002,1556,1,40,2951,
19,209,1,40,2952,
5,83,1,1011,1074,
1,1012,2953,16,0,
207,1,1013,1226,1,
262,1091,1,1267,2954,
16,0,207,1,515,
2955,16,0,207,1,
1521,2956,16,0,207,
1,525,1184,1,283,
1144,1,40,1133,1,
42,2957,16,0,207,
1,44,1149,1,2556,
2958,16,0,207,1,
47,1151,1,1303,2959,
16,0,207,1,1555,
2960,16,0,207,1,
50,1174,1,48,1157,
1,49,1163,1,51,
1169,1,63,1190,1,
305,1179,1,66,1196,
1,67,1201,1,68,
1206,1,69,1211,1,
70,1216,1,73,2961,
16,0,207,1,74,
1221,1,328,1274,1,
1048,1236,1,82,2962,
16,0,207,1,1840,
2963,16,0,207,1,
1591,2964,16,0,207,
1,1341,2965,16,0,
207,1,1096,1284,1,
93,1290,1,352,1301,
1,107,2966,16,0,
207,1,1114,1313,1,
118,2967,16,0,207,
1,1123,2968,16,0,
207,1,371,1326,1,
1628,2969,16,0,207,
1,375,1337,1,1882,
2970,16,0,207,1,
377,1342,1,379,1375,
1,380,1352,1,883,
2971,16,0,207,1,
373,1370,1,130,2972,
16,0,207,1,143,
2973,16,0,207,1,
387,2974,16,0,207,
1,1159,2975,16,0,
207,1,157,2976,16,
0,207,1,1413,2977,
16,0,207,1,1665,
2978,16,0,207,1,
412,2979,16,0,207,
1,1377,2980,16,0,
207,1,172,2981,16,
0,207,1,1939,2982,
16,0,207,1,437,
2983,16,0,207,1,
188,2984,16,0,207,
1,942,1444,1,1195,
2985,16,0,207,1,
1449,2986,16,0,207,
1,1701,2987,16,0,
207,1,447,1464,1,
205,2988,16,0,207,
1,827,2989,16,0,
207,1,223,2990,16,
0,207,1,476,1507,
1,477,1513,1,1231,
2991,16,0,207,1,
479,1523,1,480,1528,
1,1485,2992,16,0,
207,1,1737,2993,16,
0,207,1,242,2994,
16,0,207,1,478,
1546,1,1001,1551,1,
1002,1556,1,41,2995,
19,172,1,41,2996,
5,83,1,1011,1074,
1,1012,2997,16,0,
170,1,1013,1226,1,
262,1091,1,1267,2998,
16,0,170,1,515,
2999,16,0,170,1,
1521,3000,16,0,170,
1,525,1184,1,283,
1144,1,40,1133,1,
42,3001,16,0,170,
1,44,1149,1,2556,
3002,16,0,170,1,
47,1151,1,1303,3003,
16,0,170,1,1555,
3004,16,0,170,1,
50,1174,1,48,1157,
1,49,1163,1,51,
1169,1,63,1190,1,
305,1179,1,66,1196,
1,67,1201,1,68,
1206,1,69,1211,1,
70,1216,1,73,3005,
16,0,170,1,74,
1221,1,328,1274,1,
1048,1236,1,82,3006,
16,0,170,1,1840,
3007,16,0,170,1,
1591,3008,16,0,170,
1,1341,3009,16,0,
170,1,1096,1284,1,
93,1290,1,352,1301,
1,107,3010,16,0,
170,1,1114,1313,1,
118,3011,16,0,170,
1,1123,3012,16,0,
170,1,371,1326,1,
1628,3013,16,0,170,
1,375,1337,1,1882,
3014,16,0,170,1,
377,1342,1,379,1375,
1,380,1352,1,883,
3015,16,0,170,1,
373,1370,1,130,3016,
16,0,170,1,143,
3017,16,0,170,1,
387,3018,16,0,170,
1,1159,3019,16,0,
170,1,157,3020,16,
0,170,1,1413,3021,
16,0,170,1,1665,
3022,16,0,170,1,
412,3023,16,0,170,
1,1377,3024,16,0,
170,1,172,3025,16,
0,170,1,1939,3026,
16,0,170,1,437,
3027,16,0,170,1,
188,3028,16,0,170,
1,942,1444,1,1195,
3029,16,0,170,1,
1449,3030,16,0,170,
1,1701,3031,16,0,
170,1,447,1464,1,
205,3032,16,0,170,
1,827,3033,16,0,
170,1,223,3034,16,
0,170,1,476,1507,
1,477,1513,1,1231,
3035,16,0,170,1,
479,1523,1,480,1528,
1,1485,3036,16,0,
170,1,1737,3037,16,
0,170,1,242,3038,
16,0,170,1,478,
1546,1,1001,1551,1,
1002,1556,1,42,3039,
19,441,1,42,3040,
5,36,1,2074,3041,
16,0,439,1,1860,
820,1,2197,3042,16,
0,439,1,2309,3043,
16,0,439,1,1657,
878,1,2031,725,1,
1989,894,1,1990,3044,
16,0,439,1,1775,
3045,16,0,439,1,
32,3046,16,0,439,
1,2104,801,1,2105,
3047,16,0,439,1,
2226,886,1,1901,3048,
16,0,439,1,1802,
774,1,2021,707,1,
1804,3049,16,0,439,
1,2135,836,1,2354,
853,1,2355,858,1,
2029,714,1,2030,720,
1,2358,807,1,2032,
730,1,2360,813,1,
2035,741,1,2037,746,
1,2039,751,1,1931,
863,1,2041,757,1,
1873,829,1,2043,762,
1,2044,767,1,2033,
735,1,1574,787,1,
1958,3050,16,0,439,
1,43,3051,19,480,
1,43,3052,5,24,
1,2035,741,1,2037,
746,1,1657,878,1,
2039,751,1,2041,757,
1,1931,863,1,2043,
762,1,2044,767,1,
1860,820,1,1574,787,
1,2021,707,1,2104,
3053,16,0,579,1,
2135,836,1,1873,829,
1,2355,858,1,1802,
774,1,2226,886,1,
1989,3054,16,0,478,
1,2360,813,1,2029,
714,1,2030,720,1,
2031,725,1,2032,730,
1,2033,735,1,44,
3055,19,264,1,44,
3056,5,36,1,2074,
3057,16,0,262,1,
1860,820,1,2197,3058,
16,0,262,1,2309,
3059,16,0,262,1,
1657,878,1,2031,725,
1,1989,894,1,1990,
3060,16,0,262,1,
1775,3061,16,0,262,
1,32,3062,16,0,
262,1,2104,801,1,
2105,3063,16,0,262,
1,2226,886,1,1901,
3064,16,0,262,1,
1802,774,1,2021,707,
1,1804,3065,16,0,
262,1,2135,836,1,
2354,853,1,2355,858,
1,2029,714,1,2030,
720,1,2358,807,1,
2032,730,1,2360,813,
1,2035,741,1,2037,
746,1,2039,751,1,
1931,863,1,2041,757,
1,1873,829,1,2043,
762,1,2044,767,1,
2033,735,1,1574,787,
1,1958,3066,16,0,
262,1,45,3067,19,
329,1,45,3068,5,
37,1,2074,3069,16,
0,376,1,1860,820,
1,2197,3070,16,0,
376,1,2309,3071,16,
0,376,1,1657,878,
1,2031,725,1,1989,
894,1,1990,3072,16,
0,376,1,1775,3073,
16,0,376,1,32,
3074,16,0,376,1,
2104,801,1,2105,3075,
16,0,376,1,2226,
886,1,1901,3076,16,
0,376,1,1802,774,
1,2021,707,1,1804,
3077,16,0,376,1,
2135,836,1,2354,853,
1,2355,858,1,2029,
714,1,2030,720,1,
2358,807,1,2032,730,
1,2360,813,1,2035,
741,1,2037,746,1,
2039,751,1,1931,863,
1,2041,757,1,1873,
829,1,2043,762,1,
2044,767,1,1832,3078,
16,0,327,1,2033,
735,1,1574,787,1,
1958,3079,16,0,376,
1,46,3080,19,658,
1,46,3081,5,36,
1,2074,3082,16,0,
656,1,1860,820,1,
2197,3083,16,0,656,
1,2309,3084,16,0,
656,1,1657,878,1,
2031,725,1,1989,894,
1,1990,3085,16,0,
656,1,1775,3086,16,
0,656,1,32,3087,
16,0,656,1,2104,
801,1,2105,3088,16,
0,656,1,2226,886,
1,1901,3089,16,0,
656,1,1802,774,1,
2021,707,1,1804,3090,
16,0,656,1,2135,
836,1,2354,853,1,
2355,858,1,2029,714,
1,2030,720,1,2358,
807,1,2032,730,1,
2360,813,1,2035,741,
1,2037,746,1,2039,
751,1,1931,863,1,
2041,757,1,1873,829,
1,2043,762,1,2044,
767,1,2033,735,1,
1574,787,1,1958,3091,
16,0,656,1,47,
3092,19,401,1,47,
3093,5,19,1,0,
3094,16,0,399,1,
2531,667,1,2587,3095,
16,0,399,1,2022,
3096,16,0,571,1,
2526,684,1,2528,3097,
16,0,399,1,2605,
3098,17,3099,15,3100,
4,36,37,0,71,
0,108,0,111,0,
98,0,97,0,108,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,115,0,1,-1,
1,5,3101,20,3102,
4,38,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,95,0,52,0,
1,145,1,3,1,
3,1,2,3103,22,
1,6,1,2452,695,
1,2607,3104,17,3105,
15,3100,1,-1,1,
5,3106,20,3107,4,
38,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
95,0,51,0,1,
144,1,3,1,2,
1,1,3108,22,1,
5,1,2608,3109,17,
3110,15,3100,1,-1,
1,5,3111,20,3112,
4,38,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,95,0,49,0,
1,142,1,3,1,
2,1,1,3113,22,
1,3,1,2598,3114,
16,0,399,1,2575,
3115,17,3116,15,3117,
4,52,37,0,71,
0,108,0,111,0,
98,0,97,0,108,
0,86,0,97,0,
114,0,105,0,97,
0,98,0,108,0,
101,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
-1,1,5,3118,20,
3119,4,54,71,0,
108,0,111,0,98,
0,97,0,108,0,
86,0,97,0,114,
0,105,0,97,0,
98,0,108,0,101,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,95,0,
50,0,1,147,1,
3,1,5,1,4,
3120,22,1,8,1,
2355,858,1,2532,673,
1,2606,3121,17,3122,
15,3100,1,-1,1,
5,3123,20,3124,4,
38,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
95,0,50,0,1,
143,1,3,1,3,
1,2,3125,22,1,
4,1,2360,813,1,
2547,3126,17,3127,15,
3128,4,50,37,0,
71,0,108,0,111,
0,98,0,97,0,
108,0,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,1,-1,
1,5,3129,20,3130,
4,52,71,0,108,
0,111,0,98,0,
97,0,108,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
148,1,3,1,6,
1,5,3131,22,1,
9,1,2586,3132,17,
3133,15,3117,1,-1,
1,5,3134,20,3135,
4,54,71,0,108,
0,111,0,98,0,
97,0,108,0,86,
0,97,0,114,0,
105,0,97,0,98,
0,108,0,101,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,95,0,49,
0,1,146,1,3,
1,3,1,2,3136,
22,1,7,1,2362,
3137,17,3138,15,3128,
1,-1,1,5,3139,
20,3140,4,52,71,
0,108,0,111,0,
98,0,97,0,108,
0,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,95,0,50,
0,1,149,1,3,
1,7,1,6,3141,
22,1,10,1,48,
3142,19,269,1,48,
3143,5,52,1,0,
3144,16,0,267,1,
2074,3145,16,0,499,
1,1860,820,1,2197,
3146,16,0,499,1,
2526,684,1,2309,3147,
16,0,499,1,2528,
3148,16,0,267,1,
1657,878,1,2030,720,
1,2532,673,1,1989,
894,1,1990,3149,16,
0,499,1,2035,741,
1,1775,3150,16,0,
499,1,32,3151,16,
0,499,1,2104,801,
1,2105,3152,16,0,
499,1,2547,3126,1,
2226,886,1,2606,3121,
1,1901,3153,16,0,
499,1,2531,667,1,
2586,3132,1,2587,3154,
16,0,267,1,2452,
695,1,1802,774,1,
2021,707,1,1804,3155,
16,0,499,1,2135,
836,1,2354,853,1,
2355,858,1,2029,714,
1,2575,3115,1,2358,
807,1,2032,730,1,
2360,813,1,2362,3137,
1,2037,746,1,2039,
751,1,1931,863,1,
2041,757,1,1873,829,
1,2043,762,1,2044,
767,1,2031,725,1,
2598,3156,16,0,267,
1,2033,735,1,2605,
3098,1,1574,787,1,
2607,3104,1,2608,3109,
1,1958,3157,16,0,
499,1,49,3158,19,
504,1,49,3159,5,
36,1,2074,3160,16,
0,502,1,1860,820,
1,2197,3161,16,0,
502,1,2309,3162,16,
0,502,1,1657,878,
1,2031,725,1,1989,
894,1,1990,3163,16,
0,502,1,1775,3164,
16,0,502,1,32,
3165,16,0,502,1,
2104,801,1,2105,3166,
16,0,502,1,2226,
886,1,1901,3167,16,
0,502,1,1802,774,
1,2021,707,1,1804,
3168,16,0,502,1,
2135,836,1,2354,853,
1,2355,858,1,2029,
714,1,2030,720,1,
2358,807,1,2032,730,
1,2360,813,1,2035,
741,1,2037,746,1,
2039,751,1,1931,863,
1,2041,757,1,1873,
829,1,2043,762,1,
2044,767,1,2033,735,
1,1574,787,1,1958,
3169,16,0,502,1,
50,3170,19,612,1,
50,3171,5,36,1,
2074,3172,16,0,610,
1,1860,820,1,2197,
3173,16,0,610,1,
2309,3174,16,0,610,
1,1657,878,1,2031,
725,1,1989,894,1,
1990,3175,16,0,610,
1,1775,3176,16,0,
610,1,32,3177,16,
0,610,1,2104,801,
1,2105,3178,16,0,
610,1,2226,886,1,
1901,3179,16,0,610,
1,1802,774,1,2021,
707,1,1804,3180,16,
0,610,1,2135,836,
1,2354,853,1,2355,
858,1,2029,714,1,
2030,720,1,2358,807,
1,2032,730,1,2360,
813,1,2035,741,1,
2037,746,1,2039,751,
1,1931,863,1,2041,
757,1,1873,829,1,
2043,762,1,2044,767,
1,2033,735,1,1574,
787,1,1958,3181,16,
0,610,1,51,3182,
19,127,1,51,3183,
5,51,1,0,3184,
16,0,125,1,2401,
3185,16,0,125,1,
1860,820,1,10,3186,
16,0,125,1,2197,
3187,16,0,125,1,
2309,3188,16,0,125,
1,21,3189,16,0,
125,1,1657,878,1,
2030,720,1,2031,725,
1,2074,3190,16,0,
125,1,1989,894,1,
1990,3191,16,0,125,
1,2035,741,1,1775,
3192,16,0,125,1,
32,3193,16,0,125,
1,2104,801,1,2105,
3194,16,0,125,1,
2547,3126,1,2226,886,
1,2606,3121,1,1901,
3195,16,0,125,1,
52,3196,16,0,125,
1,2587,3197,16,0,
125,1,1802,774,1,
2021,707,1,1804,3198,
16,0,125,1,2135,
836,1,2354,853,1,
2355,858,1,2029,714,
1,2575,3115,1,2358,
807,1,2032,730,1,
2360,813,1,2362,3137,
1,2037,746,1,2039,
751,1,1931,863,1,
2041,757,1,1873,829,
1,2043,762,1,2044,
767,1,2033,735,1,
2605,3098,1,1574,787,
1,2607,3104,1,2608,
3109,1,1958,3199,16,
0,125,1,2586,3132,
1,2534,3200,16,0,
125,1,52,3201,19,
124,1,52,3202,5,
51,1,0,3203,16,
0,122,1,2401,3204,
16,0,122,1,1860,
820,1,10,3205,16,
0,122,1,2197,3206,
16,0,122,1,2309,
3207,16,0,122,1,
21,3208,16,0,122,
1,1657,878,1,2030,
720,1,2031,725,1,
2074,3209,16,0,122,
1,1989,894,1,1990,
3210,16,0,122,1,
2035,741,1,1775,3211,
16,0,122,1,32,
3212,16,0,122,1,
2104,801,1,2105,3213,
16,0,122,1,2547,
3126,1,2226,886,1,
2606,3121,1,1901,3214,
16,0,122,1,52,
3215,16,0,122,1,
2587,3216,16,0,122,
1,1802,774,1,2021,
707,1,1804,3217,16,
0,122,1,2135,836,
1,2354,853,1,2355,
858,1,2029,714,1,
2575,3115,1,2358,807,
1,2032,730,1,2360,
813,1,2362,3137,1,
2037,746,1,2039,751,
1,1931,863,1,2041,
757,1,1873,829,1,
2043,762,1,2044,767,
1,2033,735,1,2605,
3098,1,1574,787,1,
2607,3104,1,2608,3109,
1,1958,3218,16,0,
122,1,2586,3132,1,
2534,3219,16,0,122,
1,53,3220,19,121,
1,53,3221,5,51,
1,0,3222,16,0,
119,1,2401,3223,16,
0,119,1,1860,820,
1,10,3224,16,0,
119,1,2197,3225,16,
0,119,1,2309,3226,
16,0,119,1,21,
3227,16,0,119,1,
1657,878,1,2030,720,
1,2031,725,1,2074,
3228,16,0,119,1,
1989,894,1,1990,3229,
16,0,119,1,2035,
741,1,1775,3230,16,
0,119,1,32,3231,
16,0,119,1,2104,
801,1,2105,3232,16,
0,119,1,2547,3126,
1,2226,886,1,2606,
3121,1,1901,3233,16,
0,119,1,52,3234,
16,0,119,1,2587,
3235,16,0,119,1,
1802,774,1,2021,707,
1,1804,3236,16,0,
119,1,2135,836,1,
2354,853,1,2355,858,
1,2029,714,1,2575,
3115,1,2358,807,1,
2032,730,1,2360,813,
1,2362,3137,1,2037,
746,1,2039,751,1,
1931,863,1,2041,757,
1,1873,829,1,2043,
762,1,2044,767,1,
2033,735,1,2605,3098,
1,1574,787,1,2607,
3104,1,2608,3109,1,
1958,3237,16,0,119,
1,2586,3132,1,2534,
3238,16,0,119,1,
54,3239,19,118,1,
54,3240,5,51,1,
0,3241,16,0,116,
1,2401,3242,16,0,
116,1,1860,820,1,
10,3243,16,0,116,
1,2197,3244,16,0,
116,1,2309,3245,16,
0,116,1,21,3246,
16,0,116,1,1657,
878,1,2030,720,1,
2031,725,1,2074,3247,
16,0,116,1,1989,
894,1,1990,3248,16,
0,116,1,2035,741,
1,1775,3249,16,0,
116,1,32,3250,16,
0,116,1,2104,801,
1,2105,3251,16,0,
116,1,2547,3126,1,
2226,886,1,2606,3121,
1,1901,3252,16,0,
116,1,52,3253,16,
0,116,1,2587,3254,
16,0,116,1,1802,
774,1,2021,707,1,
1804,3255,16,0,116,
1,2135,836,1,2354,
853,1,2355,858,1,
2029,714,1,2575,3115,
1,2358,807,1,2032,
730,1,2360,813,1,
2362,3137,1,2037,746,
1,2039,751,1,1931,
863,1,2041,757,1,
1873,829,1,2043,762,
1,2044,767,1,2033,
735,1,2605,3098,1,
1574,787,1,2607,3104,
1,2608,3109,1,1958,
3256,16,0,116,1,
2586,3132,1,2534,3257,
16,0,116,1,55,
3258,19,115,1,55,
3259,5,51,1,0,
3260,16,0,113,1,
2401,3261,16,0,113,
1,1860,820,1,10,
3262,16,0,113,1,
2197,3263,16,0,113,
1,2309,3264,16,0,
113,1,21,3265,16,
0,113,1,1657,878,
1,2030,720,1,2031,
725,1,2074,3266,16,
0,113,1,1989,894,
1,1990,3267,16,0,
113,1,2035,741,1,
1775,3268,16,0,113,
1,32,3269,16,0,
113,1,2104,801,1,
2105,3270,16,0,113,
1,2547,3126,1,2226,
886,1,2606,3121,1,
1901,3271,16,0,113,
1,52,3272,16,0,
113,1,2587,3273,16,
0,113,1,1802,774,
1,2021,707,1,1804,
3274,16,0,113,1,
2135,836,1,2354,853,
1,2355,858,1,2029,
714,1,2575,3115,1,
2358,807,1,2032,730,
1,2360,813,1,2362,
3137,1,2037,746,1,
2039,751,1,1931,863,
1,2041,757,1,1873,
829,1,2043,762,1,
2044,767,1,2033,735,
1,2605,3098,1,1574,
787,1,2607,3104,1,
2608,3109,1,1958,3275,
16,0,113,1,2586,
3132,1,2534,3276,16,
0,113,1,56,3277,
19,112,1,56,3278,
5,51,1,0,3279,
16,0,110,1,2401,
3280,16,0,110,1,
1860,820,1,10,3281,
16,0,110,1,2197,
3282,16,0,110,1,
2309,3283,16,0,110,
1,21,3284,16,0,
110,1,1657,878,1,
2030,720,1,2031,725,
1,2074,3285,16,0,
110,1,1989,894,1,
1990,3286,16,0,110,
1,2035,741,1,1775,
3287,16,0,110,1,
32,3288,16,0,110,
1,2104,801,1,2105,
3289,16,0,110,1,
2547,3126,1,2226,886,
1,2606,3121,1,1901,
3290,16,0,110,1,
52,3291,16,0,110,
1,2587,3292,16,0,
110,1,1802,774,1,
2021,707,1,1804,3293,
16,0,110,1,2135,
836,1,2354,853,1,
2355,858,1,2029,714,
1,2575,3115,1,2358,
807,1,2032,730,1,
2360,813,1,2362,3137,
1,2037,746,1,2039,
751,1,1931,863,1,
2041,757,1,1873,829,
1,2043,762,1,2044,
767,1,2033,735,1,
2605,3098,1,1574,787,
1,2607,3104,1,2608,
3109,1,1958,3294,16,
0,110,1,2586,3132,
1,2534,3295,16,0,
110,1,57,3296,19,
109,1,57,3297,5,
51,1,0,3298,16,
0,107,1,2401,3299,
16,0,107,1,1860,
820,1,10,3300,16,
0,107,1,2197,3301,
16,0,107,1,2309,
3302,16,0,107,1,
21,3303,16,0,107,
1,1657,878,1,2030,
720,1,2031,725,1,
2074,3304,16,0,107,
1,1989,894,1,1990,
3305,16,0,107,1,
2035,741,1,1775,3306,
16,0,107,1,32,
3307,16,0,107,1,
2104,801,1,2105,3308,
16,0,107,1,2547,
3126,1,2226,886,1,
2606,3121,1,1901,3309,
16,0,107,1,52,
3310,16,0,107,1,
2587,3311,16,0,107,
1,1802,774,1,2021,
707,1,1804,3312,16,
0,107,1,2135,836,
1,2354,853,1,2355,
858,1,2029,714,1,
2575,3115,1,2358,807,
1,2032,730,1,2360,
813,1,2362,3137,1,
2037,746,1,2039,751,
1,1931,863,1,2041,
757,1,1873,829,1,
2043,762,1,2044,767,
1,2033,735,1,2605,
3098,1,1574,787,1,
2607,3104,1,2608,3109,
1,1958,3313,16,0,
107,1,2586,3132,1,
2534,3314,16,0,107,
1,58,3315,19,352,
1,58,3316,5,9,
1,2414,1580,1,2490,
3317,16,0,350,1,
2455,3318,16,0,350,
1,2451,1589,1,2416,
3319,16,0,350,1,
2453,1595,1,2355,858,
1,2360,813,1,2366,
3320,16,0,350,1,
59,3321,19,349,1,
59,3322,5,9,1,
2414,1580,1,2490,3323,
16,0,347,1,2455,
3324,16,0,347,1,
2451,1589,1,2416,3325,
16,0,347,1,2453,
1595,1,2355,858,1,
2360,813,1,2366,3326,
16,0,347,1,60,
3327,19,429,1,60,
3328,5,9,1,2414,
1580,1,2490,3329,16,
0,427,1,2455,3330,
16,0,427,1,2451,
1589,1,2416,3331,16,
0,427,1,2453,1595,
1,2355,858,1,2360,
813,1,2366,3332,16,
0,427,1,61,3333,
19,345,1,61,3334,
5,9,1,2414,1580,
1,2490,3335,16,0,
343,1,2455,3336,16,
0,343,1,2451,1589,
1,2416,3337,16,0,
343,1,2453,1595,1,
2355,858,1,2360,813,
1,2366,3338,16,0,
343,1,62,3339,19,
342,1,62,3340,5,
9,1,2414,1580,1,
2490,3341,16,0,340,
1,2455,3342,16,0,
340,1,2451,1589,1,
2416,3343,16,0,340,
1,2453,1595,1,2355,
858,1,2360,813,1,
2366,3344,16,0,340,
1,63,3345,19,562,
1,63,3346,5,9,
1,2414,1580,1,2490,
3347,16,0,560,1,
2455,3348,16,0,560,
1,2451,1589,1,2416,
3349,16,0,560,1,
2453,1595,1,2355,858,
1,2360,813,1,2366,
3350,16,0,560,1,
64,3351,19,336,1,
64,3352,5,9,1,
2414,1580,1,2490,3353,
16,0,334,1,2455,
3354,16,0,334,1,
2451,1589,1,2416,3355,
16,0,334,1,2453,
1595,1,2355,858,1,
2360,813,1,2366,3356,
16,0,334,1,65,
3357,19,333,1,65,
3358,5,9,1,2414,
1580,1,2490,3359,16,
0,331,1,2455,3360,
16,0,331,1,2451,
1589,1,2416,3361,16,
0,331,1,2453,1595,
1,2355,858,1,2360,
813,1,2366,3362,16,
0,331,1,66,3363,
19,425,1,66,3364,
5,9,1,2414,1580,
1,2490,3365,16,0,
423,1,2455,3366,16,
0,423,1,2451,1589,
1,2416,3367,16,0,
423,1,2453,1595,1,
2355,858,1,2360,813,
1,2366,3368,16,0,
423,1,67,3369,19,
422,1,67,3370,5,
9,1,2414,1580,1,
2490,3371,16,0,420,
1,2455,3372,16,0,
420,1,2451,1589,1,
2416,3373,16,0,420,
1,2453,1595,1,2355,
858,1,2360,813,1,
2366,3374,16,0,420,
1,68,3375,19,419,
1,68,3376,5,9,
1,2414,1580,1,2490,
3377,16,0,417,1,
2455,3378,16,0,417,
1,2451,1589,1,2416,
3379,16,0,417,1,
2453,1595,1,2355,858,
1,2360,813,1,2366,
3380,16,0,417,1,
69,3381,19,325,1,
69,3382,5,9,1,
2414,1580,1,2490,3383,
16,0,323,1,2455,
3384,16,0,323,1,
2451,1589,1,2416,3385,
16,0,323,1,2453,
1595,1,2355,858,1,
2360,813,1,2366,3386,
16,0,323,1,70,
3387,19,413,1,70,
3388,5,9,1,2414,
1580,1,2490,3389,16,
0,411,1,2455,3390,
16,0,411,1,2451,
1589,1,2416,3391,16,
0,411,1,2453,1595,
1,2355,858,1,2360,
813,1,2366,3392,16,
0,411,1,71,3393,
19,321,1,71,3394,
5,9,1,2414,1580,
1,2490,3395,16,0,
319,1,2455,3396,16,
0,319,1,2451,1589,
1,2416,3397,16,0,
319,1,2453,1595,1,
2355,858,1,2360,813,
1,2366,3398,16,0,
319,1,72,3399,19,
410,1,72,3400,5,
9,1,2414,1580,1,
2490,3401,16,0,408,
1,2455,3402,16,0,
408,1,2451,1589,1,
2416,3403,16,0,408,
1,2453,1595,1,2355,
858,1,2360,813,1,
2366,3404,16,0,408,
1,73,3405,19,317,
1,73,3406,5,9,
1,2414,1580,1,2490,
3407,16,0,315,1,
2455,3408,16,0,315,
1,2451,1589,1,2416,
3409,16,0,315,1,
2453,1595,1,2355,858,
1,2360,813,1,2366,
3410,16,0,315,1,
74,3411,19,471,1,
74,3412,5,9,1,
2414,1580,1,2490,3413,
16,0,469,1,2455,
3414,16,0,469,1,
2451,1589,1,2416,3415,
16,0,469,1,2453,
1595,1,2355,858,1,
2360,813,1,2366,3416,
16,0,469,1,75,
3417,19,311,1,75,
3418,5,9,1,2414,
1580,1,2490,3419,16,
0,309,1,2455,3420,
16,0,309,1,2451,
1589,1,2416,3421,16,
0,309,1,2453,1595,
1,2355,858,1,2360,
813,1,2366,3422,16,
0,309,1,76,3423,
19,405,1,76,3424,
5,9,1,2414,1580,
1,2490,3425,16,0,
403,1,2455,3426,16,
0,403,1,2451,1589,
1,2416,3427,16,0,
403,1,2453,1595,1,
2355,858,1,2360,813,
1,2366,3428,16,0,
403,1,77,3429,19,
307,1,77,3430,5,
9,1,2414,1580,1,
2490,3431,16,0,305,
1,2455,3432,16,0,
305,1,2451,1589,1,
2416,3433,16,0,305,
1,2453,1595,1,2355,
858,1,2360,813,1,
2366,3434,16,0,305,
1,78,3435,19,463,
1,78,3436,5,9,
1,2414,1580,1,2490,
3437,16,0,461,1,
2455,3438,16,0,461,
1,2451,1589,1,2416,
3439,16,0,461,1,
2453,1595,1,2355,858,
1,2360,813,1,2366,
3440,16,0,461,1,
79,3441,19,301,1,
79,3442,5,9,1,
2414,1580,1,2490,3443,
16,0,299,1,2455,
3444,16,0,299,1,
2451,1589,1,2416,3445,
16,0,299,1,2453,
1595,1,2355,858,1,
2360,813,1,2366,3446,
16,0,299,1,80,
3447,19,298,1,80,
3448,5,9,1,2414,
1580,1,2490,3449,16,
0,296,1,2455,3450,
16,0,296,1,2451,
1589,1,2416,3451,16,
0,296,1,2453,1595,
1,2355,858,1,2360,
813,1,2366,3452,16,
0,296,1,81,3453,
19,295,1,81,3454,
5,9,1,2414,1580,
1,2490,3455,16,0,
293,1,2455,3456,16,
0,293,1,2451,1589,
1,2416,3457,16,0,
293,1,2453,1595,1,
2355,858,1,2360,813,
1,2366,3458,16,0,
293,1,82,3459,19,
590,1,82,3460,5,
9,1,2414,1580,1,
2490,3461,16,0,588,
1,2455,3462,16,0,
588,1,2451,1589,1,
2416,3463,16,0,588,
1,2453,1595,1,2355,
858,1,2360,813,1,
2366,3464,16,0,588,
1,83,3465,19,393,
1,83,3466,5,9,
1,2414,1580,1,2490,
3467,16,0,391,1,
2455,3468,16,0,391,
1,2451,1589,1,2416,
3469,16,0,391,1,
2453,1595,1,2355,858,
1,2360,813,1,2366,
3470,16,0,391,1,
84,3471,19,288,1,
84,3472,5,9,1,
2414,1580,1,2490,3473,
16,0,286,1,2455,
3474,16,0,286,1,
2451,1589,1,2416,3475,
16,0,286,1,2453,
1595,1,2355,858,1,
2360,813,1,2366,3476,
16,0,286,1,85,
3477,19,285,1,85,
3478,5,9,1,2414,
1580,1,2490,3479,16,
0,283,1,2455,3480,
16,0,283,1,2451,
1589,1,2416,3481,16,
0,283,1,2453,1595,
1,2355,858,1,2360,
813,1,2366,3482,16,
0,283,1,86,3483,
19,389,1,86,3484,
5,9,1,2414,1580,
1,2490,3485,16,0,
387,1,2455,3486,16,
0,387,1,2451,1589,
1,2416,3487,16,0,
387,1,2453,1595,1,
2355,858,1,2360,813,
1,2366,3488,16,0,
387,1,87,3489,19,
281,1,87,3490,5,
9,1,2414,1580,1,
2490,3491,16,0,279,
1,2455,3492,16,0,
279,1,2451,1589,1,
2416,3493,16,0,279,
1,2453,1595,1,2355,
858,1,2360,813,1,
2366,3494,16,0,279,
1,88,3495,19,644,
1,88,3496,5,9,
1,2414,1580,1,2490,
3497,16,0,642,1,
2455,3498,16,0,642,
1,2451,1589,1,2416,
3499,16,0,642,1,
2453,1595,1,2355,858,
1,2360,813,1,2366,
3500,16,0,642,1,
89,3501,19,276,1,
89,3502,5,9,1,
2414,1580,1,2490,3503,
16,0,274,1,2455,
3504,16,0,274,1,
2451,1589,1,2416,3505,
16,0,274,1,2453,
1595,1,2355,858,1,
2360,813,1,2366,3506,
16,0,274,1,90,
3507,19,382,1,90,
3508,5,9,1,2414,
1580,1,2490,3509,16,
0,380,1,2455,3510,
16,0,380,1,2451,
1589,1,2416,3511,16,
0,380,1,2453,1595,
1,2355,858,1,2360,
813,1,2366,3512,16,
0,380,1,91,3513,
19,133,1,91,3514,
5,121,1,0,3515,
16,0,558,1,1,
1904,1,2,1910,1,
3,1915,1,4,1920,
1,5,1925,1,6,
1930,1,7,1935,1,
8,3516,16,0,131,
1,1515,3517,16,0,
165,1,2605,3098,1,
2135,836,1,2021,707,
1,2022,3518,16,0,
501,1,256,3519,16,
0,173,1,2025,3520,
16,0,505,1,18,
3521,16,0,138,1,
2027,3522,16,0,509,
1,2029,714,1,2030,
720,1,2031,725,1,
2032,730,1,2033,735,
1,277,3523,16,0,
173,1,2035,741,1,
2037,746,1,2039,751,
1,32,3524,16,0,
165,1,2041,757,1,
2043,762,1,2044,767,
1,2547,3126,1,2550,
3525,16,0,173,1,
41,3526,16,0,173,
1,1297,3527,16,0,
165,1,43,3528,16,
0,173,1,1802,774,
1,46,3529,16,0,
178,1,1804,3530,16,
0,165,1,299,3531,
16,0,173,1,2309,
3532,16,0,165,1,
52,3533,16,0,165,
1,509,3534,16,0,
173,1,525,3535,16,
0,173,1,62,3536,
16,0,194,1,65,
3537,16,0,196,1,
2074,3538,16,0,165,
1,1574,787,1,71,
3539,16,0,173,1,
1775,3540,16,0,165,
1,76,3541,16,0,
173,1,1834,3542,16,
0,165,1,2197,3543,
16,0,165,1,79,
3544,16,0,173,1,
1335,3545,16,0,165,
1,322,3546,16,0,
173,1,85,3547,16,
0,173,1,1261,3548,
16,0,165,1,89,
3549,16,0,173,1,
346,3550,16,0,173,
1,2355,858,1,97,
3551,16,0,173,1,
2608,3109,1,2358,807,
1,2360,813,1,102,
3552,16,0,173,1,
1860,820,1,2364,3553,
16,0,379,1,1113,
3554,16,0,158,1,
112,3555,16,0,173,
1,1117,3556,16,0,
165,1,1873,829,1,
1876,3557,16,0,165,
1,372,3558,16,0,
539,1,374,3559,16,
0,541,1,124,3560,
16,0,173,1,376,
3561,16,0,543,1,
378,3562,16,0,545,
1,381,3563,16,0,
173,1,137,3564,16,
0,173,1,1901,3565,
16,0,165,1,2575,
3115,1,1153,3566,16,
0,165,1,151,3567,
16,0,173,1,1407,
3568,16,0,165,1,
1659,3569,16,0,165,
1,406,3570,16,0,
173,1,2586,3132,1,
2587,3571,16,0,558,
1,1371,3572,16,0,
165,1,2104,801,1,
2105,3573,16,0,165,
1,166,3574,16,0,
173,1,1622,3575,16,
0,173,1,2354,853,
1,1931,863,1,1933,
3576,16,0,165,1,
2362,3137,1,2606,3121,
1,2607,3104,1,1585,
3577,16,0,173,1,
182,3578,16,0,173,
1,1189,3579,16,0,
165,1,1443,3580,16,
0,165,1,1695,3581,
16,0,165,1,431,
3582,16,0,173,1,
447,3583,16,0,173,
1,199,3584,16,0,
173,1,1958,3585,16,
0,165,1,1657,878,
1,459,3586,16,0,
173,1,462,3587,16,
0,173,1,217,3588,
16,0,173,1,2226,
886,1,1225,3589,16,
0,165,1,1479,3590,
16,0,165,1,1731,
3591,16,0,173,1,
1989,894,1,1990,3592,
16,0,165,1,236,
3593,16,0,173,1,
1756,3594,16,0,165,
1,92,3595,19,624,
1,92,3596,5,91,
1,256,3597,16,0,
622,1,1261,3598,16,
0,622,1,509,3599,
16,0,622,1,2197,
3600,16,0,622,1,
1515,3601,16,0,622,
1,2021,707,1,1775,
3602,16,0,622,1,
2029,714,1,2030,720,
1,2031,725,1,2032,
730,1,2033,735,1,
277,3603,16,0,622,
1,2035,741,1,2037,
746,1,2039,751,1,
32,3604,16,0,622,
1,2041,757,1,2043,
762,1,2044,767,1,
2550,3605,16,0,622,
1,41,3606,16,0,
622,1,1297,3607,16,
0,622,1,43,3608,
16,0,622,1,1802,
774,1,1804,3609,16,
0,622,1,299,3610,
16,0,622,1,2309,
3611,16,0,622,1,
52,3612,16,0,622,
1,525,3613,16,0,
622,1,62,3614,16,
0,622,1,2074,3615,
16,0,622,1,1574,
787,1,71,3616,16,
0,622,1,76,3617,
16,0,622,1,1834,
3618,16,0,622,1,
1585,3619,16,0,622,
1,1335,3620,16,0,
622,1,79,3621,16,
0,622,1,85,3622,
16,0,622,1,89,
3623,16,0,622,1,
346,3624,16,0,622,
1,2104,801,1,2105,
3625,16,0,622,1,
2358,807,1,2360,813,
1,97,3626,16,0,
622,1,1860,820,1,
102,3627,16,0,622,
1,112,3628,16,0,
622,1,1117,3629,16,
0,622,1,1873,829,
1,1876,3630,16,0,
622,1,124,3631,16,
0,622,1,2135,836,
1,381,3632,16,0,
622,1,322,3633,16,
0,622,1,137,3634,
16,0,622,1,1901,
3635,16,0,622,1,
1153,3636,16,0,622,
1,151,3637,16,0,
622,1,1407,3638,16,
0,622,1,1659,3639,
16,0,622,1,406,
3640,16,0,622,1,
1371,3641,16,0,622,
1,166,3642,16,0,
622,1,1622,3643,16,
0,622,1,2354,853,
1,2355,858,1,1931,
863,1,1933,3644,16,
0,622,1,431,3645,
16,0,622,1,182,
3646,16,0,622,1,
1189,3647,16,0,622,
1,1443,3648,16,0,
622,1,1695,3649,16,
0,622,1,447,3650,
16,0,622,1,199,
3651,16,0,622,1,
1958,3652,16,0,622,
1,1657,878,1,459,
3653,16,0,622,1,
462,3654,16,0,622,
1,217,3655,16,0,
622,1,2226,886,1,
1225,3656,16,0,622,
1,1479,3657,16,0,
622,1,1731,3658,16,
0,622,1,1989,894,
1,1990,3659,16,0,
622,1,236,3660,16,
0,622,1,1756,3661,
16,0,622,1,93,
3662,19,621,1,93,
3663,5,91,1,256,
3664,16,0,619,1,
1261,3665,16,0,619,
1,509,3666,16,0,
619,1,2197,3667,16,
0,619,1,1515,3668,
16,0,619,1,2021,
707,1,1775,3669,16,
0,619,1,2029,714,
1,2030,720,1,2031,
725,1,2032,730,1,
2033,735,1,277,3670,
16,0,619,1,2035,
741,1,2037,746,1,
2039,751,1,32,3671,
16,0,619,1,2041,
757,1,2043,762,1,
2044,767,1,2550,3672,
16,0,619,1,41,
3673,16,0,619,1,
1297,3674,16,0,619,
1,43,3675,16,0,
619,1,1802,774,1,
1804,3676,16,0,619,
1,299,3677,16,0,
619,1,2309,3678,16,
0,619,1,52,3679,
16,0,619,1,525,
3680,16,0,619,1,
62,3681,16,0,619,
1,2074,3682,16,0,
619,1,1574,787,1,
71,3683,16,0,619,
1,76,3684,16,0,
619,1,1834,3685,16,
0,619,1,1585,3686,
16,0,619,1,1335,
3687,16,0,619,1,
79,3688,16,0,619,
1,85,3689,16,0,
619,1,89,3690,16,
0,619,1,346,3691,
16,0,619,1,2104,
801,1,2105,3692,16,
0,619,1,2358,807,
1,2360,813,1,97,
3693,16,0,619,1,
1860,820,1,102,3694,
16,0,619,1,112,
3695,16,0,619,1,
1117,3696,16,0,619,
1,1873,829,1,1876,
3697,16,0,619,1,
124,3698,16,0,619,
1,2135,836,1,381,
3699,16,0,619,1,
322,3700,16,0,619,
1,137,3701,16,0,
619,1,1901,3702,16,
0,619,1,1153,3703,
16,0,619,1,151,
3704,16,0,619,1,
1407,3705,16,0,619,
1,1659,3706,16,0,
619,1,406,3707,16,
0,619,1,1371,3708,
16,0,619,1,166,
3709,16,0,619,1,
1622,3710,16,0,619,
1,2354,853,1,2355,
858,1,1931,863,1,
1933,3711,16,0,619,
1,431,3712,16,0,
619,1,182,3713,16,
0,619,1,1189,3714,
16,0,619,1,1443,
3715,16,0,619,1,
1695,3716,16,0,619,
1,447,3717,16,0,
619,1,199,3718,16,
0,619,1,1958,3719,
16,0,619,1,1657,
878,1,459,3720,16,
0,619,1,462,3721,
16,0,619,1,217,
3722,16,0,619,1,
2226,886,1,1225,3723,
16,0,619,1,1479,
3724,16,0,619,1,
1731,3725,16,0,619,
1,1989,894,1,1990,
3726,16,0,619,1,
236,3727,16,0,619,
1,1756,3728,16,0,
619,1,94,3729,19,
618,1,94,3730,5,
91,1,256,3731,16,
0,616,1,1261,3732,
16,0,616,1,509,
3733,16,0,616,1,
2197,3734,16,0,616,
1,1515,3735,16,0,
616,1,2021,707,1,
1775,3736,16,0,616,
1,2029,714,1,2030,
720,1,2031,725,1,
2032,730,1,2033,735,
1,277,3737,16,0,
616,1,2035,741,1,
2037,746,1,2039,751,
1,32,3738,16,0,
616,1,2041,757,1,
2043,762,1,2044,767,
1,2550,3739,16,0,
616,1,41,3740,16,
0,616,1,1297,3741,
16,0,616,1,43,
3742,16,0,616,1,
1802,774,1,1804,3743,
16,0,616,1,299,
3744,16,0,616,1,
2309,3745,16,0,616,
1,52,3746,16,0,
616,1,525,3747,16,
0,616,1,62,3748,
16,0,616,1,2074,
3749,16,0,616,1,
1574,787,1,71,3750,
16,0,616,1,76,
3751,16,0,616,1,
1834,3752,16,0,616,
1,1585,3753,16,0,
616,1,1335,3754,16,
0,616,1,79,3755,
16,0,616,1,85,
3756,16,0,616,1,
89,3757,16,0,616,
1,346,3758,16,0,
616,1,2104,801,1,
2105,3759,16,0,616,
1,2358,807,1,2360,
813,1,97,3760,16,
0,616,1,1860,820,
1,102,3761,16,0,
616,1,112,3762,16,
0,616,1,1117,3763,
16,0,616,1,1873,
829,1,1876,3764,16,
0,616,1,124,3765,
16,0,616,1,2135,
836,1,381,3766,16,
0,616,1,322,3767,
16,0,616,1,137,
3768,16,0,616,1,
1901,3769,16,0,616,
1,1153,3770,16,0,
616,1,151,3771,16,
0,616,1,1407,3772,
16,0,616,1,1659,
3773,16,0,616,1,
406,3774,16,0,616,
1,1371,3775,16,0,
616,1,166,3776,16,
0,616,1,1622,3777,
16,0,616,1,2354,
853,1,2355,858,1,
1931,863,1,1933,3778,
16,0,616,1,431,
3779,16,0,616,1,
182,3780,16,0,616,
1,1189,3781,16,0,
616,1,1443,3782,16,
0,616,1,1695,3783,
16,0,616,1,447,
3784,16,0,616,1,
199,3785,16,0,616,
1,1958,3786,16,0,
616,1,1657,878,1,
459,3787,16,0,616,
1,462,3788,16,0,
616,1,217,3789,16,
0,616,1,2226,886,
1,1225,3790,16,0,
616,1,1479,3791,16,
0,616,1,1731,3792,
16,0,616,1,1989,
894,1,1990,3793,16,
0,616,1,236,3794,
16,0,616,1,1756,
3795,16,0,616,1,
95,3796,19,103,1,
95,3797,5,1,1,
0,3798,16,0,104,
1,96,3799,19,647,
1,96,3800,5,1,
1,0,3801,16,0,
645,1,97,3802,19,
605,1,97,3803,5,
2,1,0,3804,16,
0,603,1,2587,3805,
16,0,630,1,98,
3806,19,357,1,98,
3807,5,2,1,0,
3808,16,0,481,1,
2587,3809,16,0,355,
1,99,3810,19,474,
1,99,3811,5,2,
1,0,3812,16,0,
472,1,2587,3813,16,
0,652,1,100,3814,
19,466,1,100,3815,
5,4,1,0,3816,
16,0,464,1,2587,
3817,16,0,464,1,
2598,3818,16,0,609,
1,2528,3819,16,0,
609,1,101,3820,19,
491,1,101,3821,5,
2,1,2366,3822,16,
0,492,1,2455,3823,
16,0,489,1,102,
3824,19,398,1,102,
3825,5,4,1,2366,
3826,16,0,396,1,
2455,3827,16,0,396,
1,2490,3828,16,0,
460,1,2416,3829,16,
0,460,1,103,3830,
19,141,1,103,3831,
5,3,1,2401,3832,
16,0,437,1,2534,
3833,16,0,475,1,
10,3834,16,0,139,
1,104,3835,19,151,
1,104,3836,5,16,
1,0,3837,16,0,
482,1,2074,3838,16,
0,637,1,2587,3839,
16,0,482,1,10,
3840,16,0,266,1,
2197,3841,16,0,637,
1,1901,3842,16,0,
637,1,2309,3843,16,
0,637,1,2534,3844,
16,0,266,1,21,
3845,16,0,149,1,
2105,3846,16,0,637,
1,1804,3847,16,0,
637,1,1990,3848,16,
0,637,1,32,3849,
16,0,637,1,2401,
3850,16,0,266,1,
1958,3851,16,0,637,
1,1775,3852,16,0,
637,1,105,3853,19,
130,1,105,3854,5,
17,1,0,3855,16,
0,128,1,2074,3856,
16,0,137,1,2587,
3857,16,0,128,1,
2105,3858,16,0,137,
1,10,3859,16,0,
137,1,2197,3860,16,
0,137,1,1901,3861,
16,0,137,1,2309,
3862,16,0,137,1,
52,3863,16,0,192,
1,21,3864,16,0,
137,1,2534,3865,16,
0,137,1,1804,3866,
16,0,137,1,1990,
3867,16,0,137,1,
32,3868,16,0,137,
1,2401,3869,16,0,
137,1,1958,3870,16,
0,137,1,1775,3871,
16,0,137,1,106,
3872,19,432,1,106,
3873,5,4,1,2366,
3874,16,0,430,1,
2455,3875,16,0,430,
1,2490,3876,16,0,
430,1,2416,3877,16,
0,430,1,107,3878,
19,224,1,107,3879,
5,13,1,2074,3880,
16,0,510,1,2412,
3881,16,0,363,1,
2197,3882,16,0,510,
1,1901,3883,16,0,
510,1,2309,3884,16,
0,510,1,1990,3885,
16,0,510,1,1804,
3886,16,0,510,1,
2545,3887,16,0,222,
1,31,3888,16,0,
265,1,32,3889,16,
0,510,1,2105,3890,
16,0,510,1,1958,
3891,16,0,510,1,
1775,3892,16,0,510,
1,108,3893,19,314,
1,108,3894,5,1,
1,32,3895,16,0,
312,1,109,3896,19,
255,1,109,3897,5,
10,1,2074,3898,16,
0,578,1,2197,3899,
16,0,661,1,1901,
3900,16,0,438,1,
2309,3901,16,0,253,
1,1804,3902,16,0,
326,1,1990,3903,16,
0,498,1,32,3904,
16,0,450,1,2105,
3905,16,0,651,1,
1958,3906,16,0,477,
1,1775,3907,16,0,
260,1,110,3908,19,
634,1,110,3909,5,
10,1,2074,3910,16,
0,632,1,2197,3911,
16,0,632,1,1901,
3912,16,0,632,1,
2309,3913,16,0,632,
1,1804,3914,16,0,
632,1,1990,3915,16,
0,632,1,32,3916,
16,0,632,1,2105,
3917,16,0,632,1,
1958,3918,16,0,632,
1,1775,3919,16,0,
632,1,111,3920,19,
161,1,111,3921,5,
29,1,1479,3922,16,
0,563,1,2074,3923,
16,0,636,1,1695,
3924,16,0,188,1,
1756,3925,16,0,252,
1,2197,3926,16,0,
636,1,2309,3927,16,
0,636,1,1876,3928,
16,0,237,1,1659,
3929,16,0,252,1,
1443,3930,16,0,526,
1,1117,3931,16,0,
159,1,1990,3932,16,
0,636,1,1189,3933,
16,0,238,1,1775,
3934,16,0,636,1,
32,3935,16,0,636,
1,2105,3936,16,0,
636,1,1515,3937,16,
0,580,1,1901,3938,
16,0,636,1,52,
3939,16,0,591,1,
1804,3940,16,0,636,
1,1261,3941,16,0,
358,1,1153,3942,16,
0,245,1,1225,3943,
16,0,289,1,1335,
3944,16,0,459,1,
1933,3945,16,0,565,
1,1834,3946,16,0,
373,1,1297,3947,16,
0,386,1,1407,3948,
16,0,572,1,1958,
3949,16,0,636,1,
1371,3950,16,0,453,
1,112,3951,19,535,
1,112,3952,5,10,
1,2074,3953,16,0,
533,1,2197,3954,16,
0,533,1,1901,3955,
16,0,533,1,2309,
3956,16,0,533,1,
1804,3957,16,0,533,
1,1990,3958,16,0,
533,1,32,3959,16,
0,533,1,2105,3960,
16,0,533,1,1958,
3961,16,0,533,1,
1775,3962,16,0,533,
1,113,3963,19,531,
1,113,3964,5,10,
1,2074,3965,16,0,
529,1,2197,3966,16,
0,529,1,1901,3967,
16,0,529,1,2309,
3968,16,0,529,1,
1804,3969,16,0,529,
1,1990,3970,16,0,
529,1,32,3971,16,
0,529,1,2105,3972,
16,0,529,1,1958,
3973,16,0,529,1,
1775,3974,16,0,529,
1,114,3975,19,576,
1,114,3976,5,10,
1,2074,3977,16,0,
574,1,2197,3978,16,
0,574,1,1901,3979,
16,0,574,1,2309,
3980,16,0,574,1,
1804,3981,16,0,574,
1,1990,3982,16,0,
574,1,32,3983,16,
0,574,1,2105,3984,
16,0,574,1,1958,
3985,16,0,574,1,
1775,3986,16,0,574,
1,115,3987,19,525,
1,115,3988,5,10,
1,2074,3989,16,0,
523,1,2197,3990,16,
0,523,1,1901,3991,
16,0,523,1,2309,
3992,16,0,523,1,
1804,3993,16,0,523,
1,1990,3994,16,0,
523,1,32,3995,16,
0,523,1,2105,3996,
16,0,523,1,1958,
3997,16,0,523,1,
1775,3998,16,0,523,
1,116,3999,19,522,
1,116,4000,5,10,
1,2074,4001,16,0,
520,1,2197,4002,16,
0,520,1,1901,4003,
16,0,520,1,2309,
4004,16,0,520,1,
1804,4005,16,0,520,
1,1990,4006,16,0,
520,1,32,4007,16,
0,520,1,2105,4008,
16,0,520,1,1958,
4009,16,0,520,1,
1775,4010,16,0,520,
1,117,4011,19,519,
1,117,4012,5,10,
1,2074,4013,16,0,
517,1,2197,4014,16,
0,517,1,1901,4015,
16,0,517,1,2309,
4016,16,0,517,1,
1804,4017,16,0,517,
1,1990,4018,16,0,
517,1,32,4019,16,
0,517,1,2105,4020,
16,0,517,1,1958,
4021,16,0,517,1,
1775,4022,16,0,517,
1,118,4023,19,516,
1,118,4024,5,10,
1,2074,4025,16,0,
514,1,2197,4026,16,
0,514,1,1901,4027,
16,0,514,1,2309,
4028,16,0,514,1,
1804,4029,16,0,514,
1,1990,4030,16,0,
514,1,32,4031,16,
0,514,1,2105,4032,
16,0,514,1,1958,
4033,16,0,514,1,
1775,4034,16,0,514,
1,119,4035,19,513,
1,119,4036,5,10,
1,2074,4037,16,0,
511,1,2197,4038,16,
0,511,1,1901,4039,
16,0,511,1,2309,
4040,16,0,511,1,
1804,4041,16,0,511,
1,1990,4042,16,0,
511,1,32,4043,16,
0,511,1,2105,4044,
16,0,511,1,1958,
4045,16,0,511,1,
1775,4046,16,0,511,
1,120,4047,19,147,
1,120,4048,5,2,
1,1756,4049,16,0,
322,1,1659,4050,16,
0,145,1,121,4051,
19,556,1,121,4052,
5,65,1,1479,4053,
16,0,554,1,112,
4054,16,0,554,1,
1804,4055,16,0,554,
1,431,4056,16,0,
554,1,1443,4057,16,
0,554,1,1756,4058,
16,0,554,1,124,
4059,16,0,554,1,
525,4060,16,0,554,
1,2197,4061,16,0,
554,1,236,4062,16,
0,554,1,346,4063,
16,0,554,1,2309,
4064,16,0,554,1,
1876,4065,16,0,554,
1,1659,4066,16,0,
554,1,1225,4067,16,
0,554,1,1117,4068,
16,0,554,1,137,
4069,16,0,554,1,
1775,4070,16,0,554,
1,32,4071,16,0,
554,1,2105,4072,16,
0,554,1,1407,4073,
16,0,554,1,256,
4074,16,0,554,1,
459,4075,16,0,554,
1,41,4076,16,0,
554,1,151,4077,16,
0,554,1,43,4078,
16,0,554,1,1901,
4079,16,0,554,1,
509,4080,16,0,554,
1,52,4081,16,0,
554,1,381,4082,16,
0,554,1,447,4083,
16,0,554,1,166,
4084,16,0,554,1,
462,4085,16,0,554,
1,277,4086,16,0,
554,1,1695,4087,16,
0,554,1,1261,4088,
16,0,554,1,1153,
4089,16,0,554,1,
62,4090,16,0,585,
1,2550,4091,16,0,
554,1,2074,4092,16,
0,554,1,1335,4093,
16,0,554,1,71,
4094,16,0,554,1,
182,4095,16,0,554,
1,76,4096,16,0,
554,1,79,4097,16,
0,554,1,1933,4098,
16,0,554,1,299,
4099,16,0,554,1,
85,4100,16,0,554,
1,1515,4101,16,0,
554,1,89,4102,16,
0,554,1,1834,4103,
16,0,554,1,1622,
4104,16,0,554,1,
1990,4105,16,0,554,
1,406,4106,16,0,
554,1,1731,4107,16,
0,554,1,97,4108,
16,0,554,1,1297,
4109,16,0,554,1,
1189,4110,16,0,554,
1,102,4111,16,0,
554,1,1585,4112,16,
0,554,1,322,4113,
16,0,554,1,1958,
4114,16,0,554,1,
199,4115,16,0,554,
1,1371,4116,16,0,
554,1,217,4117,16,
0,554,1,122,4118,
19,601,1,122,4119,
5,2,1,459,4120,
16,0,599,1,41,
4121,16,0,653,1,
123,4122,19,608,1,
123,4123,5,3,1,
462,4124,16,0,606,
1,459,4125,16,0,
628,1,41,4126,16,
0,628,1,124,4127,
19,4128,4,36,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
1,124,4123,1,125,
4129,19,548,1,125,
4130,5,65,1,1479,
4131,16,0,546,1,
112,4132,16,0,546,
1,1804,4133,16,0,
546,1,431,4134,16,
0,546,1,1443,4135,
16,0,546,1,1756,
4136,16,0,546,1,
124,4137,16,0,546,
1,525,4138,16,0,
546,1,2197,4139,16,
0,546,1,236,4140,
16,0,546,1,346,
4141,16,0,546,1,
2309,4142,16,0,546,
1,1876,4143,16,0,
546,1,1659,4144,16,
0,546,1,1225,4145,
16,0,546,1,1117,
4146,16,0,546,1,
137,4147,16,0,546,
1,1775,4148,16,0,
546,1,32,4149,16,
0,546,1,2105,4150,
16,0,546,1,1407,
4151,16,0,546,1,
256,4152,16,0,546,
1,459,4153,16,0,
546,1,41,4154,16,
0,546,1,151,4155,
16,0,546,1,43,
4156,16,0,546,1,
1901,4157,16,0,546,
1,509,4158,16,0,
546,1,52,4159,16,
0,546,1,381,4160,
16,0,546,1,447,
4161,16,0,546,1,
166,4162,16,0,546,
1,462,4163,16,0,
546,1,277,4164,16,
0,546,1,1695,4165,
16,0,546,1,1261,
4166,16,0,546,1,
1153,4167,16,0,546,
1,62,4168,16,0,
586,1,2550,4169,16,
0,546,1,2074,4170,
16,0,546,1,1335,
4171,16,0,546,1,
71,4172,16,0,546,
1,182,4173,16,0,
546,1,76,4174,16,
0,546,1,79,4175,
16,0,546,1,1933,
4176,16,0,546,1,
299,4177,16,0,546,
1,85,4178,16,0,
546,1,1515,4179,16,
0,546,1,89,4180,
16,0,546,1,1834,
4181,16,0,546,1,
1622,4182,16,0,546,
1,1990,4183,16,0,
546,1,406,4184,16,
0,546,1,1731,4185,
16,0,546,1,97,
4186,16,0,546,1,
1297,4187,16,0,546,
1,1189,4188,16,0,
546,1,102,4189,16,
0,546,1,1585,4190,
16,0,546,1,322,
4191,16,0,546,1,
1958,4192,16,0,546,
1,199,4193,16,0,
546,1,1371,4194,16,
0,546,1,217,4195,
16,0,546,1,126,
4196,19,4197,4,28,
86,0,101,0,99,
0,116,0,111,0,
114,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,126,
4130,1,127,4198,19,
4199,4,32,82,0,
111,0,116,0,97,
0,116,0,105,0,
111,0,110,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,127,4130,1,128,
4200,19,4201,4,24,
76,0,105,0,115,
0,116,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
128,4130,1,129,4202,
19,169,1,129,4203,
5,64,1,1479,4204,
16,0,537,1,112,
4205,16,0,247,1,
1804,4206,16,0,584,
1,431,4207,16,0,
581,1,1443,4208,16,
0,488,1,1756,4209,
16,0,660,1,124,
4210,16,0,259,1,
525,4211,16,0,366,
1,2197,4212,16,0,
584,1,236,4213,16,
0,426,1,346,4214,
16,0,500,1,2309,
4215,16,0,584,1,
1876,4216,16,0,378,
1,1659,4217,16,0,
660,1,1225,4218,16,
0,246,1,1117,4219,
16,0,218,1,137,
4220,16,0,282,1,
1775,4221,16,0,584,
1,32,4222,16,0,
584,1,2105,4223,16,
0,584,1,1407,4224,
16,0,493,1,256,
4225,16,0,442,1,
459,4226,16,0,167,
1,41,4227,16,0,
167,1,151,4228,16,
0,318,1,43,4229,
16,0,631,1,1901,
4230,16,0,584,1,
509,4231,16,0,641,
1,52,4232,16,0,
593,1,381,4233,16,
0,559,1,447,4234,
16,0,366,1,166,
4235,16,0,353,1,
462,4236,16,0,167,
1,277,4237,16,0,
451,1,1695,4238,16,
0,277,1,1261,4239,
16,0,308,1,1153,
4240,16,0,174,1,
2550,4241,16,0,569,
1,2074,4242,16,0,
584,1,1335,4243,16,
0,402,1,71,4244,
16,0,202,1,182,
4245,16,0,366,1,
76,4246,16,0,557,
1,79,4247,16,0,
217,1,1933,4248,16,
0,445,1,299,4249,
16,0,467,1,85,
4250,16,0,485,1,
1515,4251,16,0,568,
1,89,4252,16,0,
228,1,1834,4253,16,
0,346,1,1622,4254,
16,0,640,1,1990,
4255,16,0,584,1,
406,4256,16,0,570,
1,1731,4257,16,0,
248,1,97,4258,16,
0,446,1,1297,4259,
16,0,407,1,1189,
4260,16,0,216,1,
102,4261,16,0,236,
1,1585,4262,16,0,
650,1,322,4263,16,
0,486,1,1958,4264,
16,0,584,1,199,
4265,16,0,377,1,
1371,4266,16,0,443,
1,217,4267,16,0,
394,1,130,4268,19,
4269,4,36,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
130,4203,1,131,4270,
19,4271,4,30,73,
0,100,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
131,4203,1,132,4272,
19,4273,4,36,73,
0,100,0,101,0,
110,0,116,0,68,
0,111,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,132,4203,1,133,
4274,19,4275,4,44,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,67,0,97,0,
108,0,108,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
133,4203,1,134,4276,
19,4277,4,32,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,134,4203,1,
135,4278,19,4279,4,
30,85,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,135,4203,1,
136,4280,19,4281,4,
36,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,136,4203,
1,137,4282,19,4283,
4,42,80,0,97,
0,114,0,101,0,
110,0,116,0,104,
0,101,0,115,0,
105,0,115,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
137,4203,1,138,4284,
19,4285,4,56,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,138,4203,1,140,
4286,19,682,1,140,
3797,1,141,4287,19,
693,1,141,3797,1,
142,4288,19,3112,1,
142,3800,1,143,4289,
19,3124,1,143,3800,
1,144,4290,19,3107,
1,144,3800,1,145,
4291,19,3102,1,145,
3800,1,146,4292,19,
3135,1,146,3803,1,
147,4293,19,3119,1,
147,3803,1,148,4294,
19,3130,1,148,3807,
1,149,4295,19,3140,
1,149,3807,1,150,
4296,19,676,1,150,
3811,1,151,4297,19,
671,1,151,3811,1,
152,4298,19,688,1,
152,3815,1,153,4299,
19,698,1,153,3815,
1,154,4300,19,1598,
1,154,3821,1,155,
4301,19,1593,1,155,
3821,1,156,4302,19,
1584,1,156,3825,1,
157,4303,19,1630,1,
157,3831,1,158,4304,
19,1614,1,158,3831,
1,159,4305,19,1089,
1,159,3836,1,160,
4306,19,817,1,160,
3879,1,161,4307,19,
861,1,161,3879,1,
162,4308,19,811,1,
162,3894,1,163,4309,
19,856,1,163,3894,
1,164,4310,19,881,
1,164,3897,1,165,
4311,19,765,1,165,
3897,1,166,4312,19,
790,1,166,3897,1,
167,4313,19,760,1,
167,3897,1,168,4314,
19,754,1,168,3897,
1,169,4315,19,749,
1,169,3897,1,170,
4316,19,744,1,170,
3897,1,171,4317,19,
738,1,171,3897,1,
172,4318,19,733,1,
172,3897,1,173,4319,
19,728,1,173,3897,
1,174,4320,19,723,
1,174,3897,1,175,
4321,19,718,1,175,
3897,1,176,4322,19,
1119,1,176,3964,1,
177,4323,19,1262,1,
177,3976,1,178,4324,
19,1111,1,178,3988,
1,179,4325,19,1250,
1,179,3988,1,180,
4326,19,897,1,180,
4000,1,181,4327,19,
711,1,181,4000,1,
182,4328,19,804,1,
182,4000,1,183,4329,
19,839,1,183,4000,
1,184,4330,19,867,
1,184,4012,1,185,
4331,19,889,1,185,
4012,1,186,4332,19,
824,1,186,4024,1,
187,4333,19,832,1,
187,4024,1,188,4334,
19,778,1,188,4036,
1,189,4335,19,1489,
1,189,4048,1,190,
4336,19,1125,1,190,
4048,1,191,4337,19,
1462,1,191,4048,1,
192,4338,19,1505,1,
192,4048,1,193,4339,
19,1367,1,193,3909,
1,194,4340,19,1425,
1,194,3909,1,195,
4341,19,1105,1,195,
3921,1,196,4342,19,
1537,1,196,3921,1,
197,4343,19,1457,1,
197,3921,1,198,4344,
19,1410,1,198,3921,
1,199,4345,19,1335,
1,199,3921,1,200,
4346,19,1272,1,200,
3921,1,201,4347,19,
1282,1,201,3921,1,
202,4348,19,1100,1,
202,3921,1,203,4349,
19,1521,1,203,3921,
1,204,4350,19,1452,
1,204,3921,1,205,
4351,19,1400,1,205,
3921,1,206,4352,19,
1324,1,206,3921,1,
207,4353,19,1298,1,
207,3921,1,208,4354,
19,1083,1,208,3921,
1,209,4355,19,1420,
1,209,3921,1,210,
4356,19,1441,1,210,
3921,1,211,4357,19,
1395,1,211,3921,1,
212,4358,19,1479,1,
212,3921,1,213,4359,
19,1234,1,213,3921,
1,214,4360,19,1142,
1,214,3921,1,215,
4361,19,1072,1,215,
3921,1,216,4362,19,
1495,1,216,3921,1,
217,4363,19,1436,1,
217,3921,1,218,4364,
19,1389,1,218,3921,
1,219,4365,19,1267,
1,219,3952,1,220,
4366,19,1245,1,220,
3952,1,221,4367,19,
1526,1,221,4130,1,
222,4368,19,1549,1,
222,4130,1,223,4369,
19,1516,1,223,4130,
1,224,4370,19,1511,
1,224,4130,1,225,
4371,19,1532,1,225,
4130,1,226,4372,19,
1468,1,226,4130,1,
227,4373,19,1188,1,
227,4130,1,228,4374,
19,1356,1,228,4203,
1,229,4375,19,1137,
1,229,4203,1,230,
4376,19,1155,1,230,
4203,1,231,4377,19,
1172,1,231,4203,1,
232,4378,19,1177,1,
232,4203,1,233,4379,
19,1166,1,233,4203,
1,234,4380,19,1161,
1,234,4203,1,235,
4381,19,1345,1,235,
4203,1,236,4382,19,
1373,1,236,4203,1,
237,4383,19,1378,1,
237,4203,1,238,4384,
19,1340,1,238,4203,
1,239,4385,19,1330,
1,239,4203,1,240,
4386,19,1304,1,240,
4203,1,241,4387,19,
1277,1,241,4203,1,
242,4388,19,1182,1,
242,4203,1,243,4389,
19,1147,1,243,4203,
1,244,4390,19,1095,
1,244,4203,1,245,
4391,19,1544,1,245,
4203,1,246,4392,19,
1500,1,246,4203,1,
247,4393,19,1484,1,
247,4203,1,248,4394,
19,1474,1,248,4203,
1,249,4395,19,1431,
1,249,4203,1,250,
4396,19,1405,1,250,
4203,1,251,4397,19,
1383,1,251,4203,1,
252,4398,19,1361,1,
252,4203,1,253,4399,
19,1319,1,253,4203,
1,254,4400,19,1350,
1,254,4203,1,255,
4401,19,1415,1,255,
4203,1,256,4402,19,
1447,1,256,4203,1,
257,4403,19,1239,1,
257,4203,1,258,4404,
19,1311,1,258,4203,
1,259,4405,19,1293,
1,259,4203,1,260,
4406,19,1256,1,260,
4203,1,261,4407,19,
1229,1,261,4203,1,
262,4408,19,1078,1,
262,4203,1,263,4409,
19,1559,1,263,4203,
1,264,4410,19,1194,
1,264,4203,1,265,
4411,19,1199,1,265,
4203,1,266,4412,19,
1219,1,266,4203,1,
267,4413,19,1209,1,
267,4203,1,268,4414,
19,1214,1,268,4203,
1,269,4415,19,1204,
1,269,4203,1,270,
4416,19,1554,1,270,
4203,1,271,4417,19,
1224,1,271,4203,1,
272,4418,19,1288,1,
272,4052,1,273,4419,
19,1651,1,273,4119,
1,274,4420,19,1645,
1,274,4119,1,275,
4421,19,1625,1,275,
4123,1,276,4422,19,
1938,1,276,3854,1,
277,4423,19,1933,1,
277,3854,1,278,4424,
19,1928,1,278,3854,
1,279,4425,19,1923,
1,279,3854,1,280,
4426,19,1918,1,280,
3854,1,281,4427,19,
1913,1,281,3854,1,
282,4428,19,1908,1,
282,3854,1,283,4429,
19,1840,1,283,3873,
1,284,4430,19,1835,
1,284,3873,1,285,
4431,19,1830,1,285,
3873,1,286,4432,19,
1892,1,286,3873,1,
287,4433,19,1824,1,
287,3873,1,288,4434,
19,1819,1,288,3873,
1,289,4435,19,1814,
1,289,3873,1,290,
4436,19,1809,1,290,
3873,1,291,4437,19,
1804,1,291,3873,1,
292,4438,19,1799,1,
292,3873,1,293,4439,
19,1794,1,293,3873,
1,294,4440,19,1789,
1,294,3873,1,295,
4441,19,1784,1,295,
3873,1,296,4442,19,
1779,1,296,3873,1,
297,4443,19,1774,1,
297,3873,1,298,4444,
19,1769,1,298,3873,
1,299,4445,19,1882,
1,299,3873,1,300,
4446,19,1763,1,300,
3873,1,301,4447,19,
1758,1,301,3873,1,
302,4448,19,1753,1,
302,3873,1,303,4449,
19,1748,1,303,3873,
1,304,4450,19,1743,
1,304,3873,1,305,
4451,19,1875,1,305,
3873,1,306,4452,19,
1737,1,306,3873,1,
307,4453,19,1870,1,
307,3873,1,308,4454,
19,1732,1,308,3873,
1,309,4455,19,1727,
1,309,3873,1,310,
4456,19,1670,1,310,
3873,1,311,4457,19,
1864,1,311,3873,1,
312,4458,19,1720,1,
312,3873,1,313,4459,
19,1715,1,313,3873,
1,314,4460,19,1710,
1,314,3873,1,315,
4461,19,1705,1,315,
3873,1,316,4462,19,
4463,4,50,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,51,0,1,316,
3831,1,317,4464,19,
4465,4,28,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,95,0,51,
0,1,317,4119,1,
318,4466,19,4467,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,52,
0,1,318,3831,1,
319,4468,19,4469,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,53,
0,1,319,3831,1,
320,4470,19,4471,4,
24,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,51,0,
1,320,3897,1,321,
4472,19,4473,4,28,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,52,0,1,321,
4119,2,0,0};
new Sfactory(this,"ExpressionArgument_1",new SCreator(ExpressionArgument_1_factory));
new Sfactory(this,"SimpleAssignment_8",new SCreator(SimpleAssignment_8_factory));
new Sfactory(this,"StatementList_1",new SCreator(StatementList_1_factory));
new Sfactory(this,"StateChange_1",new SCreator(StateChange_1_factory));
new Sfactory(this,"StateChange_2",new SCreator(StateChange_2_factory));
new Sfactory(this,"Declaration",new SCreator(Declaration_factory));
new Sfactory(this,"IdentExpression",new SCreator(IdentExpression_factory));
new Sfactory(this,"error",new SCreator(error_factory));
new Sfactory(this,"BinaryExpression_2",new SCreator(BinaryExpression_2_factory));
new Sfactory(this,"BinaryExpression_3",new SCreator(BinaryExpression_3_factory));
new Sfactory(this,"BinaryExpression_4",new SCreator(BinaryExpression_4_factory));
new Sfactory(this,"BinaryExpression_5",new SCreator(BinaryExpression_5_factory));
new Sfactory(this,"ReturnStatement_2",new SCreator(ReturnStatement_2_factory));
new Sfactory(this,"SimpleAssignment_19",new SCreator(SimpleAssignment_19_factory));
new Sfactory(this,"BinaryExpression_9",new SCreator(BinaryExpression_9_factory));
new Sfactory(this,"VectorConstant_1",new SCreator(VectorConstant_1_factory));
new Sfactory(this,"ParenthesisExpression",new SCreator(ParenthesisExpression_factory));
new Sfactory(this,"UnaryExpression",new SCreator(UnaryExpression_factory));
new Sfactory(this,"IdentDotExpression_1",new SCreator(IdentDotExpression_1_factory));
new Sfactory(this,"ArgumentList_4",new SCreator(ArgumentList_4_factory));
new Sfactory(this,"Typename",new SCreator(Typename_factory));
new Sfactory(this,"IfStatement_1",new SCreator(IfStatement_1_factory));
new Sfactory(this,"Assignment",new SCreator(Assignment_factory));
new Sfactory(this,"CompoundStatement_1",new SCreator(CompoundStatement_1_factory));
new Sfactory(this,"CompoundStatement_2",new SCreator(CompoundStatement_2_factory));
new Sfactory(this,"ReturnStatement_1",new SCreator(ReturnStatement_1_factory));
new Sfactory(this,"IdentDotExpression",new SCreator(IdentDotExpression_factory));
new Sfactory(this,"Argument",new SCreator(Argument_factory));
new Sfactory(this,"State_2",new SCreator(State_2_factory));
new Sfactory(this,"WhileStatement_1",new SCreator(WhileStatement_1_factory));
new Sfactory(this,"GlobalDefinitions_3",new SCreator(GlobalDefinitions_3_factory));
new Sfactory(this,"GlobalDefinitions_4",new SCreator(GlobalDefinitions_4_factory));
new Sfactory(this,"Event_1",new SCreator(Event_1_factory));
new Sfactory(this,"ListConstant",new SCreator(ListConstant_factory));
new Sfactory(this,"Event_3",new SCreator(Event_3_factory));
new Sfactory(this,"Event_4",new SCreator(Event_4_factory));
new Sfactory(this,"Event_5",new SCreator(Event_5_factory));
new Sfactory(this,"SimpleAssignment_5",new SCreator(SimpleAssignment_5_factory));
new Sfactory(this,"Typename_1",new SCreator(Typename_1_factory));
new Sfactory(this,"Typename_2",new SCreator(Typename_2_factory));
new Sfactory(this,"Typename_3",new SCreator(Typename_3_factory));
new Sfactory(this,"Typename_4",new SCreator(Typename_4_factory));
new Sfactory(this,"Typename_5",new SCreator(Typename_5_factory));
new Sfactory(this,"Typename_6",new SCreator(Typename_6_factory));
new Sfactory(this,"Typename_7",new SCreator(Typename_7_factory));
new Sfactory(this,"ArgumentDeclarationList",new SCreator(ArgumentDeclarationList_factory));
new Sfactory(this,"ConstantExpression",new SCreator(ConstantExpression_factory));
new Sfactory(this,"LSLProgramRoot_1",new SCreator(LSLProgramRoot_1_factory));
new Sfactory(this,"LSLProgramRoot_2",new SCreator(LSLProgramRoot_2_factory));
new Sfactory(this,"States_1",new SCreator(States_1_factory));
new Sfactory(this,"States_2",new SCreator(States_2_factory));
new Sfactory(this,"FunctionCallExpression_1",new SCreator(FunctionCallExpression_1_factory));
new Sfactory(this,"ForLoopStatement",new SCreator(ForLoopStatement_factory));
new Sfactory(this,"DoWhileStatement_1",new SCreator(DoWhileStatement_1_factory));
new Sfactory(this,"DoWhileStatement_2",new SCreator(DoWhileStatement_2_factory));
new Sfactory(this,"ForLoopStatement_4",new SCreator(ForLoopStatement_4_factory));
new Sfactory(this,"SimpleAssignment_11",new SCreator(SimpleAssignment_11_factory));
new Sfactory(this,"SimpleAssignment_12",new SCreator(SimpleAssignment_12_factory));
new Sfactory(this,"SimpleAssignment_13",new SCreator(SimpleAssignment_13_factory));
new Sfactory(this,"JumpLabel",new SCreator(JumpLabel_factory));
new Sfactory(this,"SimpleAssignment_15",new SCreator(SimpleAssignment_15_factory));
new Sfactory(this,"SimpleAssignment_17",new SCreator(SimpleAssignment_17_factory));
new Sfactory(this,"SimpleAssignment_18",new SCreator(SimpleAssignment_18_factory));
new Sfactory(this,"JumpStatement_1",new SCreator(JumpStatement_1_factory));
new Sfactory(this,"GlobalDefinitions",new SCreator(GlobalDefinitions_factory));
new Sfactory(this,"FunctionCall_1",new SCreator(FunctionCall_1_factory));
new Sfactory(this,"ArgumentList_3",new SCreator(ArgumentList_3_factory));
new Sfactory(this,"Assignment_2",new SCreator(Assignment_2_factory));
new Sfactory(this,"TypecastExpression_1",new SCreator(TypecastExpression_1_factory));
new Sfactory(this,"SimpleAssignment_21",new SCreator(SimpleAssignment_21_factory));
new Sfactory(this,"SimpleAssignment_22",new SCreator(SimpleAssignment_22_factory));
new Sfactory(this,"SimpleAssignment_23",new SCreator(SimpleAssignment_23_factory));
new Sfactory(this,"TypecastExpression_9",new SCreator(TypecastExpression_9_factory));
new Sfactory(this,"ArgumentDeclarationList_1",new SCreator(ArgumentDeclarationList_1_factory));
new Sfactory(this,"ArgumentDeclarationList_2",new SCreator(ArgumentDeclarationList_2_factory));
new Sfactory(this,"ArgumentDeclarationList_3",new SCreator(ArgumentDeclarationList_3_factory));
new Sfactory(this,"GlobalDefinitions_1",new SCreator(GlobalDefinitions_1_factory));
new Sfactory(this,"GlobalDefinitions_2",new SCreator(GlobalDefinitions_2_factory));
new Sfactory(this,"IncrementDecrementExpression",new SCreator(IncrementDecrementExpression_factory));
new Sfactory(this,"GlobalVariableDeclaration",new SCreator(GlobalVariableDeclaration_factory));
new Sfactory(this,"Event_11",new SCreator(Event_11_factory));
new Sfactory(this,"TypecastExpression_2",new SCreator(TypecastExpression_2_factory));
new Sfactory(this,"TypecastExpression_3",new SCreator(TypecastExpression_3_factory));
new Sfactory(this,"TypecastExpression_5",new SCreator(TypecastExpression_5_factory));
new Sfactory(this,"TypecastExpression_8",new SCreator(TypecastExpression_8_factory));
new Sfactory(this,"Constant_1",new SCreator(Constant_1_factory));
new Sfactory(this,"Expression",new SCreator(Expression_factory));
new Sfactory(this,"Constant_3",new SCreator(Constant_3_factory));
new Sfactory(this,"Constant_4",new SCreator(Constant_4_factory));
new Sfactory(this,"BinaryExpression_1",new SCreator(BinaryExpression_1_factory));
new Sfactory(this,"IfStatement_2",new SCreator(IfStatement_2_factory));
new Sfactory(this,"IfStatement_3",new SCreator(IfStatement_3_factory));
new Sfactory(this,"IfStatement_4",new SCreator(IfStatement_4_factory));
new Sfactory(this,"ReturnStatement",new SCreator(ReturnStatement_factory));
new Sfactory(this,"Event_2",new SCreator(Event_2_factory));
new Sfactory(this,"RotationConstant",new SCreator(RotationConstant_factory));
new Sfactory(this,"Statement_12",new SCreator(Statement_12_factory));
new Sfactory(this,"Statement_13",new SCreator(Statement_13_factory));
new Sfactory(this,"UnaryExpression_1",new SCreator(UnaryExpression_1_factory));
new Sfactory(this,"UnaryExpression_2",new SCreator(UnaryExpression_2_factory));
new Sfactory(this,"UnaryExpression_3",new SCreator(UnaryExpression_3_factory));
new Sfactory(this,"ArgumentList_1",new SCreator(ArgumentList_1_factory));
new Sfactory(this,"ArgumentList_2",new SCreator(ArgumentList_2_factory));
new Sfactory(this,"Constant",new SCreator(Constant_factory));
new Sfactory(this,"State",new SCreator(State_factory));
new Sfactory(this,"Event_13",new SCreator(Event_13_factory));
new Sfactory(this,"LSLProgramRoot",new SCreator(LSLProgramRoot_factory));
new Sfactory(this,"StateChange",new SCreator(StateChange_factory));
new Sfactory(this,"IncrementDecrementExpression_2",new SCreator(IncrementDecrementExpression_2_factory));
new Sfactory(this,"GlobalVariableDeclaration_1",new SCreator(GlobalVariableDeclaration_1_factory));
new Sfactory(this,"GlobalVariableDeclaration_2",new SCreator(GlobalVariableDeclaration_2_factory));
new Sfactory(this,"IncrementDecrementExpression_5",new SCreator(IncrementDecrementExpression_5_factory));
new Sfactory(this,"GlobalFunctionDefinition_2",new SCreator(GlobalFunctionDefinition_2_factory));
new Sfactory(this,"IncrementDecrementExpression_7",new SCreator(IncrementDecrementExpression_7_factory));
new Sfactory(this,"IncrementDecrementExpression_8",new SCreator(IncrementDecrementExpression_8_factory));
new Sfactory(this,"Assignment_1",new SCreator(Assignment_1_factory));
new Sfactory(this,"Event_21",new SCreator(Event_21_factory));
new Sfactory(this,"Event_22",new SCreator(Event_22_factory));
new Sfactory(this,"CompoundStatement",new SCreator(CompoundStatement_factory));
new Sfactory(this,"RotationConstant_1",new SCreator(RotationConstant_1_factory));
new Sfactory(this,"SimpleAssignment_3",new SCreator(SimpleAssignment_3_factory));
new Sfactory(this,"SimpleAssignment_4",new SCreator(SimpleAssignment_4_factory));
new Sfactory(this,"Statement_1",new SCreator(Statement_1_factory));
new Sfactory(this,"Statement_2",new SCreator(Statement_2_factory));
new Sfactory(this,"Statement_3",new SCreator(Statement_3_factory));
new Sfactory(this,"Statement_4",new SCreator(Statement_4_factory));
new Sfactory(this,"Statement_5",new SCreator(Statement_5_factory));
new Sfactory(this,"Statement_6",new SCreator(Statement_6_factory));
new Sfactory(this,"Statement_7",new SCreator(Statement_7_factory));
new Sfactory(this,"Statement_8",new SCreator(Statement_8_factory));
new Sfactory(this,"Statement_9",new SCreator(Statement_9_factory));
new Sfactory(this,"ExpressionArgument",new SCreator(ExpressionArgument_factory));
new Sfactory(this,"GlobalFunctionDefinition",new SCreator(GlobalFunctionDefinition_factory));
new Sfactory(this,"State_1",new SCreator(State_1_factory));
new Sfactory(this,"DoWhileStatement",new SCreator(DoWhileStatement_factory));
new Sfactory(this,"ParenthesisExpression_1",new SCreator(ParenthesisExpression_1_factory));
new Sfactory(this,"ParenthesisExpression_2",new SCreator(ParenthesisExpression_2_factory));
new Sfactory(this,"StateBody",new SCreator(StateBody_factory));
new Sfactory(this,"Event_7",new SCreator(Event_7_factory));
new Sfactory(this,"Event_8",new SCreator(Event_8_factory));
new Sfactory(this,"IncrementDecrementExpression_1",new SCreator(IncrementDecrementExpression_1_factory));
new Sfactory(this,"IncrementDecrementExpression_3",new SCreator(IncrementDecrementExpression_3_factory));
new Sfactory(this,"IncrementDecrementExpression_4",new SCreator(IncrementDecrementExpression_4_factory));
new Sfactory(this,"IncrementDecrementExpression_6",new SCreator(IncrementDecrementExpression_6_factory));
new Sfactory(this,"StateEvent",new SCreator(StateEvent_factory));
new Sfactory(this,"Event_20",new SCreator(Event_20_factory));
new Sfactory(this,"Event_23",new SCreator(Event_23_factory));
new Sfactory(this,"Event_24",new SCreator(Event_24_factory));
new Sfactory(this,"Event_26",new SCreator(Event_26_factory));
new Sfactory(this,"SimpleAssignment_10",new SCreator(SimpleAssignment_10_factory));
new Sfactory(this,"Event",new SCreator(Event_factory));
new Sfactory(this,"SimpleAssignment_14",new SCreator(SimpleAssignment_14_factory));
new Sfactory(this,"SimpleAssignment_16",new SCreator(SimpleAssignment_16_factory));
new Sfactory(this,"Statement_10",new SCreator(Statement_10_factory));
new Sfactory(this,"Statement_11",new SCreator(Statement_11_factory));
new Sfactory(this,"SimpleAssignment",new SCreator(SimpleAssignment_factory));
new Sfactory(this,"TypecastExpression",new SCreator(TypecastExpression_factory));
new Sfactory(this,"Event_15",new SCreator(Event_15_factory));
new Sfactory(this,"Event_16",new SCreator(Event_16_factory));
new Sfactory(this,"Event_32",new SCreator(Event_32_factory));
new Sfactory(this,"SimpleAssignment_20",new SCreator(SimpleAssignment_20_factory));
new Sfactory(this,"SimpleAssignment_24",new SCreator(SimpleAssignment_24_factory));
new Sfactory(this,"SimpleAssignment_1",new SCreator(SimpleAssignment_1_factory));
new Sfactory(this,"SimpleAssignment_2",new SCreator(SimpleAssignment_2_factory));
new Sfactory(this,"BinaryExpression",new SCreator(BinaryExpression_factory));
new Sfactory(this,"FunctionCallExpression",new SCreator(FunctionCallExpression_factory));
new Sfactory(this,"SimpleAssignment_6",new SCreator(SimpleAssignment_6_factory));
new Sfactory(this,"StateBody_1",new SCreator(StateBody_1_factory));
new Sfactory(this,"StatementList_2",new SCreator(StatementList_2_factory));
new Sfactory(this,"SimpleAssignment_9",new SCreator(SimpleAssignment_9_factory));
new Sfactory(this,"BinaryExpression_15",new SCreator(BinaryExpression_15_factory));
new Sfactory(this,"BinaryExpression_16",new SCreator(BinaryExpression_16_factory));
new Sfactory(this,"BinaryExpression_17",new SCreator(BinaryExpression_17_factory));
new Sfactory(this,"BinaryExpression_18",new SCreator(BinaryExpression_18_factory));
new Sfactory(this,"Event_25",new SCreator(Event_25_factory));
new Sfactory(this,"Event_9",new SCreator(Event_9_factory));
new Sfactory(this,"Statement",new SCreator(Statement_factory));
new Sfactory(this,"JumpStatement",new SCreator(JumpStatement_factory));
new Sfactory(this,"BinaryExpression_11",new SCreator(BinaryExpression_11_factory));
new Sfactory(this,"BinaryExpression_12",new SCreator(BinaryExpression_12_factory));
new Sfactory(this,"BinaryExpression_13",new SCreator(BinaryExpression_13_factory));
new Sfactory(this,"BinaryExpression_14",new SCreator(BinaryExpression_14_factory));
new Sfactory(this,"BinaryExpression_6",new SCreator(BinaryExpression_6_factory));
new Sfactory(this,"BinaryExpression_7",new SCreator(BinaryExpression_7_factory));
new Sfactory(this,"BinaryExpression_8",new SCreator(BinaryExpression_8_factory));
new Sfactory(this,"ArgumentList",new SCreator(ArgumentList_factory));
new Sfactory(this,"Event_10",new SCreator(Event_10_factory));
new Sfactory(this,"ConstantExpression_1",new SCreator(ConstantExpression_1_factory));
new Sfactory(this,"Event_12",new SCreator(Event_12_factory));
new Sfactory(this,"Event_14",new SCreator(Event_14_factory));
new Sfactory(this,"Event_17",new SCreator(Event_17_factory));
new Sfactory(this,"Event_18",new SCreator(Event_18_factory));
new Sfactory(this,"Event_19",new SCreator(Event_19_factory));
new Sfactory(this,"BinaryExpression_10",new SCreator(BinaryExpression_10_factory));
new Sfactory(this,"StateEvent_1",new SCreator(StateEvent_1_factory));
new Sfactory(this,"VectorConstant",new SCreator(VectorConstant_factory));
new Sfactory(this,"TypecastExpression_4",new SCreator(TypecastExpression_4_factory));
new Sfactory(this,"TypecastExpression_6",new SCreator(TypecastExpression_6_factory));
new Sfactory(this,"TypecastExpression_7",new SCreator(TypecastExpression_7_factory));
new Sfactory(this,"FunctionCall",new SCreator(FunctionCall_factory));
new Sfactory(this,"Event_27",new SCreator(Event_27_factory));
new Sfactory(this,"Event_28",new SCreator(Event_28_factory));
new Sfactory(this,"Event_29",new SCreator(Event_29_factory));
new Sfactory(this,"ListConstant_1",new SCreator(ListConstant_1_factory));
new Sfactory(this,"Event_6",new SCreator(Event_6_factory));
new Sfactory(this,"Declaration_1",new SCreator(Declaration_1_factory));
new Sfactory(this,"SimpleAssignment_7",new SCreator(SimpleAssignment_7_factory));
new Sfactory(this,"ForLoop",new SCreator(ForLoop_factory));
new Sfactory(this,"Event_30",new SCreator(Event_30_factory));
new Sfactory(this,"Event_31",new SCreator(Event_31_factory));
new Sfactory(this,"Event_33",new SCreator(Event_33_factory));
new Sfactory(this,"GlobalFunctionDefinition_1",new SCreator(GlobalFunctionDefinition_1_factory));
new Sfactory(this,"JumpLabel_1",new SCreator(JumpLabel_1_factory));
new Sfactory(this,"IfStatement",new SCreator(IfStatement_factory));
new Sfactory(this,"ForLoopStatement_1",new SCreator(ForLoopStatement_1_factory));
new Sfactory(this,"ForLoopStatement_2",new SCreator(ForLoopStatement_2_factory));
new Sfactory(this,"ForLoopStatement_3",new SCreator(ForLoopStatement_3_factory));
new Sfactory(this,"ArgumentDeclarationList_4",new SCreator(ArgumentDeclarationList_4_factory));
new Sfactory(this,"ArgumentDeclarationList_5",new SCreator(ArgumentDeclarationList_5_factory));
new Sfactory(this,"WhileStatement",new SCreator(WhileStatement_factory));
new Sfactory(this,"ForLoop_1",new SCreator(ForLoop_1_factory));
new Sfactory(this,"Constant_2",new SCreator(Constant_2_factory));
new Sfactory(this,"StatementList",new SCreator(StatementList_factory));
new Sfactory(this,"StateBody_2",new SCreator(StateBody_2_factory));
new Sfactory(this,"WhileStatement_2",new SCreator(WhileStatement_2_factory));
new Sfactory(this,"IdentExpression_1",new SCreator(IdentExpression_1_factory));
new Sfactory(this,"States",new SCreator(States_factory));
}
public static object ExpressionArgument_1_factory(Parser yyp) { return new ExpressionArgument_1(yyp); }
public static object SimpleAssignment_8_factory(Parser yyp) { return new SimpleAssignment_8(yyp); }
public static object StatementList_1_factory(Parser yyp) { return new StatementList_1(yyp); }
public static object StateChange_1_factory(Parser yyp) { return new StateChange_1(yyp); }
public static object StateChange_2_factory(Parser yyp) { return new StateChange_2(yyp); }
public static object Declaration_factory(Parser yyp) { return new Declaration(yyp); }
public static object IdentExpression_factory(Parser yyp) { return new IdentExpression(yyp); }
public static object error_factory(Parser yyp) { return new error(yyp); }
public static object BinaryExpression_2_factory(Parser yyp) { return new BinaryExpression_2(yyp); }
public static object BinaryExpression_3_factory(Parser yyp) { return new BinaryExpression_3(yyp); }
public static object BinaryExpression_4_factory(Parser yyp) { return new BinaryExpression_4(yyp); }
public static object BinaryExpression_5_factory(Parser yyp) { return new BinaryExpression_5(yyp); }
public static object ReturnStatement_2_factory(Parser yyp) { return new ReturnStatement_2(yyp); }
public static object SimpleAssignment_19_factory(Parser yyp) { return new SimpleAssignment_19(yyp); }
public static object BinaryExpression_9_factory(Parser yyp) { return new BinaryExpression_9(yyp); }
public static object VectorConstant_1_factory(Parser yyp) { return new VectorConstant_1(yyp); }
public static object ParenthesisExpression_factory(Parser yyp) { return new ParenthesisExpression(yyp); }
public static object UnaryExpression_factory(Parser yyp) { return new UnaryExpression(yyp); }
public static object IdentDotExpression_1_factory(Parser yyp) { return new IdentDotExpression_1(yyp); }
public static object ArgumentList_4_factory(Parser yyp) { return new ArgumentList_4(yyp); }
public static object Typename_factory(Parser yyp) { return new Typename(yyp); }
public static object IfStatement_1_factory(Parser yyp) { return new IfStatement_1(yyp); }
public static object Assignment_factory(Parser yyp) { return new Assignment(yyp); }
public static object CompoundStatement_1_factory(Parser yyp) { return new CompoundStatement_1(yyp); }
public static object CompoundStatement_2_factory(Parser yyp) { return new CompoundStatement_2(yyp); }
public static object ReturnStatement_1_factory(Parser yyp) { return new ReturnStatement_1(yyp); }
public static object IdentDotExpression_factory(Parser yyp) { return new IdentDotExpression(yyp); }
public static object Argument_factory(Parser yyp) { return new Argument(yyp); }
public static object State_2_factory(Parser yyp) { return new State_2(yyp); }
public static object WhileStatement_1_factory(Parser yyp) { return new WhileStatement_1(yyp); }
public static object GlobalDefinitions_3_factory(Parser yyp) { return new GlobalDefinitions_3(yyp); }
public static object GlobalDefinitions_4_factory(Parser yyp) { return new GlobalDefinitions_4(yyp); }
public static object Event_1_factory(Parser yyp) { return new Event_1(yyp); }
public static object ListConstant_factory(Parser yyp) { return new ListConstant(yyp); }
public static object Event_3_factory(Parser yyp) { return new Event_3(yyp); }
public static object Event_4_factory(Parser yyp) { return new Event_4(yyp); }
public static object Event_5_factory(Parser yyp) { return new Event_5(yyp); }
public static object SimpleAssignment_5_factory(Parser yyp) { return new SimpleAssignment_5(yyp); }
public static object Typename_1_factory(Parser yyp) { return new Typename_1(yyp); }
public static object Typename_2_factory(Parser yyp) { return new Typename_2(yyp); }
public static object Typename_3_factory(Parser yyp) { return new Typename_3(yyp); }
public static object Typename_4_factory(Parser yyp) { return new Typename_4(yyp); }
public static object Typename_5_factory(Parser yyp) { return new Typename_5(yyp); }
public static object Typename_6_factory(Parser yyp) { return new Typename_6(yyp); }
public static object Typename_7_factory(Parser yyp) { return new Typename_7(yyp); }
public static object ArgumentDeclarationList_factory(Parser yyp) { return new ArgumentDeclarationList(yyp); }
public static object ConstantExpression_factory(Parser yyp) { return new ConstantExpression(yyp); }
public static object LSLProgramRoot_1_factory(Parser yyp) { return new LSLProgramRoot_1(yyp); }
public static object LSLProgramRoot_2_factory(Parser yyp) { return new LSLProgramRoot_2(yyp); }
public static object States_1_factory(Parser yyp) { return new States_1(yyp); }
public static object States_2_factory(Parser yyp) { return new States_2(yyp); }
public static object FunctionCallExpression_1_factory(Parser yyp) { return new FunctionCallExpression_1(yyp); }
public static object ForLoopStatement_factory(Parser yyp) { return new ForLoopStatement(yyp); }
public static object DoWhileStatement_1_factory(Parser yyp) { return new DoWhileStatement_1(yyp); }
public static object DoWhileStatement_2_factory(Parser yyp) { return new DoWhileStatement_2(yyp); }
public static object ForLoopStatement_4_factory(Parser yyp) { return new ForLoopStatement_4(yyp); }
public static object SimpleAssignment_11_factory(Parser yyp) { return new SimpleAssignment_11(yyp); }
public static object SimpleAssignment_12_factory(Parser yyp) { return new SimpleAssignment_12(yyp); }
public static object SimpleAssignment_13_factory(Parser yyp) { return new SimpleAssignment_13(yyp); }
public static object JumpLabel_factory(Parser yyp) { return new JumpLabel(yyp); }
public static object SimpleAssignment_15_factory(Parser yyp) { return new SimpleAssignment_15(yyp); }
public static object SimpleAssignment_17_factory(Parser yyp) { return new SimpleAssignment_17(yyp); }
public static object SimpleAssignment_18_factory(Parser yyp) { return new SimpleAssignment_18(yyp); }
public static object JumpStatement_1_factory(Parser yyp) { return new JumpStatement_1(yyp); }
public static object GlobalDefinitions_factory(Parser yyp) { return new GlobalDefinitions(yyp); }
public static object FunctionCall_1_factory(Parser yyp) { return new FunctionCall_1(yyp); }
public static object ArgumentList_3_factory(Parser yyp) { return new ArgumentList_3(yyp); }
public static object Assignment_2_factory(Parser yyp) { return new Assignment_2(yyp); }
public static object TypecastExpression_1_factory(Parser yyp) { return new TypecastExpression_1(yyp); }
public static object SimpleAssignment_21_factory(Parser yyp) { return new SimpleAssignment_21(yyp); }
public static object SimpleAssignment_22_factory(Parser yyp) { return new SimpleAssignment_22(yyp); }
public static object SimpleAssignment_23_factory(Parser yyp) { return new SimpleAssignment_23(yyp); }
public static object TypecastExpression_9_factory(Parser yyp) { return new TypecastExpression_9(yyp); }
public static object ArgumentDeclarationList_1_factory(Parser yyp) { return new ArgumentDeclarationList_1(yyp); }
public static object ArgumentDeclarationList_2_factory(Parser yyp) { return new ArgumentDeclarationList_2(yyp); }
public static object ArgumentDeclarationList_3_factory(Parser yyp) { return new ArgumentDeclarationList_3(yyp); }
public static object GlobalDefinitions_1_factory(Parser yyp) { return new GlobalDefinitions_1(yyp); }
public static object GlobalDefinitions_2_factory(Parser yyp) { return new GlobalDefinitions_2(yyp); }
public static object IncrementDecrementExpression_factory(Parser yyp) { return new IncrementDecrementExpression(yyp); }
public static object GlobalVariableDeclaration_factory(Parser yyp) { return new GlobalVariableDeclaration(yyp); }
public static object Event_11_factory(Parser yyp) { return new Event_11(yyp); }
public static object TypecastExpression_2_factory(Parser yyp) { return new TypecastExpression_2(yyp); }
public static object TypecastExpression_3_factory(Parser yyp) { return new TypecastExpression_3(yyp); }
public static object TypecastExpression_5_factory(Parser yyp) { return new TypecastExpression_5(yyp); }
public static object TypecastExpression_8_factory(Parser yyp) { return new TypecastExpression_8(yyp); }
public static object Constant_1_factory(Parser yyp) { return new Constant_1(yyp); }
public static object Expression_factory(Parser yyp) { return new Expression(yyp); }
public static object Constant_3_factory(Parser yyp) { return new Constant_3(yyp); }
public static object Constant_4_factory(Parser yyp) { return new Constant_4(yyp); }
public static object BinaryExpression_1_factory(Parser yyp) { return new BinaryExpression_1(yyp); }
public static object IfStatement_2_factory(Parser yyp) { return new IfStatement_2(yyp); }
public static object IfStatement_3_factory(Parser yyp) { return new IfStatement_3(yyp); }
public static object IfStatement_4_factory(Parser yyp) { return new IfStatement_4(yyp); }
public static object ReturnStatement_factory(Parser yyp) { return new ReturnStatement(yyp); }
public static object Event_2_factory(Parser yyp) { return new Event_2(yyp); }
public static object RotationConstant_factory(Parser yyp) { return new RotationConstant(yyp); }
public static object Statement_12_factory(Parser yyp) { return new Statement_12(yyp); }
public static object Statement_13_factory(Parser yyp) { return new Statement_13(yyp); }
public static object UnaryExpression_1_factory(Parser yyp) { return new UnaryExpression_1(yyp); }
public static object UnaryExpression_2_factory(Parser yyp) { return new UnaryExpression_2(yyp); }
public static object UnaryExpression_3_factory(Parser yyp) { return new UnaryExpression_3(yyp); }
public static object ArgumentList_1_factory(Parser yyp) { return new ArgumentList_1(yyp); }
public static object ArgumentList_2_factory(Parser yyp) { return new ArgumentList_2(yyp); }
public static object Constant_factory(Parser yyp) { return new Constant(yyp); }
public static object State_factory(Parser yyp) { return new State(yyp); }
public static object Event_13_factory(Parser yyp) { return new Event_13(yyp); }
public static object LSLProgramRoot_factory(Parser yyp) { return new LSLProgramRoot(yyp); }
public static object StateChange_factory(Parser yyp) { return new StateChange(yyp); }
public static object IncrementDecrementExpression_2_factory(Parser yyp) { return new IncrementDecrementExpression_2(yyp); }
public static object GlobalVariableDeclaration_1_factory(Parser yyp) { return new GlobalVariableDeclaration_1(yyp); }
public static object GlobalVariableDeclaration_2_factory(Parser yyp) { return new GlobalVariableDeclaration_2(yyp); }
public static object IncrementDecrementExpression_5_factory(Parser yyp) { return new IncrementDecrementExpression_5(yyp); }
public static object GlobalFunctionDefinition_2_factory(Parser yyp) { return new GlobalFunctionDefinition_2(yyp); }
public static object IncrementDecrementExpression_7_factory(Parser yyp) { return new IncrementDecrementExpression_7(yyp); }
public static object IncrementDecrementExpression_8_factory(Parser yyp) { return new IncrementDecrementExpression_8(yyp); }
public static object Assignment_1_factory(Parser yyp) { return new Assignment_1(yyp); }
public static object Event_21_factory(Parser yyp) { return new Event_21(yyp); }
public static object Event_22_factory(Parser yyp) { return new Event_22(yyp); }
public static object CompoundStatement_factory(Parser yyp) { return new CompoundStatement(yyp); }
public static object RotationConstant_1_factory(Parser yyp) { return new RotationConstant_1(yyp); }
public static object SimpleAssignment_3_factory(Parser yyp) { return new SimpleAssignment_3(yyp); }
public static object SimpleAssignment_4_factory(Parser yyp) { return new SimpleAssignment_4(yyp); }
public static object Statement_1_factory(Parser yyp) { return new Statement_1(yyp); }
public static object Statement_2_factory(Parser yyp) { return new Statement_2(yyp); }
public static object Statement_3_factory(Parser yyp) { return new Statement_3(yyp); }
public static object Statement_4_factory(Parser yyp) { return new Statement_4(yyp); }
public static object Statement_5_factory(Parser yyp) { return new Statement_5(yyp); }
public static object Statement_6_factory(Parser yyp) { return new Statement_6(yyp); }
public static object Statement_7_factory(Parser yyp) { return new Statement_7(yyp); }
public static object Statement_8_factory(Parser yyp) { return new Statement_8(yyp); }
public static object Statement_9_factory(Parser yyp) { return new Statement_9(yyp); }
public static object ExpressionArgument_factory(Parser yyp) { return new ExpressionArgument(yyp); }
public static object GlobalFunctionDefinition_factory(Parser yyp) { return new GlobalFunctionDefinition(yyp); }
public static object State_1_factory(Parser yyp) { return new State_1(yyp); }
public static object DoWhileStatement_factory(Parser yyp) { return new DoWhileStatement(yyp); }
public static object ParenthesisExpression_1_factory(Parser yyp) { return new ParenthesisExpression_1(yyp); }
public static object ParenthesisExpression_2_factory(Parser yyp) { return new ParenthesisExpression_2(yyp); }
public static object StateBody_factory(Parser yyp) { return new StateBody(yyp); }
public static object Event_7_factory(Parser yyp) { return new Event_7(yyp); }
public static object Event_8_factory(Parser yyp) { return new Event_8(yyp); }
public static object IncrementDecrementExpression_1_factory(Parser yyp) { return new IncrementDecrementExpression_1(yyp); }
public static object IncrementDecrementExpression_3_factory(Parser yyp) { return new IncrementDecrementExpression_3(yyp); }
public static object IncrementDecrementExpression_4_factory(Parser yyp) { return new IncrementDecrementExpression_4(yyp); }
public static object IncrementDecrementExpression_6_factory(Parser yyp) { return new IncrementDecrementExpression_6(yyp); }
public static object StateEvent_factory(Parser yyp) { return new StateEvent(yyp); }
public static object Event_20_factory(Parser yyp) { return new Event_20(yyp); }
public static object Event_23_factory(Parser yyp) { return new Event_23(yyp); }
public static object Event_24_factory(Parser yyp) { return new Event_24(yyp); }
public static object Event_26_factory(Parser yyp) { return new Event_26(yyp); }
public static object SimpleAssignment_10_factory(Parser yyp) { return new SimpleAssignment_10(yyp); }
public static object Event_factory(Parser yyp) { return new Event(yyp); }
public static object SimpleAssignment_14_factory(Parser yyp) { return new SimpleAssignment_14(yyp); }
public static object SimpleAssignment_16_factory(Parser yyp) { return new SimpleAssignment_16(yyp); }
public static object Statement_10_factory(Parser yyp) { return new Statement_10(yyp); }
public static object Statement_11_factory(Parser yyp) { return new Statement_11(yyp); }
public static object SimpleAssignment_factory(Parser yyp) { return new SimpleAssignment(yyp); }
public static object TypecastExpression_factory(Parser yyp) { return new TypecastExpression(yyp); }
public static object Event_15_factory(Parser yyp) { return new Event_15(yyp); }
public static object Event_16_factory(Parser yyp) { return new Event_16(yyp); }
public static object Event_32_factory(Parser yyp) { return new Event_32(yyp); }
public static object SimpleAssignment_20_factory(Parser yyp) { return new SimpleAssignment_20(yyp); }
public static object SimpleAssignment_24_factory(Parser yyp) { return new SimpleAssignment_24(yyp); }
public static object SimpleAssignment_1_factory(Parser yyp) { return new SimpleAssignment_1(yyp); }
public static object SimpleAssignment_2_factory(Parser yyp) { return new SimpleAssignment_2(yyp); }
public static object BinaryExpression_factory(Parser yyp) { return new BinaryExpression(yyp); }
public static object FunctionCallExpression_factory(Parser yyp) { return new FunctionCallExpression(yyp); }
public static object SimpleAssignment_6_factory(Parser yyp) { return new SimpleAssignment_6(yyp); }
public static object StateBody_1_factory(Parser yyp) { return new StateBody_1(yyp); }
public static object StatementList_2_factory(Parser yyp) { return new StatementList_2(yyp); }
public static object SimpleAssignment_9_factory(Parser yyp) { return new SimpleAssignment_9(yyp); }
public static object BinaryExpression_15_factory(Parser yyp) { return new BinaryExpression_15(yyp); }
public static object BinaryExpression_16_factory(Parser yyp) { return new BinaryExpression_16(yyp); }
public static object BinaryExpression_17_factory(Parser yyp) { return new BinaryExpression_17(yyp); }
public static object BinaryExpression_18_factory(Parser yyp) { return new BinaryExpression_18(yyp); }
public static object Event_25_factory(Parser yyp) { return new Event_25(yyp); }
public static object Event_9_factory(Parser yyp) { return new Event_9(yyp); }
public static object Statement_factory(Parser yyp) { return new Statement(yyp); }
public static object JumpStatement_factory(Parser yyp) { return new JumpStatement(yyp); }
public static object BinaryExpression_11_factory(Parser yyp) { return new BinaryExpression_11(yyp); }
public static object BinaryExpression_12_factory(Parser yyp) { return new BinaryExpression_12(yyp); }
public static object BinaryExpression_13_factory(Parser yyp) { return new BinaryExpression_13(yyp); }
public static object BinaryExpression_14_factory(Parser yyp) { return new BinaryExpression_14(yyp); }
public static object BinaryExpression_6_factory(Parser yyp) { return new BinaryExpression_6(yyp); }
public static object BinaryExpression_7_factory(Parser yyp) { return new BinaryExpression_7(yyp); }
public static object BinaryExpression_8_factory(Parser yyp) { return new BinaryExpression_8(yyp); }
public static object ArgumentList_factory(Parser yyp) { return new ArgumentList(yyp); }
public static object Event_10_factory(Parser yyp) { return new Event_10(yyp); }
public static object ConstantExpression_1_factory(Parser yyp) { return new ConstantExpression_1(yyp); }
public static object Event_12_factory(Parser yyp) { return new Event_12(yyp); }
public static object Event_14_factory(Parser yyp) { return new Event_14(yyp); }
public static object Event_17_factory(Parser yyp) { return new Event_17(yyp); }
public static object Event_18_factory(Parser yyp) { return new Event_18(yyp); }
public static object Event_19_factory(Parser yyp) { return new Event_19(yyp); }
public static object BinaryExpression_10_factory(Parser yyp) { return new BinaryExpression_10(yyp); }
public static object StateEvent_1_factory(Parser yyp) { return new StateEvent_1(yyp); }
public static object VectorConstant_factory(Parser yyp) { return new VectorConstant(yyp); }
public static object TypecastExpression_4_factory(Parser yyp) { return new TypecastExpression_4(yyp); }
public static object TypecastExpression_6_factory(Parser yyp) { return new TypecastExpression_6(yyp); }
public static object TypecastExpression_7_factory(Parser yyp) { return new TypecastExpression_7(yyp); }
public static object FunctionCall_factory(Parser yyp) { return new FunctionCall(yyp); }
public static object Event_27_factory(Parser yyp) { return new Event_27(yyp); }
public static object Event_28_factory(Parser yyp) { return new Event_28(yyp); }
public static object Event_29_factory(Parser yyp) { return new Event_29(yyp); }
public static object ListConstant_1_factory(Parser yyp) { return new ListConstant_1(yyp); }
public static object Event_6_factory(Parser yyp) { return new Event_6(yyp); }
public static object Declaration_1_factory(Parser yyp) { return new Declaration_1(yyp); }
public static object SimpleAssignment_7_factory(Parser yyp) { return new SimpleAssignment_7(yyp); }
public static object ForLoop_factory(Parser yyp) { return new ForLoop(yyp); }
public static object Event_30_factory(Parser yyp) { return new Event_30(yyp); }
public static object Event_31_factory(Parser yyp) { return new Event_31(yyp); }
public static object Event_33_factory(Parser yyp) { return new Event_33(yyp); }
public static object GlobalFunctionDefinition_1_factory(Parser yyp) { return new GlobalFunctionDefinition_1(yyp); }
public static object JumpLabel_1_factory(Parser yyp) { return new JumpLabel_1(yyp); }
public static object IfStatement_factory(Parser yyp) { return new IfStatement(yyp); }
public static object ForLoopStatement_1_factory(Parser yyp) { return new ForLoopStatement_1(yyp); }
public static object ForLoopStatement_2_factory(Parser yyp) { return new ForLoopStatement_2(yyp); }
public static object ForLoopStatement_3_factory(Parser yyp) { return new ForLoopStatement_3(yyp); }
public static object ArgumentDeclarationList_4_factory(Parser yyp) { return new ArgumentDeclarationList_4(yyp); }
public static object ArgumentDeclarationList_5_factory(Parser yyp) { return new ArgumentDeclarationList_5(yyp); }
public static object WhileStatement_factory(Parser yyp) { return new WhileStatement(yyp); }
public static object ForLoop_1_factory(Parser yyp) { return new ForLoop_1(yyp); }
public static object Constant_2_factory(Parser yyp) { return new Constant_2(yyp); }
public static object StatementList_factory(Parser yyp) { return new StatementList(yyp); }
public static object StateBody_2_factory(Parser yyp) { return new StateBody_2(yyp); }
public static object WhileStatement_2_factory(Parser yyp) { return new WhileStatement_2(yyp); }
public static object IdentExpression_1_factory(Parser yyp) { return new IdentExpression_1(yyp); }
public static object States_factory(Parser yyp) { return new States(yyp); }
}
public class LSLSyntax
: Parser {
public LSLSyntax
():base(new yyLSLSyntax
(),new LSLTokens()) {}
public LSLSyntax
(YyParser syms):base(syms,new LSLTokens()) {}
public LSLSyntax
(YyParser syms,ErrorHandler erh):base(syms,new LSLTokens(erh)) {}

 }
}
