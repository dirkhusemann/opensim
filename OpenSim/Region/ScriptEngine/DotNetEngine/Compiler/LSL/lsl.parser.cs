/*
 * Copyright (c) Contributors, http://opensimulator.org/
 * See CONTRIBUTORS.TXT for a full list of copyright holders.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the OpenSim Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;using Tools;
namespace OpenSim.Region.ScriptEngine.DotNetEngine.Compiler.LSL {
//%+LSLProgramRoot+95
public class LSLProgramRoot : SYMBOL{
 public  LSLProgramRoot (Parser yyp, States  s ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}
 public  LSLProgramRoot (Parser yyp, GlobalDefinitions  gd , States  s ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}

public override string yyname { get { return "LSLProgramRoot"; }}
public override int yynum { get { return 95; }}
public LSLProgramRoot(Parser yyp):base(yyp){}}
//%+GlobalDefinitions+96
public class GlobalDefinitions : SYMBOL{
 public  GlobalDefinitions (Parser yyp, GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ kids . Add ( gfd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gfd );
}

public override string yyname { get { return "GlobalDefinitions"; }}
public override int yynum { get { return 96; }}
public GlobalDefinitions(Parser yyp):base(yyp){}}
//%+GlobalVariableDeclaration+97
public class GlobalVariableDeclaration : SYMBOL{
 public  GlobalVariableDeclaration (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  GlobalVariableDeclaration (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}

public override string yyname { get { return "GlobalVariableDeclaration"; }}
public override int yynum { get { return 97; }}
public GlobalVariableDeclaration(Parser yyp):base(yyp){}}
//%+GlobalFunctionDefinition+98
public class GlobalFunctionDefinition : SYMBOL{
 private  string  m_returnType ;
 private  string  m_name ;
 public  GlobalFunctionDefinition (Parser yyp, string  returnType , string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_returnType = returnType ;
 m_name = name ;
 kids . Add ( adl );
 kids . Add ( cs );
}
 public  string  ReturnType { get { return  m_returnType ;
}
 set { m_returnType = value ;
}
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "GlobalFunctionDefinition"; }}
public override int yynum { get { return 98; }}
public GlobalFunctionDefinition(Parser yyp):base(yyp){}}
//%+States+99
public class States : SYMBOL{
 public  States (Parser yyp, State  ds ):base(((LSLSyntax
)yyp)){ kids . Add ( ds );
}
 public  States (Parser yyp, States  s , State  us ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
 kids . Add ( us );
}

public override string yyname { get { return "States"; }}
public override int yynum { get { return 99; }}
public States(Parser yyp):base(yyp){}}
//%+State+100
public class State : SYMBOL{
 private  string  m_name ;
 public  State (Parser yyp, string  name , StateBody  sb ):base(((LSLSyntax
)yyp)){ m_name = name ;
 while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
}
 public  override  string  ToString (){ return "STATE<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "State"; }}
public override int yynum { get { return 100; }}
public State(Parser yyp):base(yyp){}}
//%+StateBody+101
public class StateBody : SYMBOL{
 public  StateBody (Parser yyp, StateBody  sb , StateEvent  se ):base(((LSLSyntax
)yyp)){ while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
 kids . Add ( se );
}
 public  StateBody (Parser yyp, StateEvent  se ):base(((LSLSyntax
)yyp)){ kids . Add ( se );
}

public override string yyname { get { return "StateBody"; }}
public override int yynum { get { return 101; }}
public StateBody(Parser yyp):base(yyp){}}
//%+StateEvent+102
public class StateEvent : SYMBOL{
 private  string  m_name ;
 public  StateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 kids . Add ( cs );
}
 public  StateEvent (Parser yyp, string  name , ArgumentDeclarationList  dal , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 if (0< dal . kids . Count ) kids . Add ( dal );
 kids . Add ( cs );
}
 public  override  string  ToString (){ return "EVENT<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "StateEvent"; }}
public override int yynum { get { return 102; }}
public StateEvent(Parser yyp):base(yyp){}}
//%+ArgumentDeclarationList+103
public class ArgumentDeclarationList : SYMBOL{
 public  ArgumentDeclarationList (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  ArgumentDeclarationList (Parser yyp, ArgumentDeclarationList  adl , Declaration  d ):base(((LSLSyntax
)yyp)){ while (0< adl . kids . Count ) kids . Add ( adl . kids . Pop ());
 kids . Add ( d );
}

public override string yyname { get { return "ArgumentDeclarationList"; }}
public override int yynum { get { return 103; }}
public ArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+Declaration+104
public class Declaration : SYMBOL{
 private  string  m_datatype ;
 private  string  m_id ;
 public  Declaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp)){ m_datatype = type ;
 m_id = id ;
}
 public  override  string  ToString (){ return "Declaration<"+ m_datatype +":"+ m_id +">";
}
 public  string  Datatype { get { return  m_datatype ;
}
 set { m_datatype = value ;
}
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "Declaration"; }}
public override int yynum { get { return 104; }}
public Declaration(Parser yyp):base(yyp){}}
//%+Typename+105
public class Typename : SYMBOL{
 public  string  yytext ;
 public  Typename (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Typename"; }}
public override int yynum { get { return 105; }}
public Typename(Parser yyp):base(yyp){}}
//%+Event+106
public class Event : SYMBOL{
 public  string  yytext ;
 public  Event (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Event"; }}
public override int yynum { get { return 106; }}
public Event(Parser yyp):base(yyp){}}
//%+CompoundStatement+107
public class CompoundStatement : SYMBOL{
 public  CompoundStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  CompoundStatement (Parser yyp, StatementList  sl ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
}

public override string yyname { get { return "CompoundStatement"; }}
public override int yynum { get { return 107; }}
}
//%+StatementList+108
public class StatementList : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if ( s . kids . Top  is  IfStatement || s . kids . Top  is  WhileStatement || s . kids . Top  is  DoWhileStatement || s . kids . Top  is  ForLoop ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  StatementList (Parser yyp, Statement  s ):base(((LSLSyntax
)yyp)){ AddStatement ( s );
}
 public  StatementList (Parser yyp, StatementList  sl , Statement  s ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
 AddStatement ( s );
}

public override string yyname { get { return "StatementList"; }}
public override int yynum { get { return 108; }}
public StatementList(Parser yyp):base(yyp){}}
//%+Statement+109
public class Statement : SYMBOL{
 public  Statement (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  Statement (Parser yyp, CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ kids . Add ( cs );
}
 public  Statement (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}
 public  Statement (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}
 public  Statement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  Statement (Parser yyp, ReturnStatement  rs ):base(((LSLSyntax
)yyp)){ kids . Add ( rs );
}
 public  Statement (Parser yyp, StateChange  sc ):base(((LSLSyntax
)yyp)){ kids . Add ( sc );
}
 public  Statement (Parser yyp, IfStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, WhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, DoWhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, ForLoop  fl ):base(((LSLSyntax
)yyp)){ kids . Add ( fl );
}
 public  Statement (Parser yyp, JumpLabel  jl ):base(((LSLSyntax
)yyp)){ kids . Add ( jl );
}
 public  Statement (Parser yyp, JumpStatement  js ):base(((LSLSyntax
)yyp)){ kids . Add ( js );
}

public override string yyname { get { return "Statement"; }}
public override int yynum { get { return 109; }}
public Statement(Parser yyp):base(yyp){}}
//%+Assignment+110
public class Assignment : SYMBOL{
 private  string  m_assignmentType ;
 public  Assignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}
 public  string  AssignmentType { get { return  m_assignmentType ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_assignmentType +">";
}

public override string yyname { get { return "Assignment"; }}
public override int yynum { get { return 110; }}
public Assignment(Parser yyp):base(yyp){}}
//%+ReturnStatement+111
public class ReturnStatement : SYMBOL{
 public  ReturnStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  ReturnStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ReturnStatement"; }}
public override int yynum { get { return 111; }}
}
//%+JumpLabel+112
public class JumpLabel : SYMBOL{
 private  string  m_labelName ;
 public  JumpLabel (Parser yyp, string  labelName ):base(((LSLSyntax
)yyp)){ m_labelName = labelName ;
}
 public  string  LabelName { get { return  m_labelName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_labelName +">";
}

public override string yyname { get { return "JumpLabel"; }}
public override int yynum { get { return 112; }}
public JumpLabel(Parser yyp):base(yyp){}}
//%+JumpStatement+113
public class JumpStatement : SYMBOL{
 private  string  m_targetName ;
 public  JumpStatement (Parser yyp, string  targetName ):base(((LSLSyntax
)yyp)){ m_targetName = targetName ;
}
 public  string  TargetName { get { return  m_targetName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_targetName +">";
}

public override string yyname { get { return "JumpStatement"; }}
public override int yynum { get { return 113; }}
public JumpStatement(Parser yyp):base(yyp){}}
//%+StateChange+114
public class StateChange : SYMBOL{
 private  string  m_newState ;
 public  StateChange (Parser yyp, string  newState ):base(((LSLSyntax
)yyp)){ m_newState = newState ;
}
 public  string  NewState { get { return  m_newState ;
}
}

public override string yyname { get { return "StateChange"; }}
public override int yynum { get { return 114; }}
public StateChange(Parser yyp):base(yyp){}}
//%+IfStatement+115
public class IfStatement : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if ( s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  IfStatement (Parser yyp, Expression  e , Statement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
 AddStatement ( ifs );
}
 public  IfStatement (Parser yyp, Expression  e , Statement  ifs , Statement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
 AddStatement ( ifs );
 if ( es . kids . Top  is  IfStatement ) kids . Add ( es . kids . Pop ());
 else  AddStatement ( es );
}

public override string yyname { get { return "IfStatement"; }}
public override int yynum { get { return 115; }}
public IfStatement(Parser yyp):base(yyp){}}
//%+WhileStatement+116
public class WhileStatement : SYMBOL{
 public  WhileStatement (Parser yyp, Expression  e , Statement  s ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
 if ( s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}

public override string yyname { get { return "WhileStatement"; }}
public override int yynum { get { return 116; }}
public WhileStatement(Parser yyp):base(yyp){}}
//%+DoWhileStatement+117
public class DoWhileStatement : SYMBOL{
 public  DoWhileStatement (Parser yyp, Expression  e , Statement  s ):base(((LSLSyntax
)yyp)){ if ( s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
 kids . Add ( e );
}

public override string yyname { get { return "DoWhileStatement"; }}
public override int yynum { get { return 117; }}
public DoWhileStatement(Parser yyp):base(yyp){}}
//%+ForLoop+118
public class ForLoop : SYMBOL{
 public  ForLoop (Parser yyp, ForLoopStatement  flsa , Expression  e , ForLoopStatement  flsb , Statement  s ):base(((LSLSyntax
)yyp)){ kids . Add ( flsa );
 kids . Add ( e );
 kids . Add ( flsb );
 if ( s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}

public override string yyname { get { return "ForLoop"; }}
public override int yynum { get { return 118; }}
public ForLoop(Parser yyp):base(yyp){}}
//%+ForLoopStatement+119
public class ForLoopStatement : SYMBOL{
 public  ForLoopStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , Expression  e ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , Assignment  a ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( a );
}

public override string yyname { get { return "ForLoopStatement"; }}
public override int yynum { get { return 119; }}
public ForLoopStatement(Parser yyp):base(yyp){}}
//%+FunctionCall+120
public class FunctionCall : SYMBOL{
 private  string  m_id ;
 public  FunctionCall (Parser yyp, string  id , ArgumentList  al ):base(((LSLSyntax
)yyp)){ m_id = id ;
 kids . Add ( al );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_id +">";
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "FunctionCall"; }}
public override int yynum { get { return 120; }}
public FunctionCall(Parser yyp):base(yyp){}}
//%+ArgumentList+121
public class ArgumentList : SYMBOL{
 public  ArgumentList (Parser yyp, Argument  a ):base(((LSLSyntax
)yyp)){ AddArgument ( a );
}
 public  ArgumentList (Parser yyp, ArgumentList  al , Argument  a ):base(((LSLSyntax
)yyp)){ while (0< al . kids . Count ) kids . Add ( al . kids . Pop ());
 AddArgument ( a );
}
 private  void  AddArgument ( Argument  a ){ if ( a  is  ExpressionArgument ) while (0< a . kids . Count ) kids . Add ( a . kids . Pop ());
 else  kids . Add ( a );
}

public override string yyname { get { return "ArgumentList"; }}
public override int yynum { get { return 121; }}
public ArgumentList(Parser yyp):base(yyp){}}
//%+Argument+122
public class Argument : SYMBOL{
public override string yyname { get { return "Argument"; }}
public override int yynum { get { return 122; }}
public Argument(Parser yyp):base(yyp){}}
//%+ExpressionArgument+123
public class ExpressionArgument : Argument{
 public  ExpressionArgument (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ExpressionArgument"; }}
public override int yynum { get { return 123; }}
public ExpressionArgument(Parser yyp):base(yyp){}}
//%+Constant+124
public class Constant : SYMBOL{
 private  string  m_type ;
 private  string  m_val ;
 public  Constant (Parser yyp, string  type , string  val ):base(((LSLSyntax
)yyp)){ m_type = type ;
 m_val = val ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_type +":"+ m_val +">";
}
 public  string  Value { get { return  m_val ;
}
 set { m_val = value ;
}
}
 public  string  Type { get { return  m_type ;
}
 set { m_type = value ;
}
}

public override string yyname { get { return "Constant"; }}
public override int yynum { get { return 124; }}
public Constant(Parser yyp):base(yyp){}}
//%+VectorConstant+125
public class VectorConstant : Constant{
 public  VectorConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ ):base(((LSLSyntax
)yyp),"vector", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
}

public override string yyname { get { return "VectorConstant"; }}
public override int yynum { get { return 125; }}
public VectorConstant(Parser yyp):base(yyp){}}
//%+RotationConstant+126
public class RotationConstant : Constant{
 public  RotationConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ , Expression  valS ):base(((LSLSyntax
)yyp),"rotation", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
 kids . Add ( valS );
}

public override string yyname { get { return "RotationConstant"; }}
public override int yynum { get { return 126; }}
public RotationConstant(Parser yyp):base(yyp){}}
//%+ListConstant+127
public class ListConstant : Constant{
 public  ListConstant (Parser yyp, ArgumentList  al ):base(((LSLSyntax
)yyp),"list", null ){ kids . Add ( al );
}

public override string yyname { get { return "ListConstant"; }}
public override int yynum { get { return 127; }}
public ListConstant(Parser yyp):base(yyp){}}
//%+Expression+128
public class Expression : SYMBOL{
 protected  void  AddExpression ( Expression  e ){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "Expression"; }}
public override int yynum { get { return 128; }}
public Expression(Parser yyp):base(yyp){}}
//%+ConstantExpression+129
public class ConstantExpression : Expression{
 public  ConstantExpression (Parser yyp, Constant  c ):base(((LSLSyntax
)yyp)){ kids . Add ( c );
}

public override string yyname { get { return "ConstantExpression"; }}
public override int yynum { get { return 129; }}
public ConstantExpression(Parser yyp):base(yyp){}}
//%+IdentExpression+130
public class IdentExpression : Expression{
 protected  string  m_name ;
 public  IdentExpression (Parser yyp, string  name ):base(((LSLSyntax
)yyp)){ m_name = name ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "IdentExpression"; }}
public override int yynum { get { return 130; }}
public IdentExpression(Parser yyp):base(yyp){}}
//%+IdentDotExpression+131
public class IdentDotExpression : IdentExpression{
 private  string  m_member ;
 public  IdentDotExpression (Parser yyp, string  name , string  member ):base(((LSLSyntax
)yyp), name ){ m_member = member ;
}
 public  override  string  ToString (){ string  baseToString = base . ToString ();
 return  baseToString . Substring (0, baseToString . Length -1)+"."+ m_member +">";
}
 public  string  Member { get { return  m_member ;
}
}

public override string yyname { get { return "IdentDotExpression"; }}
public override int yynum { get { return 131; }}
public IdentDotExpression(Parser yyp):base(yyp){}}
//%+FunctionCallExpression+132
public class FunctionCallExpression : Expression{
 public  FunctionCallExpression (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}

public override string yyname { get { return "FunctionCallExpression"; }}
public override int yynum { get { return 132; }}
public FunctionCallExpression(Parser yyp):base(yyp){}}
//%+BinaryExpression+133
public class BinaryExpression : Expression{
 private  string  m_expressionSymbol ;
 public  BinaryExpression (Parser yyp, Expression  lhs , Expression  rhs , string  expressionSymbol ):base(((LSLSyntax
)yyp)){ m_expressionSymbol = expressionSymbol ;
 AddExpression ( lhs );
 AddExpression ( rhs );
}
 public  string  ExpressionSymbol { get { return  m_expressionSymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_expressionSymbol +">";
}

public override string yyname { get { return "BinaryExpression"; }}
public override int yynum { get { return 133; }}
public BinaryExpression(Parser yyp):base(yyp){}}
//%+UnaryExpression+134
public class UnaryExpression : Expression{
 private  string  m_unarySymbol ;
 public  UnaryExpression (Parser yyp, string  unarySymbol , Expression  e ):base(((LSLSyntax
)yyp)){ m_unarySymbol = unarySymbol ;
 AddExpression ( e );
}
 public  string  UnarySymbol { get { return  m_unarySymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_unarySymbol +">";
}

public override string yyname { get { return "UnaryExpression"; }}
public override int yynum { get { return 134; }}
public UnaryExpression(Parser yyp):base(yyp){}}
//%+TypecastExpression+135
public class TypecastExpression : Expression{
 private  string  m_typecastType ;
 public  TypecastExpression (Parser yyp, string  typecastType , SYMBOL  rhs ):base(((LSLSyntax
)yyp)){ m_typecastType = typecastType ;
 kids . Add ( rhs );
}
 public  string  TypecastType { get { return  m_typecastType ;
}
 set { m_typecastType = value ;
}
}

public override string yyname { get { return "TypecastExpression"; }}
public override int yynum { get { return 135; }}
public TypecastExpression(Parser yyp):base(yyp){}}
//%+ParenthesisExpression+136
public class ParenthesisExpression : Expression{
 public  ParenthesisExpression (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}

public override string yyname { get { return "ParenthesisExpression"; }}
public override int yynum { get { return 136; }}
public ParenthesisExpression(Parser yyp):base(yyp){}}
//%+IncrementDecrementExpression+137
public class IncrementDecrementExpression : Expression{
 private  string  m_name ;
 private  string  m_operation ;
 private  bool  m_postOperation ;
 public  IncrementDecrementExpression (Parser yyp, string  name , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_name = name ;
 m_operation = operation ;
 m_postOperation = postOperation ;
}
 public  IncrementDecrementExpression (Parser yyp, IdentDotExpression  ide , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_operation = operation ;
 m_postOperation = postOperation ;
 kids . Add ( ide );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+( m_postOperation ? m_name + m_operation : m_operation + m_name )+">";
}
 public  string  Name { get { return  m_name ;
}
}
 public  string  Operation { get { return  m_operation ;
}
}
 public  bool  PostOperation { get { return  m_postOperation ;
}
}

public override string yyname { get { return "IncrementDecrementExpression"; }}
public override int yynum { get { return 137; }}
public IncrementDecrementExpression(Parser yyp):base(yyp){}}

public class LSLProgramRoot_1 : LSLProgramRoot {
  public LSLProgramRoot_1(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((States)(yyq.StackAt(0).m_value))
	){}}

public class LSLProgramRoot_2 : LSLProgramRoot {
  public LSLProgramRoot_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_1 : GlobalDefinitions {
  public GlobalDefinitions_1(Parser yyq):base(yyq,
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_2 : GlobalDefinitions {
  public GlobalDefinitions_2(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_3 : GlobalDefinitions {
  public GlobalDefinitions_3(Parser yyq):base(yyq,
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_4 : GlobalDefinitions {
  public GlobalDefinitions_4(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalVariableDeclaration_1 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class GlobalVariableDeclaration_2 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_2(Parser yyq):base(yyq,new Assignment(((LSLSyntax
)yyq), 
	((Declaration)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	, 
	((EQUALS)(yyq.StackAt(2).m_value))
	.yytext)){}}

public class GlobalFunctionDefinition_1 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_1(Parser yyq):base(yyq,"void", 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class GlobalFunctionDefinition_2 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class States_1 : States {
  public States_1(Parser yyq):base(yyq,
	((State)(yyq.StackAt(0).m_value))
	){}}

public class States_2 : States {
  public States_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(1).m_value))
	, 
	((State)(yyq.StackAt(0).m_value))
	){}}

public class State_1 : State {
  public State_1(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class State_2 : State {
  public State_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class StateBody_1 : StateBody {
  public StateBody_1(Parser yyq):base(yyq,
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_2 : StateBody {
  public StateBody_2(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateEvent_1 : StateEvent {
  public StateEvent_1(Parser yyq):base(yyq,
	((Event)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_1 : ArgumentDeclarationList {
  public ArgumentDeclarationList_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_2 : ArgumentDeclarationList {
  public ArgumentDeclarationList_2(Parser yyq):base(yyq,
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class Declaration_1 : Declaration {
  public Declaration_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class CompoundStatement_1 : CompoundStatement {
  public CompoundStatement_1(Parser yyq):base(yyq){}}

public class CompoundStatement_2 : CompoundStatement {
  public CompoundStatement_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	){}}

public class StatementList_1 : StatementList {
  public StatementList_1(Parser yyq):base(yyq,
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class StatementList_2 : StatementList {
  public StatementList_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_1 : Statement {
  public Statement_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class Statement_2 : Statement {
  public Statement_2(Parser yyq):base(yyq,
	((Assignment)(yyq.StackAt(1).m_value))
	){}}

public class Statement_3 : Statement {
  public Statement_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class Statement_4 : Statement {
  public Statement_4(Parser yyq):base(yyq,
	((ReturnStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_5 : Statement {
  public Statement_5(Parser yyq):base(yyq,
	((JumpLabel)(yyq.StackAt(1).m_value))
	){}}

public class Statement_6 : Statement {
  public Statement_6(Parser yyq):base(yyq,
	((JumpStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_7 : Statement {
  public Statement_7(Parser yyq):base(yyq,
	((StateChange)(yyq.StackAt(1).m_value))
	){}}

public class Statement_8 : Statement {
  public Statement_8(Parser yyq):base(yyq,
	((IfStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_9 : Statement {
  public Statement_9(Parser yyq):base(yyq,
	((WhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_10 : Statement {
  public Statement_10(Parser yyq):base(yyq,
	((DoWhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_11 : Statement {
  public Statement_11(Parser yyq):base(yyq,
	((ForLoop)(yyq.StackAt(0).m_value))
	){}}

public class Statement_12 : Statement {
  public Statement_12(Parser yyq):base(yyq,
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class JumpLabel_1 : JumpLabel {
  public JumpLabel_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class JumpStatement_1 : JumpStatement {
  public JumpStatement_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_1 : StateChange {
  public StateChange_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_2 : StateChange {
  public StateChange_2(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IfStatement_1 : IfStatement {
  public IfStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_2 : IfStatement {
  public IfStatement_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_1 : WhileStatement {
  public WhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class DoWhileStatement_1 : DoWhileStatement {
  public DoWhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class ForLoop_1 : ForLoop {
  public ForLoop_1(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(6).m_value))
	, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_1 : ForLoopStatement {
  public ForLoopStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_2 : ForLoopStatement {
  public ForLoopStatement_2(Parser yyq):base(yyq,
	((Assignment)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_3 : ForLoopStatement {
  public ForLoopStatement_3(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_4 : ForLoopStatement {
  public ForLoopStatement_4(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Assignment)(yyq.StackAt(0).m_value))
	){}}

public class Assignment_1 : Assignment {
  public Assignment_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_2 : Assignment {
  public Assignment_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_3 : Assignment {
  public Assignment_3(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_4 : Assignment {
  public Assignment_4(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_5 : Assignment {
  public Assignment_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_6 : Assignment {
  public Assignment_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_7 : Assignment {
  public Assignment_7(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_8 : Assignment {
  public Assignment_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_9 : Assignment {
  public Assignment_9(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Assignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_10 : Assignment {
  public Assignment_10(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Assignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_11 : Assignment {
  public Assignment_11(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Assignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_12 : Assignment {
  public Assignment_12(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Assignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_13 : Assignment {
  public Assignment_13(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Assignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_14 : Assignment {
  public Assignment_14(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Assignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_15 : Assignment {
  public Assignment_15(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Assignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class ReturnStatement_1 : ReturnStatement {
  public ReturnStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ReturnStatement_2 : ReturnStatement {
  public ReturnStatement_2(Parser yyq):base(yyq){}}

public class Constant_1 : Constant {
  public Constant_1(Parser yyq):base(yyq,"integer", 
	((INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_2 : Constant {
  public Constant_2(Parser yyq):base(yyq,"integer", 
	((HEX_INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_3 : Constant {
  public Constant_3(Parser yyq):base(yyq,"float", 
	((FLOAT_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_4 : Constant {
  public Constant_4(Parser yyq):base(yyq,"string", 
	((STRING_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class ListConstant_1 : ListConstant {
  public ListConstant_1(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class VectorConstant_1 : VectorConstant {
  public VectorConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class RotationConstant_1 : RotationConstant {
  public RotationConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(7).m_value))
	, 
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ConstantExpression_1 : ConstantExpression {
  public ConstantExpression_1(Parser yyq):base(yyq,
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class IdentExpression_1 : IdentExpression {
  public IdentExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IdentDotExpression_1 : IdentDotExpression {
  public IdentDotExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IncrementDecrementExpression_1 : IncrementDecrementExpression {
  public IncrementDecrementExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_2 : IncrementDecrementExpression {
  public IncrementDecrementExpression_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_3 : IncrementDecrementExpression {
  public IncrementDecrementExpression_3(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_4 : IncrementDecrementExpression {
  public IncrementDecrementExpression_4(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_5 : IncrementDecrementExpression {
  public IncrementDecrementExpression_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_6 : IncrementDecrementExpression {
  public IncrementDecrementExpression_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_7 : IncrementDecrementExpression {
  public IncrementDecrementExpression_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_8 : IncrementDecrementExpression {
  public IncrementDecrementExpression_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class FunctionCallExpression_1 : FunctionCallExpression {
  public FunctionCallExpression_1(Parser yyq):base(yyq,
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class BinaryExpression_1 : BinaryExpression {
  public BinaryExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_2 : BinaryExpression {
  public BinaryExpression_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_3 : BinaryExpression {
  public BinaryExpression_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_4 : BinaryExpression {
  public BinaryExpression_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_5 : BinaryExpression {
  public BinaryExpression_5(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_6 : BinaryExpression {
  public BinaryExpression_6(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_7 : BinaryExpression {
  public BinaryExpression_7(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_8 : BinaryExpression {
  public BinaryExpression_8(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((CARET)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_9 : BinaryExpression {
  public BinaryExpression_9(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_10 : BinaryExpression {
  public BinaryExpression_10(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_11 : BinaryExpression {
  public BinaryExpression_11(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_12 : BinaryExpression {
  public BinaryExpression_12(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EXCLAMATION_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_13 : BinaryExpression {
  public BinaryExpression_13(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LESS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_14 : BinaryExpression {
  public BinaryExpression_14(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((GREATER_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_15 : BinaryExpression {
  public BinaryExpression_15(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP_AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_16 : BinaryExpression {
  public BinaryExpression_16(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE_STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_17 : BinaryExpression {
  public BinaryExpression_17(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_18 : BinaryExpression {
  public BinaryExpression_18(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class UnaryExpression_1 : UnaryExpression {
  public UnaryExpression_1(Parser yyq):base(yyq,
	((EXCLAMATION)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_2 : UnaryExpression {
  public UnaryExpression_2(Parser yyq):base(yyq,
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_3 : UnaryExpression {
  public UnaryExpression_3(Parser yyq):base(yyq,
	((TILDE)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ParenthesisExpression_1 : ParenthesisExpression {
  public ParenthesisExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class TypecastExpression_1 : TypecastExpression {
  public TypecastExpression_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_2 : TypecastExpression {
  public TypecastExpression_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, new IdentExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_3 : TypecastExpression {
  public TypecastExpression_3(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_4 : TypecastExpression {
  public TypecastExpression_4(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_5 : TypecastExpression {
  public TypecastExpression_5(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_6 : TypecastExpression {
  public TypecastExpression_6(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_7 : TypecastExpression {
  public TypecastExpression_7(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_8 : TypecastExpression {
  public TypecastExpression_8(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_9 : TypecastExpression {
  public TypecastExpression_9(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class FunctionCall_1 : FunctionCall {
  public FunctionCall_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class ArgumentList_1 : ArgumentList {
  public ArgumentList_1(Parser yyq):base(yyq,
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentList_2 : ArgumentList {
  public ArgumentList_2(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(2).m_value))
	, 
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ExpressionArgument_1 : ExpressionArgument {
  public ExpressionArgument_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class Typename_1 : Typename {
  public Typename_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_2 : Typename {
  public Typename_2(Parser yyq):base(yyq,
	((FLOAT_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_3 : Typename {
  public Typename_3(Parser yyq):base(yyq,
	((STRING_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_4 : Typename {
  public Typename_4(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_5 : Typename {
  public Typename_5(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_6 : Typename {
  public Typename_6(Parser yyq):base(yyq,
	((ROTATION_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_7 : Typename {
  public Typename_7(Parser yyq):base(yyq,
	((LIST_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_1 : Event {
  public Event_1(Parser yyq):base(yyq,
	((AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_2 : Event {
  public Event_2(Parser yyq):base(yyq,
	((AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_3 : Event {
  public Event_3(Parser yyq):base(yyq,
	((ATTACH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_4 : Event {
  public Event_4(Parser yyq):base(yyq,
	((CHANGED_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_5 : Event {
  public Event_5(Parser yyq):base(yyq,
	((COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_6 : Event {
  public Event_6(Parser yyq):base(yyq,
	((COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_7 : Event {
  public Event_7(Parser yyq):base(yyq,
	((COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_8 : Event {
  public Event_8(Parser yyq):base(yyq,
	((CONTROL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_9 : Event {
  public Event_9(Parser yyq):base(yyq,
	((DATASERVER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_10 : Event {
  public Event_10(Parser yyq):base(yyq,
	((EMAIL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_11 : Event {
  public Event_11(Parser yyq):base(yyq,
	((HTTP_RESPONSE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_12 : Event {
  public Event_12(Parser yyq):base(yyq,
	((LAND_COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_13 : Event {
  public Event_13(Parser yyq):base(yyq,
	((LAND_COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_14 : Event {
  public Event_14(Parser yyq):base(yyq,
	((LAND_COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_15 : Event {
  public Event_15(Parser yyq):base(yyq,
	((LINK_MESSAGE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_16 : Event {
  public Event_16(Parser yyq):base(yyq,
	((LISTEN_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_17 : Event {
  public Event_17(Parser yyq):base(yyq,
	((MONEY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_18 : Event {
  public Event_18(Parser yyq):base(yyq,
	((MOVING_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_19 : Event {
  public Event_19(Parser yyq):base(yyq,
	((MOVING_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_20 : Event {
  public Event_20(Parser yyq):base(yyq,
	((NO_SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_21 : Event {
  public Event_21(Parser yyq):base(yyq,
	((NOT_AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_22 : Event {
  public Event_22(Parser yyq):base(yyq,
	((NOT_AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_23 : Event {
  public Event_23(Parser yyq):base(yyq,
	((OBJECT_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_24 : Event {
  public Event_24(Parser yyq):base(yyq,
	((ON_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_25 : Event {
  public Event_25(Parser yyq):base(yyq,
	((REMOTE_DATA_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_26 : Event {
  public Event_26(Parser yyq):base(yyq,
	((RUN_TIME_PERMISSIONS_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_27 : Event {
  public Event_27(Parser yyq):base(yyq,
	((SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_28 : Event {
  public Event_28(Parser yyq):base(yyq,
	((STATE_ENTRY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_29 : Event {
  public Event_29(Parser yyq):base(yyq,
	((STATE_EXIT_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_30 : Event {
  public Event_30(Parser yyq):base(yyq,
	((TIMER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_31 : Event {
  public Event_31(Parser yyq):base(yyq,
	((TOUCH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_32 : Event {
  public Event_32(Parser yyq):base(yyq,
	((TOUCH_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_33 : Event {
  public Event_33(Parser yyq):base(yyq,
	((TOUCH_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}
public class yyLSLSyntax
: YyParser {
  public override object Action(Parser yyq,SYMBOL yysym, int yyact) {
    switch(yyact) {
	 case -1: break; //// keep compiler happy
}  return null; }

public class ArgumentDeclarationList_3 : ArgumentDeclarationList {
  public ArgumentDeclarationList_3(Parser yyq):base(yyq){}}

public class ArgumentList_3 : ArgumentList {
  public ArgumentList_3(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_4 : ArgumentDeclarationList {
  public ArgumentDeclarationList_4(Parser yyq):base(yyq){}}

public class Statement_13 : Statement {
  public Statement_13(Parser yyq):base(yyq){}}

public class ArgumentList_4 : ArgumentList {
  public ArgumentList_4(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_5 : ArgumentDeclarationList {
  public ArgumentDeclarationList_5(Parser yyq):base(yyq){}}
public yyLSLSyntax
():base() { arr = new int[] { 
101,4,6,52,0,
46,0,53,0,102,
20,103,4,28,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,95,1,
2,104,18,1,2362,
102,2,0,105,5,
284,1,0,106,18,
1,0,0,2,0,
1,1,107,18,1,
1,108,20,109,4,
18,76,0,73,0,
83,0,84,0,95,
0,84,0,89,0,
80,0,69,0,1,
57,1,1,2,0,
1,2,110,18,1,
2,111,20,112,4,
26,82,0,79,0,
84,0,65,0,84,
0,73,0,79,0,
78,0,95,0,84,
0,89,0,80,0,
69,0,1,56,1,
1,2,0,1,3,
113,18,1,3,114,
20,115,4,22,86,
0,69,0,67,0,
84,0,79,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,55,1,1,
2,0,1,4,116,
18,1,4,117,20,
118,4,16,75,0,
69,0,89,0,95,
0,84,0,89,0,
80,0,69,0,1,
54,1,1,2,0,
1,5,119,18,1,
5,120,20,121,4,
22,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
84,0,89,0,80,
0,69,0,1,53,
1,1,2,0,1,
6,122,18,1,6,
123,20,124,4,20,
70,0,76,0,79,
0,65,0,84,0,
95,0,84,0,89,
0,80,0,69,0,
1,52,1,1,2,
0,1,7,125,18,
1,7,126,20,127,
4,24,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,51,1,1,
2,0,1,8,128,
18,1,8,129,20,
130,4,16,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
105,1,2,2,0,
1,9,131,18,1,
9,132,20,133,4,
10,73,0,68,0,
69,0,78,0,84,
0,1,91,1,1,
2,0,1,10,134,
18,1,10,135,20,
136,4,20,76,0,
69,0,70,0,84,
0,95,0,80,0,
65,0,82,0,69,
0,78,0,1,16,
1,1,2,0,1,
1128,137,18,1,1128,
138,20,139,4,20,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,128,1,2,2,
0,1,2243,140,18,
1,2243,141,20,142,
4,18,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
1,101,1,2,2,
0,1,18,143,18,
1,18,129,2,0,
1,19,144,18,1,
19,132,2,0,1,
20,145,18,1,20,
146,20,147,4,46,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,103,1,2,
2,0,1,21,148,
18,1,21,149,20,
150,4,10,67,0,
79,0,77,0,77,
0,65,0,1,14,
1,1,2,0,1,
2116,151,18,1,2116,
152,20,153,4,22,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,104,1,
2,2,0,1,2118,
154,18,1,2118,132,
2,0,1,30,155,
18,1,30,152,2,
0,1,31,156,18,
1,31,157,20,158,
4,22,82,0,73,
0,71,0,72,0,
84,0,95,0,80,
0,65,0,82,0,
69,0,78,0,1,
17,1,1,2,0,
1,32,159,18,1,
32,160,20,161,4,
20,76,0,69,0,
70,0,84,0,95,
0,66,0,82,0,
65,0,67,0,69,
0,1,12,1,1,
2,0,1,1707,162,
18,1,1707,163,20,
164,4,18,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,109,1,2,
2,0,1,1115,165,
18,1,1115,166,20,
167,4,12,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,15,1,1,2,
0,1,1709,168,18,
1,1709,169,20,170,
4,4,68,0,79,
0,1,44,1,1,
2,0,1,40,171,
18,1,40,132,2,
0,1,41,172,18,
1,41,135,2,0,
1,42,173,18,1,
42,138,2,0,1,
43,174,18,1,43,
175,20,176,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,83,0,72,
0,73,0,70,0,
84,0,1,41,1,
1,2,0,1,44,
177,18,1,44,132,
2,0,1,1159,178,
18,1,1159,166,2,
0,1,46,179,18,
1,46,180,20,181,
4,12,80,0,69,
0,82,0,73,0,
79,0,68,0,1,
24,1,1,2,0,
1,47,182,18,1,
47,132,2,0,1,
48,183,18,1,48,
184,20,185,4,18,
68,0,69,0,67,
0,82,0,69,0,
77,0,69,0,78,
0,84,0,1,5,
1,1,2,0,1,
49,186,18,1,49,
187,20,188,4,18,
73,0,78,0,67,
0,82,0,69,0,
77,0,69,0,78,
0,84,0,1,4,
1,1,2,0,1,
50,189,18,1,50,
184,2,0,1,51,
190,18,1,51,187,
2,0,1,52,191,
18,1,52,135,2,
0,1,2281,192,18,
1,2281,193,20,194,
4,12,83,0,116,
0,97,0,116,0,
101,0,115,0,1,
99,1,2,2,0,
1,2284,195,18,1,
2284,196,20,197,4,
10,83,0,116,0,
97,0,116,0,101,
0,1,100,1,2,
2,0,1,2285,198,
18,1,2285,196,2,
0,1,2286,199,18,
1,2286,132,2,0,
1,2287,200,18,1,
2287,135,2,0,1,
61,201,18,1,61,
129,2,0,1,62,
202,18,1,62,157,
2,0,1,63,203,
18,1,63,132,2,
0,1,1681,204,18,
1,1681,157,2,0,
1,1736,205,18,1,
1736,163,2,0,1,
66,206,18,1,66,
132,2,0,1,67,
207,18,1,67,184,
2,0,1,68,208,
18,1,68,187,2,
0,1,65,209,18,
1,65,180,2,0,
1,70,210,18,1,
70,187,2,0,1,
71,211,18,1,71,
135,2,0,1,2300,
212,18,1,2300,213,
20,214,4,34,67,
0,111,0,109,0,
112,0,111,0,117,
0,110,0,100,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,107,
1,2,2,0,1,
1744,215,18,1,1744,
138,2,0,1,74,
216,18,1,74,157,
2,0,1,2303,217,
18,1,2303,166,2,
0,1,76,218,18,
1,76,219,20,220,
4,20,76,0,69,
0,70,0,84,0,
95,0,83,0,72,
0,73,0,70,0,
84,0,1,40,1,
1,2,0,1,69,
221,18,1,69,184,
2,0,1,79,222,
18,1,79,223,20,
224,4,10,84,0,
73,0,76,0,68,
0,69,0,1,36,
1,1,2,0,1,
73,225,18,1,73,
138,2,0,1,82,
226,18,1,82,138,
2,0,1,1197,227,
18,1,1197,228,20,
229,4,28,80,0,
69,0,82,0,67,
0,69,0,78,0,
84,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,10,1,1,
2,0,1,85,230,
18,1,85,231,20,
232,4,26,83,0,
84,0,82,0,79,
0,75,0,69,0,
95,0,83,0,84,
0,82,0,79,0,
75,0,69,0,1,
39,1,1,2,0,
1,89,233,18,1,
89,234,20,235,4,
10,77,0,73,0,
78,0,85,0,83,
0,1,19,1,1,
2,0,1,1763,236,
18,1,1763,157,2,
0,1,1764,237,18,
1,1764,238,20,239,
4,18,83,0,69,
0,77,0,73,0,
67,0,79,0,76,
0,79,0,78,0,
1,11,1,1,2,
0,1,1210,240,18,
1,1210,138,2,0,
1,93,241,18,1,
93,138,2,0,1,
2124,242,18,1,2124,
243,20,244,4,32,
83,0,84,0,65,
0,84,0,69,0,
95,0,69,0,88,
0,73,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,86,1,
1,2,0,1,97,
245,18,1,97,246,
20,247,4,14,65,
0,77,0,80,0,
95,0,65,0,77,
0,80,0,1,38,
1,1,2,0,1,
1776,248,18,1,1776,
249,20,250,4,10,
87,0,72,0,73,
0,76,0,69,0,
1,45,1,1,2,
0,1,1777,251,18,
1,1777,135,2,0,
1,102,252,18,1,
102,253,20,254,4,
22,69,0,88,0,
67,0,76,0,65,
0,77,0,65,0,
84,0,73,0,79,
0,78,0,1,37,
1,1,2,0,1,
2339,255,18,1,2339,
238,2,0,1,107,
256,18,1,107,138,
2,0,1,1629,257,
18,1,1629,238,2,
0,1,1679,258,18,
1,1679,259,20,260,
4,32,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
119,1,2,2,0,
1,112,261,18,1,
112,262,20,263,4,
28,71,0,82,0,
69,0,65,0,84,
0,69,0,82,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
32,1,1,2,0,
1,118,264,18,1,
118,138,2,0,1,
1157,265,18,1,1157,
266,20,267,4,20,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
1,110,1,2,2,
0,1,1158,268,18,
1,1158,152,2,0,
1,1737,269,18,1,
1737,249,2,0,1,
1738,270,18,1,1738,
135,2,0,1,124,
271,18,1,124,272,
20,273,4,22,76,
0,69,0,83,0,
83,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,31,1,1,
2,0,1,1239,274,
18,1,1239,266,2,
0,1,1165,275,18,
1,1165,138,2,0,
1,1242,276,18,1,
1242,277,20,278,4,
24,83,0,76,0,
65,0,83,0,72,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,9,1,1,2,
0,1,130,279,18,
1,130,138,2,0,
1,1802,280,18,1,
1802,157,2,0,1,
2360,281,18,1,2360,
282,20,283,4,48,
71,0,108,0,111,
0,98,0,97,0,
108,0,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,1,98,
1,2,2,0,1,
2361,284,18,1,2361,
285,20,286,4,50,
71,0,108,0,111,
0,98,0,97,0,
108,0,86,0,97,
0,114,0,105,0,
97,0,98,0,108,
0,101,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
1,97,1,2,2,
0,1,2362,104,1,
2363,287,18,1,2363,
288,23,289,4,6,
69,0,79,0,70,
0,1,2,1,6,
2,0,1,137,290,
18,1,137,291,20,
292,4,36,69,0,
88,0,67,0,76,
0,65,0,77,0,
65,0,84,0,73,
0,79,0,78,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
30,1,1,2,0,
1,1255,293,18,1,
1255,138,2,0,1,
143,294,18,1,143,
138,2,0,1,2302,
295,18,1,2302,152,
2,0,1,151,296,
18,1,151,297,20,
298,4,26,69,0,
81,0,85,0,65,
0,76,0,83,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
29,1,1,2,0,
1,2309,299,18,1,
2309,138,2,0,1,
157,300,18,1,157,
138,2,0,1,1830,
301,18,1,1830,163,
2,0,1,1832,302,
18,1,1832,303,20,
304,4,4,73,0,
70,0,1,42,1,
1,2,0,1,1833,
305,18,1,1833,135,
2,0,1,166,306,
18,1,166,307,20,
308,4,20,76,0,
69,0,70,0,84,
0,95,0,65,0,
78,0,71,0,76,
0,69,0,1,25,
1,1,2,0,1,
1839,309,18,1,1839,
138,2,0,1,1783,
310,18,1,1783,138,
2,0,1,1284,311,
18,1,1284,266,2,
0,1,172,312,18,
1,172,138,2,0,
1,1287,313,18,1,
1287,314,20,315,4,
22,83,0,84,0,
65,0,82,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,8,
1,1,2,0,1,
2328,316,18,1,2328,
238,2,0,1,182,
317,18,1,182,318,
20,319,4,22,82,
0,73,0,71,0,
72,0,84,0,95,
0,65,0,78,0,
71,0,76,0,69,
0,1,26,1,1,
2,0,1,2140,320,
18,1,2140,321,20,
322,4,48,76,0,
65,0,78,0,68,
0,95,0,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,70,1,1,
2,0,1,1300,323,
18,1,1300,138,2,
0,1,1858,324,18,
1,1858,157,2,0,
1,188,325,18,1,
188,138,2,0,1,
2208,326,18,1,2208,
160,2,0,1,2279,
327,18,1,2279,328,
20,329,4,22,82,
0,73,0,71,0,
72,0,84,0,95,
0,66,0,82,0,
65,0,67,0,69,
0,1,13,1,1,
2,0,1,2351,330,
18,1,2351,193,2,
0,1,199,331,18,
1,199,332,20,333,
4,10,67,0,65,
0,82,0,69,0,
84,0,1,35,1,
1,2,0,1,205,
334,18,1,205,138,
2,0,1,2359,335,
18,1,2359,285,2,
0,1,2296,336,18,
1,2296,146,2,0,
1,1329,337,18,1,
1329,266,2,0,1,
1887,338,18,1,1887,
163,2,0,1,1888,
339,18,1,1888,340,
20,341,4,8,69,
0,76,0,83,0,
69,0,1,43,1,
1,2,0,1,1332,
342,18,1,1332,343,
20,344,4,24,77,
0,73,0,78,0,
85,0,83,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,7,
1,1,2,0,1,
223,345,18,1,223,
138,2,0,1,217,
346,18,1,217,347,
20,348,4,12,83,
0,84,0,82,0,
79,0,75,0,69,
0,1,34,1,1,
2,0,1,1345,349,
18,1,1345,138,2,
0,1,236,350,18,
1,236,351,20,352,
4,6,65,0,77,
0,80,0,1,33,
1,1,2,0,1,
242,353,18,1,242,
138,2,0,1,1917,
354,18,1,1917,163,
2,0,1,1919,355,
18,1,1919,356,20,
357,4,10,83,0,
84,0,65,0,84,
0,69,0,1,48,
1,1,2,0,1,
1920,358,18,1,1920,
359,20,360,4,26,
68,0,69,0,70,
0,65,0,85,0,
76,0,84,0,95,
0,83,0,84,0,
65,0,84,0,69,
0,1,47,1,1,
2,0,1,1921,361,
18,1,1921,132,2,
0,1,1922,362,18,
1,1922,363,20,364,
4,8,74,0,85,
0,77,0,80,0,
1,49,1,1,2,
0,1,1923,365,18,
1,1923,132,2,0,
1,1924,366,18,1,
1924,367,20,368,4,
4,65,0,84,0,
1,23,1,1,2,
0,1,1925,369,18,
1,1925,132,2,0,
1,1926,370,18,1,
1926,213,2,0,1,
256,371,18,1,256,
372,20,373,4,14,
80,0,69,0,82,
0,67,0,69,0,
78,0,84,0,1,
22,1,1,2,0,
1,1928,374,18,1,
1928,375,20,376,4,
32,68,0,111,0,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,117,
1,2,2,0,1,
1929,377,18,1,1929,
378,20,379,4,28,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,116,
1,2,2,0,1,
1930,380,18,1,1930,
381,20,382,4,22,
73,0,102,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,115,1,
2,2,0,1,1374,
383,18,1,1374,266,
2,0,1,1932,384,
18,1,1932,238,2,
0,1,262,385,18,
1,262,138,2,0,
1,1377,386,18,1,
1377,387,20,388,4,
22,80,0,76,0,
85,0,83,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,6,
1,1,2,0,1,
1935,389,18,1,1935,
390,20,391,4,18,
74,0,117,0,109,
0,112,0,76,0,
97,0,98,0,101,
0,108,0,1,112,
1,2,2,0,1,
1936,392,18,1,1936,
238,2,0,1,1937,
393,18,1,1937,394,
20,395,4,30,82,
0,101,0,116,0,
117,0,114,0,110,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
111,1,2,2,0,
1,1938,396,18,1,
1938,238,2,0,1,
1939,397,18,1,1939,
266,2,0,1,1940,
398,18,1,1940,238,
2,0,1,827,399,
18,1,827,138,2,
0,1,1390,400,18,
1,1390,138,2,0,
1,277,401,18,1,
277,402,20,403,4,
10,83,0,76,0,
65,0,83,0,72,
0,1,21,1,1,
2,0,1,2358,404,
18,1,2358,282,2,
0,1,283,405,18,
1,283,138,2,0,
1,2298,406,18,1,
2298,157,2,0,1,
299,407,18,1,299,
408,20,409,4,8,
83,0,84,0,65,
0,82,0,1,20,
1,1,2,0,1,
305,410,18,1,305,
138,2,0,1,1422,
411,18,1,1422,166,
2,0,1,1927,412,
18,1,1927,413,20,
414,4,14,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,1,118,1,
2,2,0,1,1435,
415,18,1,1435,138,
2,0,1,322,416,
18,1,322,234,2,
0,1,1933,417,18,
1,1933,418,20,419,
4,26,74,0,117,
0,109,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,113,
1,2,2,0,1,
1934,420,18,1,1934,
238,2,0,1,883,
421,18,1,883,138,
2,0,1,328,422,
18,1,328,138,2,
0,1,1941,423,18,
1,1941,238,2,0,
1,2340,424,18,1,
2340,425,20,426,4,
34,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
1,96,1,2,2,
0,1,346,427,18,
1,346,428,20,429,
4,8,80,0,76,
0,85,0,83,0,
1,18,1,1,2,
0,1,1464,430,18,
1,1464,266,2,0,
1,1419,431,18,1,
1419,266,2,0,1,
352,432,18,1,352,
138,2,0,1,1471,
433,18,1,1471,138,
2,0,1,2032,434,
18,1,2032,266,2,
0,1,371,435,18,
1,371,436,20,437,
4,24,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,67,0,
97,0,108,0,108,
0,1,120,1,2,
2,0,1,372,438,
18,1,372,184,2,
0,1,373,439,18,
1,373,132,2,0,
1,374,440,18,1,
374,180,2,0,1,
375,441,18,1,375,
132,2,0,1,1490,
442,18,1,1490,238,
2,0,1,377,443,
18,1,377,132,2,
0,1,378,444,18,
1,378,180,2,0,
1,379,445,18,1,
379,132,2,0,1,
380,446,18,1,380,
447,20,448,4,16,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,124,1,2,
2,0,1,381,449,
18,1,381,307,2,
0,1,1931,450,18,
1,1931,451,20,452,
4,22,83,0,116,
0,97,0,116,0,
101,0,67,0,104,
0,97,0,110,0,
103,0,101,0,1,
114,1,2,2,0,
1,942,453,18,1,
942,138,2,0,1,
387,454,18,1,387,
138,2,0,1,376,
455,18,1,376,187,
2,0,1,2063,456,
18,1,2063,457,20,
458,4,26,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,1,
108,1,2,2,0,
1,1507,459,18,1,
1507,138,2,0,1,
2206,460,18,1,2206,
461,20,462,4,20,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
1,102,1,2,2,
0,1,406,463,18,
1,406,149,2,0,
1,412,464,18,1,
412,138,2,0,1,
1536,465,18,1,1536,
152,2,0,1,1538,
466,18,1,1538,238,
2,0,1,1539,467,
18,1,1539,468,20,
469,4,6,70,0,
79,0,82,0,1,
46,1,1,2,0,
1,1540,470,18,1,
1540,135,2,0,1,
431,471,18,1,431,
149,2,0,1,1501,
472,18,1,1501,473,
20,474,4,12,82,
0,69,0,84,0,
85,0,82,0,78,
0,1,50,1,1,
2,0,1,2107,475,
18,1,2107,163,2,
0,1,437,476,18,
1,437,138,2,0,
1,1553,477,18,1,
1553,138,2,0,1,
2111,478,18,1,2111,
163,2,0,1,2113,
479,18,1,2113,328,
2,0,1,1001,480,
18,1,1001,436,2,
0,1,1002,481,18,
1,1002,447,2,0,
1,2117,482,18,1,
2117,356,2,0,1,
447,483,18,1,447,
318,2,0,1,2119,
484,18,1,2119,160,
2,0,1,2120,485,
18,1,2120,486,20,
487,4,34,84,0,
79,0,85,0,67,
0,72,0,95,0,
83,0,84,0,65,
0,82,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,89,1,
1,2,0,1,2121,
488,18,1,2121,489,
20,490,4,30,84,
0,79,0,85,0,
67,0,72,0,95,
0,69,0,78,0,
68,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
90,1,1,2,0,
1,2122,491,18,1,
2122,492,20,493,4,
22,84,0,79,0,
85,0,67,0,72,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,88,
1,1,2,0,1,
2123,494,18,1,2123,
495,20,496,4,22,
84,0,73,0,77,
0,69,0,82,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,87,1,
1,2,0,1,1010,
497,18,1,1010,138,
2,0,1,1011,498,
18,1,1011,157,2,
0,1,2126,499,18,
1,2126,500,20,501,
4,24,83,0,69,
0,78,0,83,0,
79,0,82,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,84,1,1,
2,0,1,2127,502,
18,1,2127,503,20,
504,4,52,82,0,
85,0,78,0,95,
0,84,0,73,0,
77,0,69,0,95,
0,80,0,69,0,
82,0,77,0,73,
0,83,0,83,0,
73,0,79,0,78,
0,83,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,83,1,1,2,
0,1,2128,505,18,
1,2128,506,20,507,
4,34,82,0,69,
0,77,0,79,0,
84,0,69,0,95,
0,68,0,65,0,
84,0,65,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,82,1,1,
2,0,1,2129,508,
18,1,2129,509,20,
510,4,24,79,0,
78,0,95,0,82,
0,69,0,90,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,81,1,
1,2,0,1,459,
511,18,1,459,512,
20,513,4,24,76,
0,69,0,70,0,
84,0,95,0,66,
0,82,0,65,0,
67,0,75,0,69,
0,84,0,1,27,
1,1,2,0,1,
2131,514,18,1,2131,
515,20,516,4,38,
78,0,79,0,84,
0,95,0,65,0,
84,0,95,0,84,
0,65,0,82,0,
71,0,69,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,79,
1,1,2,0,1,
461,517,18,1,461,
518,20,519,4,24,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,1,
121,1,2,2,0,
1,462,520,18,1,
462,149,2,0,1,
2134,521,18,1,2134,
522,20,523,4,36,
77,0,79,0,86,
0,73,0,78,0,
71,0,95,0,83,
0,84,0,65,0,
82,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,76,1,1,
2,0,1,464,524,
18,1,464,525,20,
526,4,16,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,1,
122,1,2,2,0,
1,2136,527,18,1,
2136,528,20,529,4,
22,77,0,79,0,
78,0,69,0,89,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,74,
1,1,2,0,1,
2137,530,18,1,2137,
531,20,532,4,24,
76,0,73,0,83,
0,84,0,69,0,
78,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
73,1,1,2,0,
1,2138,533,18,1,
2138,534,20,535,4,
36,76,0,73,0,
78,0,75,0,95,
0,77,0,69,0,
83,0,83,0,65,
0,71,0,69,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,72,1,
1,2,0,1,2139,
536,18,1,2139,537,
20,538,4,52,76,
0,65,0,78,0,
68,0,95,0,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,83,
0,84,0,65,0,
82,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,71,1,1,
2,0,1,1583,539,
18,1,1583,259,2,
0,1,1584,540,18,
1,1584,149,2,0,
1,2142,541,18,1,
2142,542,20,543,4,
38,72,0,84,0,
84,0,80,0,95,
0,82,0,69,0,
83,0,80,0,79,
0,78,0,83,0,
69,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
68,1,1,2,0,
1,2143,544,18,1,
2143,545,20,546,4,
22,69,0,77,0,
65,0,73,0,76,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,67,
1,1,2,0,1,
2144,547,18,1,2144,
548,20,549,4,32,
68,0,65,0,84,
0,65,0,83,0,
69,0,82,0,86,
0,69,0,82,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,66,1,
1,2,0,1,2145,
550,18,1,2145,551,
20,552,4,26,67,
0,79,0,78,0,
84,0,82,0,79,
0,76,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,65,1,1,2,
0,1,2146,553,18,
1,2146,554,20,555,
4,42,67,0,79,
0,76,0,76,0,
73,0,83,0,73,
0,79,0,78,0,
95,0,83,0,84,
0,65,0,82,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
64,1,1,2,0,
1,476,556,18,1,
476,557,20,558,4,
30,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
67,0,79,0,78,
0,83,0,84,0,
65,0,78,0,84,
0,1,3,1,1,
2,0,1,477,559,
18,1,477,560,20,
561,4,28,70,0,
76,0,79,0,65,
0,84,0,95,0,
67,0,79,0,78,
0,83,0,84,0,
65,0,78,0,84,
0,1,94,1,1,
2,0,1,478,562,
18,1,478,563,20,
564,4,40,72,0,
69,0,88,0,95,
0,73,0,78,0,
84,0,69,0,71,
0,69,0,82,0,
95,0,67,0,79,
0,78,0,83,0,
84,0,65,0,78,
0,84,0,1,93,
1,1,2,0,1,
479,565,18,1,479,
566,20,567,4,32,
73,0,78,0,84,
0,69,0,71,0,
69,0,82,0,95,
0,67,0,79,0,
78,0,83,0,84,
0,65,0,78,0,
84,0,1,92,1,
1,2,0,1,480,
568,18,1,480,569,
20,570,4,26,82,
0,73,0,71,0,
72,0,84,0,95,
0,66,0,82,0,
65,0,67,0,75,
0,69,0,84,0,
1,28,1,1,2,
0,1,481,571,18,
1,481,525,2,0,
1,2153,572,18,1,
2153,573,20,574,4,
10,69,0,118,0,
101,0,110,0,116,
0,1,106,1,2,
2,0,1,1597,575,
18,1,1597,138,2,
0,1,1046,576,18,
1,1046,138,2,0,
1,2163,577,18,1,
2163,146,2,0,1,
2165,578,18,1,2165,
157,2,0,1,2167,
579,18,1,2167,213,
2,0,1,2169,580,
18,1,2169,141,2,
0,1,2108,581,18,
1,2108,328,2,0,
1,509,582,18,1,
509,149,2,0,1,
2115,583,18,1,2115,
213,2,0,1,1627,
584,18,1,1627,266,
2,0,1,515,585,
18,1,515,138,2,
0,1,1635,586,18,
1,1635,138,2,0,
1,2125,587,18,1,
2125,588,20,589,4,
34,83,0,84,0,
65,0,84,0,69,
0,95,0,69,0,
78,0,84,0,82,
0,89,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,85,1,1,2,
0,1,525,590,18,
1,525,318,2,0,
1,2130,591,18,1,
2130,592,20,593,4,
32,79,0,66,0,
74,0,69,0,67,
0,84,0,95,0,
82,0,69,0,90,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,80,
1,1,2,0,1,
2132,594,18,1,2132,
595,20,596,4,46,
78,0,79,0,84,
0,95,0,65,0,
84,0,95,0,82,
0,79,0,84,0,
95,0,84,0,65,
0,82,0,71,0,
69,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,78,1,1,
2,0,1,2133,597,
18,1,2133,598,20,
599,4,30,78,0,
79,0,95,0,83,
0,69,0,78,0,
83,0,79,0,82,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,77,
1,1,2,0,1,
2135,600,18,1,2135,
601,20,602,4,32,
77,0,79,0,86,
0,73,0,78,0,
71,0,95,0,69,
0,78,0,68,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,75,1,
1,2,0,1,2204,
603,18,1,2204,461,
2,0,1,2205,604,
18,1,2205,328,2,
0,1,1092,605,18,
1,1092,518,2,0,
1,2207,606,18,1,
2207,359,2,0,1,
1094,607,18,1,1094,
157,2,0,1,2141,
608,18,1,2141,609,
20,610,4,40,76,
0,65,0,78,0,
68,0,95,0,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
69,1,1,2,0,
1,1654,611,18,1,
1654,238,2,0,1,
2147,612,18,1,2147,
613,20,614,4,38,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
69,0,78,0,68,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,63,
1,1,2,0,1,
2148,615,18,1,2148,
616,20,617,4,30,
67,0,79,0,76,
0,76,0,73,0,
83,0,73,0,79,
0,78,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,62,1,1,2,
0,1,2149,618,18,
1,2149,619,20,620,
4,26,67,0,72,
0,65,0,78,0,
71,0,69,0,68,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,61,
1,1,2,0,1,
2150,621,18,1,2150,
622,20,623,4,24,
65,0,84,0,84,
0,65,0,67,0,
72,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
60,1,1,2,0,
1,2151,624,18,1,
2151,625,20,626,4,
30,65,0,84,0,
95,0,84,0,65,
0,82,0,71,0,
69,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,59,1,1,
2,0,1,2152,627,
18,1,2152,628,20,
629,4,38,65,0,
84,0,95,0,82,
0,79,0,84,0,
95,0,84,0,65,
0,82,0,71,0,
69,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,58,1,1,
2,0,1,2154,630,
18,1,2154,135,2,
0,1,1111,631,18,
1,1111,180,2,0,
1,1112,632,18,1,
1112,132,2,0,633,
5,0,634,5,302,
1,2,635,19,289,
1,2,636,5,6,
1,2351,637,17,638,
15,639,4,30,37,
0,76,0,83,0,
76,0,80,0,114,
0,111,0,103,0,
114,0,97,0,109,
0,82,0,111,0,
111,0,116,0,1,
-1,1,5,640,20,
641,4,32,76,0,
83,0,76,0,80,
0,114,0,111,0,
103,0,114,0,97,
0,109,0,82,0,
111,0,111,0,116,
0,95,0,49,0,
1,139,1,3,1,
3,1,2,642,22,
1,1,1,2279,643,
17,644,15,645,4,
12,37,0,83,0,
116,0,97,0,116,
0,101,0,1,-1,
1,5,646,20,647,
4,14,83,0,116,
0,97,0,116,0,
101,0,95,0,49,
0,1,151,1,3,
1,5,1,4,648,
22,1,13,1,2281,
649,17,650,15,639,
1,-1,1,5,651,
20,652,4,32,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,95,0,50,
0,1,140,1,3,
1,2,1,1,653,
22,1,2,1,2205,
654,17,655,15,645,
1,-1,1,5,656,
20,657,4,14,83,
0,116,0,97,0,
116,0,101,0,95,
0,50,0,1,152,
1,3,1,6,1,
5,658,22,1,14,
1,2284,659,17,660,
15,661,4,14,37,
0,83,0,116,0,
97,0,116,0,101,
0,115,0,1,-1,
1,5,662,20,663,
4,16,83,0,116,
0,97,0,116,0,
101,0,115,0,95,
0,50,0,1,150,
1,3,1,3,1,
2,664,22,1,12,
1,2285,665,17,666,
15,661,1,-1,1,
5,667,20,668,4,
16,83,0,116,0,
97,0,116,0,101,
0,115,0,95,0,
49,0,1,149,1,
3,1,2,1,1,
669,22,1,11,1,
3,670,19,558,1,
3,671,5,79,1,
1584,672,16,0,556,
1,2113,673,17,674,
15,675,4,36,37,
0,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,676,
20,677,4,38,67,
0,111,0,109,0,
112,0,111,0,117,
0,110,0,100,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,159,1,
3,1,3,1,2,
678,22,1,22,1,
112,679,16,0,556,
1,1858,680,16,0,
556,1,431,681,16,
0,556,1,447,682,
16,0,556,1,1490,
683,17,684,15,685,
4,20,37,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,686,20,687,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,51,0,1,165,
1,3,1,3,1,
2,688,22,1,29,
1,1654,689,16,0,
556,1,2303,690,16,
0,556,1,124,691,
16,0,556,1,525,
692,16,0,556,1,
236,693,16,0,556,
1,346,694,16,0,
556,1,1764,695,17,
696,15,697,4,34,
37,0,68,0,111,
0,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,698,20,
699,4,36,68,0,
111,0,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
182,1,3,1,8,
1,7,700,22,1,
46,1,459,701,16,
0,556,1,1332,702,
16,0,556,1,1115,
703,16,0,556,1,
1926,704,17,705,15,
685,1,-1,1,5,
706,20,707,4,24,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,50,0,1,
174,1,3,1,2,
1,1,708,22,1,
38,1,1927,709,17,
710,15,685,1,-1,
1,5,711,20,712,
4,24,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,49,
0,1,173,1,3,
1,2,1,1,713,
22,1,37,1,137,
714,16,0,556,1,
1929,715,17,716,15,
685,1,-1,1,5,
717,20,718,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
57,0,1,171,1,
3,1,2,1,1,
719,22,1,35,1,
32,720,16,0,556,
1,1777,721,16,0,
556,1,1887,722,17,
723,15,724,4,24,
37,0,73,0,102,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,725,20,
726,4,26,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
179,1,3,1,6,
1,5,727,22,1,
43,1,1888,728,16,
0,556,1,1936,729,
17,730,15,685,1,
-1,1,5,731,20,
732,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,53,0,
1,167,1,3,1,
3,1,2,733,22,
1,31,1,2108,734,
17,735,15,675,1,
-1,1,5,736,20,
737,4,38,67,0,
111,0,109,0,112,
0,111,0,117,0,
110,0,100,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,1,160,1,3,
1,4,1,3,738,
22,1,23,1,256,
739,16,0,556,1,
1833,740,16,0,556,
1,2111,741,17,742,
15,743,4,28,37,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,1,-1,1,
5,744,20,745,4,
30,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,95,0,49,
0,1,161,1,3,
1,2,1,1,746,
22,1,24,1,41,
747,16,0,556,1,
151,748,16,0,556,
1,43,749,16,0,
556,1,1681,750,16,
0,556,1,509,751,
16,0,556,1,1738,
752,16,0,556,1,
1422,753,16,0,556,
1,52,754,16,0,
556,1,1538,755,17,
756,15,685,1,-1,
1,5,757,20,758,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
163,1,3,1,3,
1,2,759,22,1,
27,1,381,760,16,
0,556,1,1540,761,
16,0,556,1,1941,
762,17,763,15,685,
1,-1,1,5,163,
1,1,1,1,764,
22,1,26,1,166,
765,16,0,556,1,
1802,766,16,0,556,
1,277,767,16,0,
556,1,2107,768,17,
769,15,743,1,-1,
1,5,770,20,771,
4,30,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,95,0,
50,0,1,162,1,
3,1,3,1,2,
772,22,1,25,1,
62,773,16,0,556,
1,1917,774,17,775,
15,724,1,-1,1,
5,776,20,777,4,
26,73,0,102,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,180,1,
3,1,8,1,7,
778,22,1,44,1,
1159,779,16,0,556,
1,71,780,16,0,
556,1,1707,781,17,
782,15,783,4,16,
37,0,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,1,-1,1,5,
784,20,785,4,18,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,95,
0,49,0,1,183,
1,3,1,10,1,
9,786,22,1,47,
1,182,787,16,0,
556,1,1709,788,16,
0,556,1,1928,789,
17,790,15,685,1,
-1,1,5,791,20,
792,4,24,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
48,0,1,172,1,
3,1,2,1,1,
793,22,1,36,1,
76,794,16,0,556,
1,1930,795,17,796,
15,685,1,-1,1,
5,797,20,798,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,56,0,1,170,
1,3,1,2,1,
1,799,22,1,34,
1,79,800,16,0,
556,1,299,801,16,
0,556,1,1242,802,
16,0,556,1,1501,
803,16,0,556,1,
85,804,16,0,556,
1,1830,805,17,806,
15,807,4,30,37,
0,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,808,20,
809,4,32,87,0,
104,0,105,0,108,
0,101,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
1,181,1,3,1,
6,1,5,810,22,
1,45,1,1940,811,
17,812,15,685,1,
-1,1,5,813,20,
814,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,164,1,3,1,
3,1,2,815,22,
1,28,1,1287,816,
16,0,556,1,89,
817,16,0,556,1,
199,818,16,0,556,
1,406,819,16,0,
556,1,1932,820,17,
821,15,685,1,-1,
1,5,822,20,823,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,55,0,1,
169,1,3,1,3,
1,2,824,22,1,
33,1,1377,825,16,
0,556,1,1934,826,
17,827,15,685,1,
-1,1,5,828,20,
829,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,54,0,
1,168,1,3,1,
3,1,2,830,22,
1,32,1,97,831,
16,0,556,1,1938,
832,17,833,15,685,
1,-1,1,5,834,
20,835,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,52,
0,1,166,1,3,
1,3,1,2,836,
22,1,30,1,2063,
837,16,0,556,1,
102,838,16,0,556,
1,1629,839,16,0,
556,1,322,840,16,
0,556,1,462,841,
16,0,556,1,1197,
842,16,0,556,1,
217,843,16,0,556,
1,4,844,19,188,
1,4,845,5,84,
1,256,846,16,0,
455,1,1764,695,1,
1777,847,16,0,455,
1,525,848,16,0,
455,1,509,849,16,
0,455,1,277,850,
16,0,455,1,32,
851,16,0,455,1,
1540,852,16,0,455,
1,40,853,16,0,
190,1,41,854,16,
0,455,1,43,855,
16,0,455,1,2303,
856,16,0,455,1,
1802,857,16,0,455,
1,44,858,16,0,
190,1,299,859,16,
0,455,1,47,860,
16,0,186,1,52,
861,16,0,455,1,
2063,862,16,0,455,
1,63,863,16,0,
210,1,66,864,16,
0,208,1,71,865,
16,0,455,1,1830,
805,1,1287,866,16,
0,455,1,1833,867,
16,0,455,1,1332,
868,16,0,455,1,
1584,869,16,0,455,
1,79,870,16,0,
455,1,76,871,16,
0,455,1,1538,755,
1,322,872,16,0,
455,1,85,873,16,
0,455,1,89,874,
16,0,455,1,346,
875,16,0,455,1,
97,876,16,0,455,
1,2107,768,1,2108,
734,1,1858,877,16,
0,455,1,102,878,
16,0,455,1,2111,
741,1,2113,673,1,
1112,879,16,0,186,
1,1115,880,16,0,
455,1,112,881,16,
0,455,1,1377,882,
16,0,455,1,1629,
883,16,0,455,1,
124,884,16,0,455,
1,1887,722,1,1888,
885,16,0,455,1,
137,886,16,0,455,
1,381,887,16,0,
455,1,1654,888,16,
0,455,1,151,889,
16,0,455,1,1159,
890,16,0,455,1,
1917,774,1,166,891,
16,0,455,1,1422,
892,16,0,455,1,
1926,704,1,1927,709,
1,1928,789,1,1929,
715,1,1930,795,1,
1681,893,16,0,455,
1,1934,826,1,1936,
729,1,431,894,16,
0,455,1,1938,832,
1,182,895,16,0,
455,1,1940,811,1,
1941,762,1,1197,896,
16,0,455,1,447,
897,16,0,455,1,
406,898,16,0,455,
1,199,899,16,0,
455,1,1707,781,1,
1709,900,16,0,455,
1,459,901,16,0,
455,1,462,902,16,
0,455,1,217,903,
16,0,455,1,1738,
904,16,0,455,1,
1490,683,1,236,905,
16,0,455,1,1932,
820,1,1242,906,16,
0,455,1,1501,907,
16,0,455,1,5,
908,19,185,1,5,
909,5,84,1,256,
910,16,0,438,1,
1764,695,1,1777,911,
16,0,438,1,525,
912,16,0,438,1,
509,913,16,0,438,
1,277,914,16,0,
438,1,32,915,16,
0,438,1,1540,916,
16,0,438,1,40,
917,16,0,189,1,
41,918,16,0,438,
1,43,919,16,0,
438,1,2303,920,16,
0,438,1,1802,921,
16,0,438,1,44,
922,16,0,189,1,
299,923,16,0,438,
1,47,924,16,0,
183,1,52,925,16,
0,438,1,2063,926,
16,0,438,1,63,
927,16,0,221,1,
66,928,16,0,207,
1,71,929,16,0,
438,1,1830,805,1,
1287,930,16,0,438,
1,1833,931,16,0,
438,1,1332,932,16,
0,438,1,1584,933,
16,0,438,1,79,
934,16,0,438,1,
76,935,16,0,438,
1,1538,755,1,322,
936,16,0,438,1,
85,937,16,0,438,
1,89,938,16,0,
438,1,346,939,16,
0,438,1,97,940,
16,0,438,1,2107,
768,1,2108,734,1,
1858,941,16,0,438,
1,102,942,16,0,
438,1,2111,741,1,
2113,673,1,1112,943,
16,0,183,1,1115,
944,16,0,438,1,
112,945,16,0,438,
1,1377,946,16,0,
438,1,1629,947,16,
0,438,1,124,948,
16,0,438,1,1887,
722,1,1888,949,16,
0,438,1,137,950,
16,0,438,1,381,
951,16,0,438,1,
1654,952,16,0,438,
1,151,953,16,0,
438,1,1159,954,16,
0,438,1,1917,774,
1,166,955,16,0,
438,1,1422,956,16,
0,438,1,1926,704,
1,1927,709,1,1928,
789,1,1929,715,1,
1930,795,1,1681,957,
16,0,438,1,1934,
826,1,1936,729,1,
431,958,16,0,438,
1,1938,832,1,182,
959,16,0,438,1,
1940,811,1,1941,762,
1,1197,960,16,0,
438,1,447,961,16,
0,438,1,406,962,
16,0,438,1,199,
963,16,0,438,1,
1707,781,1,1709,964,
16,0,438,1,459,
965,16,0,438,1,
462,966,16,0,438,
1,217,967,16,0,
438,1,1738,968,16,
0,438,1,1490,683,
1,236,969,16,0,
438,1,1932,820,1,
1242,970,16,0,438,
1,1501,971,16,0,
438,1,6,972,19,
388,1,6,973,5,
1,1,40,974,16,
0,386,1,7,975,
19,344,1,7,976,
5,1,1,40,977,
16,0,342,1,8,
978,19,315,1,8,
979,5,1,1,40,
980,16,0,313,1,
9,981,19,278,1,
9,982,5,1,1,
40,983,16,0,276,
1,10,984,19,229,
1,10,985,5,1,
1,40,986,16,0,
227,1,11,987,19,
239,1,11,988,5,
121,1,1255,989,17,
990,15,991,4,22,
37,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,992,20,993,4,
24,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,54,0,
1,193,1,3,1,
4,1,3,994,22,
1,57,1,1507,995,
17,996,15,997,4,
32,37,0,82,0,
101,0,116,0,117,
0,114,0,110,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,998,20,999,
4,34,82,0,101,
0,116,0,117,0,
114,0,110,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,203,1,3,
1,3,1,2,1000,
22,1,67,1,1763,
1001,16,0,237,1,
1764,695,1,9,1002,
17,1003,15,1004,4,
24,37,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
1,-1,1,5,1005,
20,1006,4,26,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,95,0,49,0,
1,158,1,3,1,
3,1,2,1007,22,
1,21,1,262,1008,
17,1009,15,1010,4,
34,37,0,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1011,
20,1012,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,53,0,
1,228,1,3,1,
4,1,3,1013,22,
1,92,1,480,1014,
17,1015,15,1016,4,
26,37,0,76,0,
105,0,115,0,116,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,-1,1,
5,1017,20,1018,4,
28,76,0,105,0,
115,0,116,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
95,0,49,0,1,
209,1,3,1,4,
1,3,1019,22,1,
73,1,19,1020,17,
1003,1,2,1007,1,
525,1021,17,1022,15,
1023,4,34,37,0,
82,0,111,0,116,
0,97,0,116,0,
105,0,111,0,110,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,-1,1,
5,1024,20,1025,4,
36,82,0,111,0,
116,0,97,0,116,
0,105,0,111,0,
110,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,95,0,
49,0,1,211,1,
3,1,10,1,9,
1026,22,1,75,1,
2032,1027,17,1028,15,
1029,4,34,37,0,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,1030,20,1031,4,
36,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,185,1,
3,1,2,1,1,
1032,22,1,49,1,
1284,1033,17,1034,15,
991,1,-1,1,5,
1035,20,1036,4,26,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,51,
0,1,200,1,3,
1,4,1,3,1037,
22,1,64,1,1536,
1038,16,0,466,1,
32,1039,16,0,423,
1,1635,1040,16,0,
611,1,40,1041,17,
1042,15,1043,4,32,
37,0,73,0,100,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1044,20,1045,4,
34,73,0,100,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,213,1,3,1,
2,1,1,1046,22,
1,77,1,283,1047,
17,1048,15,1010,1,
-1,1,5,1049,20,
1050,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,52,0,1,
227,1,3,1,4,
1,3,1051,22,1,
91,1,2302,1052,16,
0,255,1,44,1053,
17,1042,1,1,1046,
1,1802,1054,16,0,
423,1,47,1055,17,
1056,15,1057,4,38,
37,0,73,0,100,
0,101,0,110,0,
116,0,68,0,111,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1058,20,1059,
4,40,73,0,100,
0,101,0,110,0,
116,0,68,0,111,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,214,1,
3,1,4,1,3,
1060,22,1,78,1,
48,1061,17,1062,15,
1063,4,58,37,0,
73,0,110,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1064,20,1065,4,60,
73,0,110,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,52,0,
1,218,1,3,1,
5,1,4,1066,22,
1,82,1,49,1067,
17,1068,15,1063,1,
-1,1,5,1069,20,
1070,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,51,0,1,217,
1,3,1,5,1,
4,1071,22,1,81,
1,50,1072,17,1073,
15,1063,1,-1,1,
5,1074,20,1075,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,50,
0,1,216,1,3,
1,3,1,2,1076,
22,1,80,1,51,
1077,17,1078,15,1063,
1,-1,1,5,1079,
20,1080,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
215,1,3,1,3,
1,2,1081,22,1,
79,1,1937,1082,16,
0,396,1,305,1083,
17,1084,15,1010,1,
-1,1,5,1085,20,
1086,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,51,0,1,
226,1,3,1,4,
1,3,1087,22,1,
90,1,2063,1088,16,
0,423,1,63,1089,
17,1090,15,1091,4,
38,37,0,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1092,20,
1093,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,247,
1,3,1,5,1,
4,1094,22,1,111,
1,66,1095,17,1096,
15,1091,1,-1,1,
5,1097,20,1098,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,51,
0,1,248,1,3,
1,7,1,6,1099,
22,1,112,1,67,
1100,17,1101,15,1091,
1,-1,1,5,1102,
20,1103,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,55,0,1,
252,1,3,1,8,
1,7,1104,22,1,
116,1,68,1105,17,
1106,15,1091,1,-1,
1,5,1107,20,1108,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
53,0,1,250,1,
3,1,8,1,7,
1109,22,1,114,1,
69,1110,17,1111,15,
1091,1,-1,1,5,
1112,20,1113,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,54,0,
1,251,1,3,1,
6,1,5,1114,22,
1,115,1,70,1115,
17,1116,15,1091,1,
-1,1,5,1117,20,
1118,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,52,0,1,249,
1,3,1,6,1,
5,1119,22,1,113,
1,1830,805,1,1329,
1120,17,1121,15,991,
1,-1,1,5,1122,
20,1123,4,26,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,50,0,
1,199,1,3,1,
4,1,3,1124,22,
1,63,1,1046,1125,
17,1126,15,1010,1,
-1,1,5,1127,20,
1128,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,56,
0,1,241,1,3,
1,4,1,3,1129,
22,1,105,1,328,
1130,17,1131,15,1010,
1,-1,1,5,1132,
20,1133,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,50,0,
1,225,1,3,1,
4,1,3,1134,22,
1,89,1,74,1135,
17,1136,15,1091,1,
-1,1,5,1137,20,
1138,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,57,0,1,254,
1,3,1,7,1,
6,1139,22,1,118,
1,1490,683,1,82,
1140,17,1141,15,1142,
4,32,37,0,85,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1143,20,
1144,4,34,85,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
51,0,1,244,1,
3,1,3,1,2,
1145,22,1,108,1,
1300,1146,17,1147,15,
991,1,-1,1,5,
1148,20,1149,4,24,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,53,0,1,
192,1,3,1,4,
1,3,1150,22,1,
56,1,1345,1151,17,
1152,15,991,1,-1,
1,5,1153,20,1154,
4,24,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,52,
0,1,191,1,3,
1,4,1,3,1155,
22,1,55,1,1597,
1156,17,1157,15,1029,
1,-1,1,5,1158,
20,1159,4,36,70,
0,111,0,114,0,
76,0,111,0,111,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,51,0,
1,186,1,3,1,
4,1,3,1160,22,
1,50,1,93,1161,
17,1162,15,1142,1,
-1,1,5,1163,20,
1164,4,34,85,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
50,0,1,243,1,
3,1,3,1,2,
1165,22,1,107,1,
1553,1166,17,1167,15,
1029,1,-1,1,5,
1168,20,1169,4,36,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,184,1,3,
1,2,1,1,1170,
22,1,48,1,2107,
768,1,2108,734,1,
1858,1171,16,0,423,
1,2111,741,1,2113,
673,1,1011,1172,17,
1173,15,1174,4,44,
37,0,80,0,97,
0,114,0,101,0,
110,0,116,0,104,
0,101,0,115,0,
105,0,115,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1175,20,
1176,4,46,80,0,
97,0,114,0,101,
0,110,0,116,0,
104,0,101,0,115,
0,105,0,115,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,1,
245,1,3,1,4,
1,3,1177,22,1,
109,1,107,1178,17,
1179,15,1142,1,-1,
1,5,1180,20,1181,
4,34,85,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,242,1,3,
1,3,1,2,1182,
22,1,106,1,1112,
1183,17,1056,1,3,
1060,1,352,1184,17,
1185,15,1010,1,-1,
1,5,1186,20,1187,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,1,224,
1,3,1,4,1,
3,1188,22,1,88,
1,118,1189,17,1190,
15,1010,1,-1,1,
5,1191,20,1192,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,52,0,1,
237,1,3,1,4,
1,3,1193,22,1,
101,1,1374,1194,17,
1195,15,991,1,-1,
1,5,1196,20,1197,
4,26,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,49,0,1,198,
1,3,1,4,1,
3,1198,22,1,62,
1,371,1199,17,1200,
15,1201,4,46,37,
0,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1202,
20,1203,4,48,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
67,0,97,0,108,
0,108,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,223,1,
3,1,2,1,1,
1204,22,1,87,1,
1627,1205,17,1206,15,
1029,1,-1,1,5,
1207,20,1208,4,36,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,52,
0,1,187,1,3,
1,4,1,3,1209,
22,1,51,1,373,
1210,17,1211,15,1063,
1,-1,1,5,1212,
20,1213,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,54,0,1,
220,1,3,1,3,
1,2,1214,22,1,
84,1,1128,1215,17,
1216,15,991,1,-1,
1,5,1217,20,1218,
4,24,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,56,
0,1,195,1,3,
1,6,1,5,1219,
22,1,59,1,377,
1220,17,1221,15,1063,
1,-1,1,5,1222,
20,1223,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,53,0,1,
219,1,3,1,3,
1,2,1224,22,1,
83,1,827,1225,17,
1226,15,1010,1,-1,
1,5,1227,20,1228,
4,38,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,53,0,
1,238,1,3,1,
4,1,3,1229,22,
1,102,1,380,1230,
17,1231,15,1232,4,
38,37,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
-1,1,5,1233,20,
1234,4,40,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,1,212,
1,3,1,2,1,
1,1235,22,1,76,
1,130,1236,17,1237,
15,1010,1,-1,1,
5,1238,20,1239,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,51,0,1,
236,1,3,1,4,
1,3,1240,22,1,
100,1,1888,1241,16,
0,423,1,1538,755,
1,1390,1242,17,1243,
15,991,1,-1,1,
5,1244,20,1245,4,
24,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,51,0,
1,190,1,3,1,
4,1,3,1246,22,
1,54,1,375,1247,
17,1248,15,1063,1,
-1,1,5,1249,20,
1250,4,60,73,0,
110,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,56,0,1,222,
1,3,1,5,1,
4,1251,22,1,86,
1,379,1252,17,1253,
15,1063,1,-1,1,
5,1254,20,1255,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,55,
0,1,221,1,3,
1,5,1,4,1256,
22,1,85,1,143,
1257,17,1258,15,1010,
1,-1,1,5,1259,
20,1260,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
50,0,1,235,1,
3,1,4,1,3,
1261,22,1,99,1,
1157,1262,17,1263,15,
991,1,-1,1,5,
1264,20,1265,4,26,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,53,
0,1,202,1,3,
1,6,1,5,1266,
22,1,66,1,157,
1267,17,1268,15,1010,
1,-1,1,5,1269,
20,1270,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
49,0,1,234,1,
3,1,4,1,3,
1271,22,1,98,1,
883,1272,17,1273,15,
1010,1,-1,1,5,
1274,20,1275,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,54,0,1,239,
1,3,1,4,1,
3,1276,22,1,103,
1,1917,774,1,1165,
1277,17,1278,15,991,
1,-1,1,5,1279,
20,1280,4,24,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,188,
1,3,1,4,1,
3,1281,22,1,52,
1,1094,1282,17,1283,
15,1284,4,26,37,
0,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
1,-1,1,5,1285,
20,1286,4,28,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
67,0,97,0,108,
0,108,0,95,0,
49,0,1,255,1,
3,1,5,1,4,
1287,22,1,119,1,
1920,1288,17,1289,15,
1290,4,24,37,0,
83,0,116,0,97,
0,116,0,101,0,
67,0,104,0,97,
0,110,0,103,0,
101,0,1,-1,1,
5,1291,20,1292,4,
26,83,0,116,0,
97,0,116,0,101,
0,67,0,104,0,
97,0,110,0,103,
0,101,0,95,0,
50,0,1,178,1,
3,1,3,1,2,
1293,22,1,42,1,
1921,1294,17,1295,15,
1290,1,-1,1,5,
1296,20,1297,4,26,
83,0,116,0,97,
0,116,0,101,0,
67,0,104,0,97,
0,110,0,103,0,
101,0,95,0,49,
0,1,177,1,3,
1,3,1,2,1298,
22,1,41,1,1923,
1299,17,1300,15,1301,
4,28,37,0,74,
0,117,0,109,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1302,
20,1303,4,30,74,
0,117,0,109,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
176,1,3,1,3,
1,2,1304,22,1,
40,1,1925,1305,17,
1306,15,1307,4,20,
37,0,74,0,117,
0,109,0,112,0,
76,0,97,0,98,
0,101,0,108,0,
1,-1,1,5,1308,
20,1309,4,22,74,
0,117,0,109,0,
112,0,76,0,97,
0,98,0,101,0,
108,0,95,0,49,
0,1,175,1,3,
1,3,1,2,1310,
22,1,39,1,1926,
704,1,1927,709,1,
1928,789,1,172,1311,
17,1312,15,1010,1,
-1,1,5,1313,20,
1314,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,48,
0,1,233,1,3,
1,4,1,3,1315,
22,1,97,1,1930,
795,1,1931,1316,16,
0,384,1,1932,820,
1,1933,1317,16,0,
420,1,1934,826,1,
1935,1318,16,0,392,
1,1936,729,1,1435,
1319,17,1320,15,991,
1,-1,1,5,1321,
20,1322,4,24,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,189,
1,3,1,4,1,
3,1323,22,1,53,
1,1938,832,1,1939,
1324,16,0,398,1,
1940,811,1,1941,762,
1,188,1325,17,1326,
15,1010,1,-1,1,
5,1327,20,1328,4,
36,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
57,0,1,232,1,
3,1,4,1,3,
1329,22,1,96,1,
942,1330,17,1331,15,
1010,1,-1,1,5,
1332,20,1333,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,55,0,1,240,
1,3,1,4,1,
3,1334,22,1,104,
1,1887,722,1,447,
1335,17,1336,15,1337,
4,30,37,0,86,
0,101,0,99,0,
116,0,111,0,114,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,-1,1,
5,1338,20,1339,4,
32,86,0,101,0,
99,0,116,0,111,
0,114,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,49,0,1,210,
1,3,1,8,1,
7,1340,22,1,74,
1,2309,1341,16,0,
316,1,1707,781,1,
1709,1342,16,0,423,
1,205,1343,17,1344,
15,1010,1,-1,1,
5,1345,20,1346,4,
36,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
56,0,1,231,1,
3,1,4,1,3,
1347,22,1,95,1,
1210,1348,17,1349,15,
991,1,-1,1,5,
1350,20,1351,4,24,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,55,0,1,
194,1,3,1,4,
1,3,1352,22,1,
58,1,1464,1353,17,
1354,15,991,1,-1,
1,5,1355,20,1356,
4,24,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,57,
0,1,196,1,3,
1,4,1,3,1357,
22,1,60,1,1419,
1358,17,1359,15,991,
1,-1,1,5,1360,
20,1361,4,26,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,48,0,
1,197,1,3,1,
4,1,3,1362,22,
1,61,1,1471,1363,
16,0,442,1,223,
1364,17,1365,15,1010,
1,-1,1,5,1366,
20,1367,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,55,0,
1,230,1,3,1,
4,1,3,1368,22,
1,94,1,476,1369,
17,1370,15,1371,4,
18,37,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
-1,1,5,1372,20,
1373,4,20,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,52,0,1,208,
1,3,1,2,1,
1,1374,22,1,72,
1,477,1375,17,1376,
15,1371,1,-1,1,
5,1377,20,1378,4,
20,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,51,
0,1,207,1,3,
1,2,1,1,1379,
22,1,71,1,478,
1380,17,1381,15,1371,
1,-1,1,5,1382,
20,1383,4,20,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
95,0,50,0,1,
206,1,3,1,2,
1,1,1384,22,1,
70,1,479,1385,17,
1386,15,1371,1,-1,
1,5,1387,20,1388,
4,20,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,95,0,
49,0,1,205,1,
3,1,2,1,1,
1389,22,1,69,1,
1681,1390,16,0,423,
1,1583,1391,16,0,
257,1,1929,715,1,
1239,1392,17,1393,15,
991,1,-1,1,5,
1394,20,1395,4,26,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,52,
0,1,201,1,3,
1,4,1,3,1396,
22,1,65,1,242,
1397,17,1398,15,1010,
1,-1,1,5,1399,
20,1400,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,54,0,
1,229,1,3,1,
4,1,3,1401,22,
1,93,1,1501,1402,
17,1403,15,997,1,
-1,1,5,1404,20,
1405,4,34,82,0,
101,0,116,0,117,
0,114,0,110,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,204,1,
3,1,2,1,1,
1406,22,1,68,1,
1001,1407,17,1408,15,
1091,1,-1,1,5,
1409,20,1410,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,56,0,
1,253,1,3,1,
5,1,4,1411,22,
1,117,1,1002,1412,
17,1413,15,1091,1,
-1,1,5,1414,20,
1415,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,1,246,
1,3,1,5,1,
4,1416,22,1,110,
1,12,1417,19,161,
1,12,1418,5,34,
1,1858,1419,16,0,
159,1,2298,1420,16,
0,159,1,1490,683,
1,1709,1421,16,0,
159,1,1764,695,1,
2207,1422,16,0,326,
1,31,1423,16,0,
159,1,32,1424,16,
0,159,1,1887,722,
1,1888,1425,16,0,
159,1,2107,768,1,
2108,734,1,2111,741,
1,2113,673,1,1681,
1426,16,0,159,1,
2118,1427,16,0,484,
1,1802,1428,16,0,
159,1,1538,755,1,
1917,774,1,1707,781,
1,1926,704,1,1927,
709,1,1928,789,1,
1929,715,1,1930,795,
1,1932,820,1,1934,
826,1,1936,729,1,
1938,832,1,1830,805,
1,1940,811,1,1941,
762,1,2165,1429,16,
0,159,1,2063,1430,
16,0,159,1,13,
1431,19,329,1,13,
1432,5,29,1,1490,
683,1,1764,695,1,
2204,1433,17,1434,15,
1435,4,20,37,0,
83,0,116,0,97,
0,116,0,101,0,
66,0,111,0,100,
0,121,0,1,-1,
1,5,1436,20,1437,
4,22,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,50,0,1,
154,1,3,1,3,
1,2,1438,22,1,
16,1,2206,1439,17,
1440,15,1435,1,-1,
1,5,1441,20,1442,
4,22,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
95,0,49,0,1,
153,1,3,1,2,
1,1,1443,22,1,
15,1,32,1444,16,
0,479,1,1887,722,
1,2107,768,1,2108,
734,1,2111,741,1,
2113,673,1,1538,755,
1,2243,1445,16,0,
327,1,1917,774,1,
1707,781,1,1926,704,
1,1927,709,1,1928,
789,1,1929,715,1,
1930,795,1,1932,820,
1,1934,826,1,1936,
729,1,1938,832,1,
1830,805,1,1940,811,
1,1941,762,1,2167,
1446,17,1447,15,1448,
4,22,37,0,83,
0,116,0,97,0,
116,0,101,0,69,
0,118,0,101,0,
110,0,116,0,1,
-1,1,5,1449,20,
1450,4,24,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,1,155,1,
3,1,6,1,5,
1451,22,1,17,1,
2169,1452,16,0,604,
1,2063,1453,16,0,
581,1,14,1454,19,
150,1,14,1455,5,
94,1,1255,989,1,
1011,1172,1,9,1002,
1,10,1456,17,1457,
15,1458,4,48,37,
0,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,1,-1,1,
5,146,1,0,1,
0,1459,22,1,18,
1,262,1008,1,19,
1020,1,20,1460,16,
0,148,1,525,1021,
1,2032,1027,1,2287,
1461,17,1462,15,1458,
1,-1,1,5,146,
1,0,1,0,1459,
1,1284,1033,1,30,
1463,17,1464,15,1458,
1,-1,1,5,1465,
20,1466,4,50,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,76,0,105,
0,115,0,116,0,
95,0,50,0,1,
157,1,3,1,4,
1,3,1467,22,1,
20,1,283,1047,1,
2296,1468,16,0,148,
1,40,1041,1,41,
1469,17,1470,15,1471,
4,26,37,0,65,
0,114,0,103,0,
117,0,109,0,101,
0,110,0,116,0,
76,0,105,0,115,
0,116,0,1,-1,
1,5,518,1,0,
1,0,1472,22,1,
120,1,42,1473,17,
1474,15,1475,4,38,
37,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1476,20,1477,
4,40,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,1,258,1,
3,1,2,1,1,
1478,22,1,123,1,
44,1053,1,1300,1146,
1,1553,1166,1,48,
1061,1,49,1067,1,
47,1055,1,51,1077,
1,50,1072,1,305,
1083,1,63,1089,1,
66,1095,1,67,1100,
1,68,1105,1,69,
1110,1,70,1115,1,
1329,1120,1,1046,1125,
1,328,1130,1,74,
1135,1,82,1140,1,
1092,1479,16,0,520,
1,1345,1151,1,1597,
1156,1,93,1161,1,
352,1184,1,107,1178,
1,2116,1480,17,1481,
15,1458,1,-1,1,
5,1482,20,1483,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,49,
0,1,156,1,3,
1,2,1,1,1484,
22,1,19,1,118,
1189,1,1374,1194,1,
371,1199,1,1627,1205,
1,373,1210,1,1128,
1215,1,377,1220,1,
379,1252,1,380,1230,
1,130,1236,1,1390,
1242,1,387,1485,16,
0,463,1,375,1247,
1,143,1257,1,1112,
1183,1,2154,1486,17,
1487,15,1458,1,-1,
1,5,146,1,0,
1,0,1459,1,1157,
1262,1,827,1225,1,
157,1267,1,883,1272,
1,1165,1277,1,1094,
1282,1,1419,1358,1,
172,1311,1,1679,1488,
16,0,540,1,412,
1489,16,0,471,1,
1583,1490,16,0,540,
1,1435,1319,1,437,
1491,16,0,582,1,
188,1325,1,942,1330,
1,447,1335,1,205,
1343,1,1210,1348,1,
459,1492,17,1493,15,
1471,1,-1,1,5,
518,1,0,1,0,
1472,1,1464,1353,1,
461,1494,16,0,520,
1,464,1495,17,1496,
15,1471,1,-1,1,
5,1497,20,1498,4,
28,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
95,0,50,0,1,
257,1,3,1,4,
1,3,1499,22,1,
122,1,223,1364,1,
2163,1500,16,0,148,
1,476,1369,1,477,
1375,1,478,1380,1,
479,1385,1,480,1014,
1,481,1501,17,1502,
15,1471,1,-1,1,
5,1503,20,1504,4,
28,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
95,0,49,0,1,
256,1,3,1,2,
1,1,1505,22,1,
121,1,1239,1392,1,
242,1397,1,1001,1407,
1,1002,1412,1,15,
1506,19,167,1,15,
1507,5,7,1,1112,
1508,16,0,165,1,
1158,1509,16,0,178,
1,1536,1510,16,0,
178,1,2302,1511,16,
0,217,1,40,1512,
16,0,411,1,19,
1020,1,9,1002,1,
16,1513,19,136,1,
16,1514,5,122,1,
256,1515,16,0,191,
1,1764,695,1,9,
1516,16,0,134,1,
2139,1517,17,1518,15,
1519,4,12,37,0,
69,0,118,0,101,
0,110,0,116,0,
1,-1,1,5,1520,
20,1521,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,52,0,
1,279,1,3,1,
2,1,1,1522,22,
1,144,1,1776,1523,
16,0,251,1,1777,
1524,16,0,191,1,
525,1525,16,0,191,
1,509,1526,16,0,
191,1,277,1527,16,
0,191,1,2286,1528,
16,0,200,1,1538,
755,1,1539,1529,16,
0,470,1,1540,1530,
16,0,191,1,32,
1531,16,0,191,1,
40,1532,16,0,172,
1,41,1533,16,0,
191,1,43,1534,16,
0,191,1,2303,1535,
16,0,191,1,1802,
1536,16,0,191,1,
44,1537,16,0,172,
1,299,1538,16,0,
191,1,52,1539,16,
0,191,1,2063,1540,
16,0,191,1,62,
1541,16,0,211,1,
63,1542,16,0,172,
1,71,1543,16,0,
191,1,1830,805,1,
1287,1544,16,0,191,
1,1832,1545,16,0,
305,1,1833,1546,16,
0,191,1,1332,1547,
16,0,191,1,1584,
1548,16,0,191,1,
79,1549,16,0,191,
1,76,1550,16,0,
191,1,322,1551,16,
0,191,1,85,1552,
16,0,191,1,89,
1553,16,0,191,1,
346,1554,16,0,191,
1,97,1555,16,0,
191,1,2107,768,1,
2108,734,1,1858,1556,
16,0,191,1,102,
1557,16,0,191,1,
2111,741,1,2113,673,
1,1115,1558,16,0,
191,1,112,1559,16,
0,191,1,2121,1560,
17,1561,15,1519,1,
-1,1,5,1562,20,
1563,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
51,0,50,0,1,
297,1,3,1,2,
1,1,1564,22,1,
162,1,2122,1565,17,
1566,15,1519,1,-1,
1,5,1567,20,1568,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,51,
0,49,0,1,296,
1,3,1,2,1,
1,1569,22,1,161,
1,2123,1570,17,1571,
15,1519,1,-1,1,
5,1572,20,1573,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,51,0,
48,0,1,295,1,
3,1,2,1,1,
1574,22,1,160,1,
2124,1575,17,1576,15,
1519,1,-1,1,5,
1577,20,1578,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,57,
0,1,294,1,3,
1,2,1,1,1579,
22,1,159,1,2125,
1580,17,1581,15,1519,
1,-1,1,5,1582,
20,1583,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,56,0,
1,293,1,3,1,
2,1,1,1584,22,
1,158,1,2126,1585,
17,1586,15,1519,1,
-1,1,5,1587,20,
1588,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,55,0,1,
292,1,3,1,2,
1,1,1589,22,1,
157,1,2127,1590,17,
1591,15,1519,1,-1,
1,5,1592,20,1593,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,54,0,1,291,
1,3,1,2,1,
1,1594,22,1,156,
1,2128,1595,17,1596,
15,1519,1,-1,1,
5,1597,20,1598,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,50,0,
53,0,1,290,1,
3,1,2,1,1,
1599,22,1,155,1,
2129,1600,17,1601,15,
1519,1,-1,1,5,
1602,20,1603,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,52,
0,1,289,1,3,
1,2,1,1,1604,
22,1,154,1,1377,
1605,16,0,191,1,
1629,1606,16,0,191,
1,124,1607,16,0,
191,1,2133,1608,17,
1609,15,1519,1,-1,
1,5,1610,20,1611,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,48,0,1,285,
1,3,1,2,1,
1,1612,22,1,150,
1,2134,1613,17,1614,
15,1519,1,-1,1,
5,1615,20,1616,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
57,0,1,284,1,
3,1,2,1,1,
1617,22,1,149,1,
2135,1618,17,1619,15,
1519,1,-1,1,5,
1620,20,1621,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,56,
0,1,283,1,3,
1,2,1,1,1622,
22,1,148,1,2136,
1623,17,1624,15,1519,
1,-1,1,5,1625,
20,1626,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,55,0,
1,282,1,3,1,
2,1,1,1627,22,
1,147,1,2137,1628,
17,1629,15,1519,1,
-1,1,5,1630,20,
1631,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,54,0,1,
281,1,3,1,2,
1,1,1632,22,1,
146,1,1887,722,1,
1888,1633,16,0,191,
1,2140,1634,17,1635,
15,1519,1,-1,1,
5,1636,20,1637,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
51,0,1,278,1,
3,1,2,1,1,
1638,22,1,143,1,
2141,1639,17,1640,15,
1519,1,-1,1,5,
1641,20,1642,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,50,
0,1,277,1,3,
1,2,1,1,1643,
22,1,142,1,2142,
1644,17,1645,15,1519,
1,-1,1,5,1646,
20,1647,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,49,0,
1,276,1,3,1,
2,1,1,1648,22,
1,141,1,2143,1649,
17,1650,15,1519,1,
-1,1,5,1651,20,
1652,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,48,0,1,
275,1,3,1,2,
1,1,1653,22,1,
140,1,2144,1654,17,
1655,15,1519,1,-1,
1,5,1656,20,1657,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,57,
0,1,274,1,3,
1,2,1,1,1658,
22,1,139,1,137,
1659,16,0,191,1,
2146,1660,17,1661,15,
1519,1,-1,1,5,
1662,20,1663,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,55,0,1,
272,1,3,1,2,
1,1,1664,22,1,
137,1,2147,1665,17,
1666,15,1519,1,-1,
1,5,1667,20,1668,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,54,
0,1,271,1,3,
1,2,1,1,1669,
22,1,136,1,2148,
1670,17,1671,15,1519,
1,-1,1,5,1672,
20,1673,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,53,0,1,270,
1,3,1,2,1,
1,1674,22,1,135,
1,2149,1675,17,1676,
15,1519,1,-1,1,
5,1677,20,1678,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,52,0,
1,269,1,3,1,
2,1,1,1679,22,
1,134,1,2150,1680,
17,1681,15,1519,1,
-1,1,5,1682,20,
1683,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
51,0,1,268,1,
3,1,2,1,1,
1684,22,1,133,1,
381,1685,16,0,191,
1,2152,1686,17,1687,
15,1519,1,-1,1,
5,1688,20,1689,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
1,266,1,3,1,
2,1,1,1690,22,
1,131,1,2153,1691,
16,0,630,1,1654,
1692,16,0,191,1,
151,1693,16,0,191,
1,1159,1694,16,0,
191,1,1917,774,1,
166,1695,16,0,191,
1,1422,1696,16,0,
191,1,1926,704,1,
1927,709,1,1928,789,
1,1929,715,1,1930,
795,1,1681,1697,16,
0,191,1,1934,826,
1,1936,729,1,431,
1698,16,0,191,1,
1938,832,1,182,1699,
16,0,191,1,1940,
811,1,1941,762,1,
2130,1700,17,1701,15,
1519,1,-1,1,5,
1702,20,1703,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,51,
0,1,288,1,3,
1,2,1,1,1704,
22,1,153,1,2131,
1705,17,1706,15,1519,
1,-1,1,5,1707,
20,1708,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,50,0,
1,287,1,3,1,
2,1,1,1709,22,
1,152,1,2132,1710,
17,1711,15,1519,1,
-1,1,5,1712,20,
1713,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,49,0,1,
286,1,3,1,2,
1,1,1714,22,1,
151,1,1197,1715,16,
0,191,1,447,1716,
16,0,191,1,406,
1717,16,0,191,1,
2138,1718,17,1719,15,
1519,1,-1,1,5,
1720,20,1721,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,53,
0,1,280,1,3,
1,2,1,1,1722,
22,1,145,1,199,
1723,16,0,191,1,
1707,781,1,1709,1724,
16,0,191,1,2145,
1725,17,1726,15,1519,
1,-1,1,5,1727,
20,1728,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,56,0,1,273,
1,3,1,2,1,
1,1729,22,1,138,
1,459,1730,16,0,
191,1,462,1731,16,
0,191,1,2151,1732,
17,1733,15,1519,1,
-1,1,5,1734,20,
1735,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,1,267,1,
3,1,2,1,1,
1736,22,1,132,1,
217,1737,16,0,191,
1,1737,1738,16,0,
270,1,1738,1739,16,
0,191,1,1490,683,
1,236,1740,16,0,
191,1,1932,820,1,
1242,1741,16,0,191,
1,1501,1742,16,0,
191,1,2120,1743,17,
1744,15,1519,1,-1,
1,5,1745,20,1746,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,51,
0,51,0,1,298,
1,3,1,2,1,
1,1747,22,1,163,
1,17,1748,19,158,
1,17,1749,5,102,
1,1255,989,1,1,
1750,17,1751,15,1752,
4,18,37,0,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
1,-1,1,5,1753,
20,1754,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,55,0,1,
265,1,3,1,2,
1,1,1755,22,1,
130,1,2,1756,17,
1757,15,1752,1,-1,
1,5,1758,20,1759,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
54,0,1,264,1,
3,1,2,1,1,
1760,22,1,129,1,
3,1761,17,1762,15,
1752,1,-1,1,5,
1763,20,1764,4,20,
84,0,121,0,112,
0,101,0,110,0,
97,0,109,0,101,
0,95,0,53,0,
1,263,1,3,1,
2,1,1,1765,22,
1,128,1,4,1766,
17,1767,15,1752,1,
-1,1,5,1768,20,
1769,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,52,0,1,262,
1,3,1,2,1,
1,1770,22,1,127,
1,5,1771,17,1772,
15,1752,1,-1,1,
5,1773,20,1774,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,51,
0,1,261,1,3,
1,2,1,1,1775,
22,1,126,1,6,
1776,17,1777,15,1752,
1,-1,1,5,1778,
20,1779,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,50,0,1,
260,1,3,1,2,
1,1,1780,22,1,
125,1,7,1781,17,
1782,15,1752,1,-1,
1,5,1783,20,1784,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
49,0,1,259,1,
3,1,2,1,1,
1785,22,1,124,1,
9,1002,1,10,1456,
1,262,1008,1,19,
1020,1,20,1786,16,
0,156,1,525,1021,
1,2032,1027,1,1783,
1787,16,0,280,1,
2287,1461,1,1284,1033,
1,30,1463,1,283,
1047,1,2296,1788,16,
0,406,1,1010,1789,
16,0,498,1,40,
1041,1,41,1469,1,
42,1473,1,44,1053,
1,1300,1146,1,1553,
1166,1,48,1061,1,
49,1067,1,47,1055,
1,51,1077,1,50,
1072,1,305,1083,1,
61,1790,16,0,202,
1,63,1089,1,66,
1095,1,67,1100,1,
68,1105,1,69,1110,
1,70,1115,1,73,
1791,16,0,216,1,
1329,1120,1,1046,1125,
1,328,1130,1,74,
1135,1,82,1140,1,
1092,1792,16,0,607,
1,1345,1151,1,1597,
1156,1,93,1161,1,
352,1184,1,1011,1172,
1,107,1178,1,2116,
1480,1,118,1189,1,
1374,1194,1,371,1199,
1,1627,1205,1,373,
1210,1,1128,1215,1,
377,1220,1,379,1252,
1,380,1230,1,130,
1236,1,1390,1242,1,
375,1247,1,1839,1793,
16,0,324,1,143,
1257,1,1112,1183,1,
2154,1486,1,1157,1262,
1,827,1225,1,157,
1267,1,883,1272,1,
1165,1277,1,1094,1282,
1,1419,1358,1,172,
1311,1,1679,1794,16,
0,204,1,1435,1319,
1,188,1325,1,942,
1330,1,447,1335,1,
205,1343,1,1210,1348,
1,459,1492,1,1464,
1353,1,464,1495,1,
223,1364,1,2163,1795,
16,0,578,1,476,
1369,1,477,1375,1,
478,1380,1,479,1385,
1,480,1014,1,481,
1501,1,1239,1392,1,
1744,1796,16,0,236,
1,242,1397,1,1001,
1407,1,1002,1412,1,
18,1797,19,429,1,
18,1798,5,77,1,
1744,1799,16,0,427,
1,1435,1800,16,0,
427,1,1094,1282,1,
223,1801,16,0,427,
1,118,1802,16,0,
427,1,1001,1407,1,
1210,1803,16,0,427,
1,328,1130,1,437,
1804,16,0,427,1,
1390,1805,16,0,427,
1,2309,1806,16,0,
427,1,130,1807,16,
0,427,1,1112,1183,
1,942,1808,16,0,
427,1,242,1809,16,
0,427,1,352,1184,
1,447,1335,1,1553,
1810,16,0,427,1,
1010,1811,16,0,427,
1,1011,1172,1,143,
1812,16,0,427,1,
1345,1813,16,0,427,
1,1128,1814,16,0,
427,1,1783,1815,16,
0,427,1,40,1041,
1,477,1375,1,42,
1816,16,0,427,1,
479,1385,1,44,1053,
1,373,1210,1,47,
1055,1,48,1061,1,
49,1067,1,50,1072,
1,51,1077,1,379,
1252,1,380,1230,1,
157,1817,16,0,427,
1,1255,1818,16,0,
427,1,371,1199,1,
478,1380,1,387,1819,
16,0,427,1,375,
1247,1,63,1089,1,
262,1008,1,283,1047,
1,66,1095,1,67,
1100,1,68,1105,1,
69,1110,1,70,1115,
1,1597,1820,16,0,
427,1,476,1369,1,
73,1821,16,0,427,
1,74,1135,1,1165,
1822,16,0,427,1,
377,1220,1,172,1823,
16,0,427,1,480,
1014,1,188,1824,16,
0,427,1,82,1825,
16,0,427,1,412,
1826,16,0,427,1,
1471,1827,16,0,427,
1,305,1083,1,525,
1021,1,1507,1828,16,
0,427,1,827,1829,
16,0,427,1,93,
1161,1,1839,1830,16,
0,427,1,205,1831,
16,0,427,1,515,
1832,16,0,427,1,
883,1833,16,0,427,
1,1046,1834,16,0,
427,1,1002,1412,1,
1300,1835,16,0,427,
1,1635,1836,16,0,
427,1,107,1837,16,
0,427,1,19,1838,
19,235,1,19,1839,
5,153,1,1255,1840,
16,0,416,1,1507,
1841,16,0,416,1,
1654,1842,16,0,233,
1,256,1843,16,0,
233,1,1010,1844,16,
0,416,1,1764,695,
1,262,1008,1,515,
1845,16,0,416,1,
1777,1846,16,0,233,
1,525,1847,16,0,
233,1,509,1848,16,
0,233,1,1783,1849,
16,0,416,1,1242,
1850,16,0,233,1,
1538,755,1,32,1851,
16,0,233,1,1540,
1852,16,0,233,1,
277,1853,16,0,233,
1,1635,1854,16,0,
416,1,40,1041,1,
41,1855,16,0,233,
1,42,1856,16,0,
416,1,43,1857,16,
0,233,1,2303,1858,
16,0,233,1,1802,
1859,16,0,233,1,
44,1053,1,48,1061,
1,49,1067,1,47,
1055,1,51,1077,1,
52,1860,16,0,233,
1,50,1072,1,305,
1083,1,2063,1861,16,
0,233,1,299,1862,
16,0,233,1,283,
1047,1,63,1089,1,
66,1095,1,67,1100,
1,68,1105,1,69,
1110,1,70,1115,1,
71,1863,16,0,233,
1,73,1864,16,0,
416,1,74,1135,1,
1833,1865,16,0,233,
1,1332,1866,16,0,
233,1,1584,1867,16,
0,233,1,79,1868,
16,0,233,1,76,
1869,16,0,233,1,
82,1870,16,0,416,
1,322,1871,16,0,
233,1,85,1872,16,
0,233,1,1300,1873,
16,0,416,1,89,
1874,16,0,233,1,
1345,1875,16,0,416,
1,1597,1876,16,0,
416,1,93,1161,1,
346,1877,16,0,233,
1,97,1878,16,0,
233,1,2107,768,1,
2108,734,1,1858,1879,
16,0,233,1,102,
1880,16,0,233,1,
2111,741,1,2113,673,
1,1011,1172,1,107,
1881,16,0,416,1,
1112,1183,1,1046,1882,
16,0,416,1,1115,
1883,16,0,233,1,
112,1884,16,0,233,
1,328,1130,1,352,
1184,1,1287,1885,16,
0,233,1,118,1886,
16,0,416,1,371,
1199,1,1377,1887,16,
0,233,1,1629,1888,
16,0,233,1,124,
1889,16,0,233,1,
377,1220,1,827,1890,
16,0,416,1,380,
1230,1,130,1891,16,
0,416,1,1888,1892,
16,0,233,1,1830,
805,1,1390,1893,16,
0,416,1,387,1894,
16,0,416,1,137,
1895,16,0,233,1,
1839,1896,16,0,416,
1,143,1897,16,0,
416,1,1553,1898,16,
0,416,1,373,1210,
1,375,1247,1,151,
1899,16,0,233,1,
379,1252,1,1159,1900,
16,0,233,1,381,
1901,16,0,233,1,
157,1902,16,0,416,
1,883,1903,16,0,
416,1,1917,774,1,
1128,1904,16,0,416,
1,1094,1282,1,166,
1905,16,0,233,1,
1422,1906,16,0,233,
1,1926,704,1,1927,
709,1,1928,789,1,
172,1907,16,0,416,
1,1930,795,1,1681,
1908,16,0,233,1,
1934,826,1,1936,729,
1,1435,1909,16,0,
416,1,1938,832,1,
182,1910,16,0,233,
1,1940,811,1,1941,
762,1,437,1911,16,
0,416,1,188,1912,
16,0,416,1,942,
1913,16,0,416,1,
1887,722,1,1197,1914,
16,0,233,1,431,
1915,16,0,233,1,
447,1916,16,0,233,
1,406,1917,16,0,
233,1,2309,1918,16,
0,416,1,1165,1919,
16,0,416,1,1707,
781,1,1709,1920,16,
0,233,1,205,1921,
16,0,416,1,1210,
1922,16,0,416,1,
199,1923,16,0,233,
1,459,1924,16,0,
233,1,462,1925,16,
0,233,1,1471,1926,
16,0,416,1,217,
1927,16,0,233,1,
223,1928,16,0,416,
1,476,1369,1,477,
1375,1,478,1380,1,
479,1385,1,480,1014,
1,412,1929,16,0,
416,1,1738,1930,16,
0,233,1,1929,715,
1,1490,683,1,236,
1931,16,0,233,1,
1932,820,1,1744,1932,
16,0,416,1,242,
1933,16,0,416,1,
1501,1934,16,0,233,
1,1001,1407,1,1002,
1412,1,20,1935,19,
409,1,20,1936,5,
77,1,1744,1937,16,
0,407,1,1435,1938,
16,0,407,1,1094,
1282,1,223,1939,16,
0,407,1,118,1940,
16,0,407,1,1001,
1407,1,1210,1941,16,
0,407,1,328,1942,
16,0,407,1,437,
1943,16,0,407,1,
1390,1944,16,0,407,
1,2309,1945,16,0,
407,1,130,1946,16,
0,407,1,1112,1183,
1,942,1947,16,0,
407,1,242,1948,16,
0,407,1,352,1949,
16,0,407,1,447,
1335,1,1553,1950,16,
0,407,1,1010,1951,
16,0,407,1,1011,
1172,1,143,1952,16,
0,407,1,1345,1953,
16,0,407,1,1128,
1954,16,0,407,1,
1783,1955,16,0,407,
1,40,1041,1,477,
1375,1,42,1956,16,
0,407,1,479,1385,
1,44,1053,1,373,
1210,1,47,1055,1,
48,1061,1,49,1067,
1,50,1072,1,51,
1077,1,379,1252,1,
380,1230,1,157,1957,
16,0,407,1,1255,
1958,16,0,407,1,
371,1199,1,478,1380,
1,387,1959,16,0,
407,1,375,1247,1,
63,1089,1,262,1008,
1,283,1047,1,66,
1095,1,67,1100,1,
68,1105,1,69,1110,
1,70,1115,1,1597,
1960,16,0,407,1,
476,1369,1,73,1961,
16,0,407,1,74,
1135,1,1165,1962,16,
0,407,1,377,1220,
1,172,1963,16,0,
407,1,480,1014,1,
188,1964,16,0,407,
1,82,1965,16,0,
407,1,412,1966,16,
0,407,1,1471,1967,
16,0,407,1,305,
1083,1,525,1021,1,
1507,1968,16,0,407,
1,827,1969,16,0,
407,1,93,1161,1,
1839,1970,16,0,407,
1,205,1971,16,0,
407,1,515,1972,16,
0,407,1,883,1973,
16,0,407,1,1046,
1974,16,0,407,1,
1002,1412,1,1300,1975,
16,0,407,1,1635,
1976,16,0,407,1,
107,1977,16,0,407,
1,21,1978,19,403,
1,21,1979,5,77,
1,1744,1980,16,0,
401,1,1435,1981,16,
0,401,1,1094,1282,
1,223,1982,16,0,
401,1,118,1983,16,
0,401,1,1001,1407,
1,1210,1984,16,0,
401,1,328,1985,16,
0,401,1,437,1986,
16,0,401,1,1390,
1987,16,0,401,1,
2309,1988,16,0,401,
1,130,1989,16,0,
401,1,1112,1183,1,
942,1990,16,0,401,
1,242,1991,16,0,
401,1,352,1992,16,
0,401,1,447,1335,
1,1553,1993,16,0,
401,1,1010,1994,16,
0,401,1,1011,1172,
1,143,1995,16,0,
401,1,1345,1996,16,
0,401,1,1128,1997,
16,0,401,1,1783,
1998,16,0,401,1,
40,1041,1,477,1375,
1,42,1999,16,0,
401,1,479,1385,1,
44,1053,1,373,1210,
1,47,1055,1,48,
1061,1,49,1067,1,
50,1072,1,51,1077,
1,379,1252,1,380,
1230,1,157,2000,16,
0,401,1,1255,2001,
16,0,401,1,371,
1199,1,478,1380,1,
387,2002,16,0,401,
1,375,1247,1,63,
1089,1,262,1008,1,
283,1047,1,66,1095,
1,67,1100,1,68,
1105,1,69,1110,1,
70,1115,1,1597,2003,
16,0,401,1,476,
1369,1,73,2004,16,
0,401,1,74,1135,
1,1165,2005,16,0,
401,1,377,1220,1,
172,2006,16,0,401,
1,480,1014,1,188,
2007,16,0,401,1,
82,2008,16,0,401,
1,412,2009,16,0,
401,1,1471,2010,16,
0,401,1,305,1083,
1,525,1021,1,1507,
2011,16,0,401,1,
827,2012,16,0,401,
1,93,1161,1,1839,
2013,16,0,401,1,
205,2014,16,0,401,
1,515,2015,16,0,
401,1,883,2016,16,
0,401,1,1046,2017,
16,0,401,1,1002,
1412,1,1300,2018,16,
0,401,1,1635,2019,
16,0,401,1,107,
2020,16,0,401,1,
22,2021,19,373,1,
22,2022,5,77,1,
1744,2023,16,0,371,
1,1435,2024,16,0,
371,1,1094,1282,1,
223,2025,16,0,371,
1,118,2026,16,0,
371,1,1001,1407,1,
1210,2027,16,0,371,
1,328,2028,16,0,
371,1,437,2029,16,
0,371,1,1390,2030,
16,0,371,1,2309,
2031,16,0,371,1,
130,2032,16,0,371,
1,1112,1183,1,942,
2033,16,0,371,1,
242,2034,16,0,371,
1,352,2035,16,0,
371,1,447,1335,1,
1553,2036,16,0,371,
1,1010,2037,16,0,
371,1,1011,1172,1,
143,2038,16,0,371,
1,1345,2039,16,0,
371,1,1128,2040,16,
0,371,1,1783,2041,
16,0,371,1,40,
1041,1,477,1375,1,
42,2042,16,0,371,
1,479,1385,1,44,
1053,1,373,1210,1,
47,1055,1,48,1061,
1,49,1067,1,50,
1072,1,51,1077,1,
379,1252,1,380,1230,
1,157,2043,16,0,
371,1,1255,2044,16,
0,371,1,371,1199,
1,478,1380,1,387,
2045,16,0,371,1,
375,1247,1,63,1089,
1,262,1008,1,283,
1047,1,66,1095,1,
67,1100,1,68,1105,
1,69,1110,1,70,
1115,1,1597,2046,16,
0,371,1,476,1369,
1,73,2047,16,0,
371,1,74,1135,1,
1165,2048,16,0,371,
1,377,1220,1,172,
2049,16,0,371,1,
480,1014,1,188,2050,
16,0,371,1,82,
2051,16,0,371,1,
412,2052,16,0,371,
1,1471,2053,16,0,
371,1,305,1083,1,
525,1021,1,1507,2054,
16,0,371,1,827,
2055,16,0,371,1,
93,1161,1,1839,2056,
16,0,371,1,205,
2057,16,0,371,1,
515,2058,16,0,371,
1,883,2059,16,0,
371,1,1046,2060,16,
0,371,1,1002,1412,
1,1300,2061,16,0,
371,1,1635,2062,16,
0,371,1,107,2063,
16,0,371,1,23,
2064,19,368,1,23,
2065,5,29,1,1858,
2066,16,0,366,1,
1490,683,1,1709,2067,
16,0,366,1,1764,
695,1,32,2068,16,
0,366,1,1887,722,
1,1888,2069,16,0,
366,1,2107,768,1,
2108,734,1,2111,741,
1,2113,673,1,1681,
2070,16,0,366,1,
1802,2071,16,0,366,
1,1538,755,1,1917,
774,1,1707,781,1,
1926,704,1,1927,709,
1,1928,789,1,1929,
715,1,1930,795,1,
1932,820,1,1934,826,
1,1936,729,1,1938,
832,1,1830,805,1,
1940,811,1,1941,762,
1,2063,2072,16,0,
366,1,24,2073,19,
181,1,24,2074,5,
5,1,44,2075,16,
0,179,1,377,2076,
16,0,444,1,40,
2077,16,0,631,1,
63,2078,16,0,209,
1,373,2079,16,0,
440,1,25,2080,19,
308,1,25,2081,5,
154,1,1255,2082,16,
0,306,1,1507,2083,
16,0,306,1,1654,
2084,16,0,449,1,
256,2085,16,0,449,
1,1010,2086,16,0,
306,1,1764,695,1,
262,1008,1,515,2087,
16,0,306,1,1777,
2088,16,0,449,1,
525,2089,16,0,449,
1,509,2090,16,0,
449,1,1783,2091,16,
0,306,1,1242,2092,
16,0,449,1,1538,
755,1,32,2093,16,
0,449,1,1540,2094,
16,0,449,1,277,
2095,16,0,449,1,
1635,2096,16,0,306,
1,40,1041,1,41,
2097,16,0,449,1,
42,2098,16,0,306,
1,43,2099,16,0,
449,1,2303,2100,16,
0,449,1,1802,2101,
16,0,449,1,44,
1053,1,48,1061,1,
49,1067,1,47,1055,
1,51,1077,1,52,
2102,16,0,449,1,
50,1072,1,305,1083,
1,2063,2103,16,0,
449,1,299,2104,16,
0,449,1,62,2105,
16,0,449,1,63,
1089,1,66,1095,1,
67,1100,1,68,1105,
1,69,1110,1,70,
1115,1,71,2106,16,
0,449,1,283,1047,
1,73,2107,16,0,
306,1,74,1135,1,
1833,2108,16,0,449,
1,1332,2109,16,0,
449,1,1584,2110,16,
0,449,1,79,2111,
16,0,449,1,76,
2112,16,0,449,1,
82,2113,16,0,306,
1,322,2114,16,0,
449,1,85,2115,16,
0,449,1,1300,2116,
16,0,306,1,89,
2117,16,0,449,1,
1345,2118,16,0,306,
1,1597,2119,16,0,
306,1,93,1161,1,
346,2120,16,0,449,
1,97,2121,16,0,
449,1,2107,768,1,
2108,734,1,1858,2122,
16,0,449,1,102,
2123,16,0,449,1,
2111,741,1,2113,673,
1,1011,1172,1,107,
2124,16,0,306,1,
1112,1183,1,1046,1125,
1,1115,2125,16,0,
449,1,112,2126,16,
0,449,1,328,1130,
1,352,1184,1,1287,
2127,16,0,449,1,
118,1189,1,371,1199,
1,1377,2128,16,0,
449,1,1629,2129,16,
0,449,1,124,2130,
16,0,449,1,377,
1220,1,827,2131,16,
0,306,1,380,1230,
1,130,1236,1,1888,
2132,16,0,449,1,
1830,805,1,1390,2133,
16,0,306,1,387,
2134,16,0,306,1,
137,2135,16,0,449,
1,1839,2136,16,0,
306,1,143,2137,16,
0,306,1,1553,2138,
16,0,306,1,373,
1210,1,375,1247,1,
151,2139,16,0,449,
1,379,1252,1,1159,
2140,16,0,449,1,
381,2141,16,0,449,
1,157,2142,16,0,
306,1,883,2143,16,
0,306,1,1917,774,
1,1128,2144,16,0,
306,1,1094,1282,1,
166,2145,16,0,449,
1,1422,2146,16,0,
449,1,1926,704,1,
1927,709,1,1928,789,
1,172,1311,1,1930,
795,1,1681,2147,16,
0,449,1,1934,826,
1,1936,729,1,1435,
2148,16,0,306,1,
1938,832,1,182,2149,
16,0,449,1,1940,
811,1,1941,762,1,
437,2150,16,0,306,
1,188,1325,1,942,
1330,1,1887,722,1,
1197,2151,16,0,449,
1,431,2152,16,0,
449,1,447,2153,16,
0,449,1,406,2154,
16,0,449,1,2309,
2155,16,0,306,1,
1165,2156,16,0,306,
1,1707,781,1,1709,
2157,16,0,449,1,
205,2158,16,0,306,
1,1210,2159,16,0,
306,1,199,2160,16,
0,449,1,459,2161,
16,0,449,1,462,
2162,16,0,449,1,
1471,2163,16,0,306,
1,217,2164,16,0,
449,1,223,2165,16,
0,306,1,476,1369,
1,477,1375,1,478,
1380,1,479,1385,1,
480,1014,1,412,2166,
16,0,306,1,1738,
2167,16,0,449,1,
1929,715,1,1490,683,
1,236,2168,16,0,
449,1,1932,820,1,
1744,2169,16,0,306,
1,242,2170,16,0,
306,1,1501,2171,16,
0,449,1,1001,1407,
1,1002,1412,1,26,
2172,19,319,1,26,
2173,5,77,1,1744,
2174,16,0,317,1,
1435,2175,16,0,317,
1,1094,1282,1,223,
2176,16,0,317,1,
118,1189,1,1001,1407,
1,1210,2177,16,0,
317,1,328,1130,1,
437,2178,16,0,483,
1,1390,2179,16,0,
317,1,2309,2180,16,
0,317,1,130,1236,
1,1112,1183,1,942,
1330,1,242,2181,16,
0,317,1,352,1184,
1,447,1335,1,1553,
2182,16,0,317,1,
1010,2183,16,0,317,
1,1011,1172,1,143,
2184,16,0,317,1,
1345,2185,16,0,317,
1,1128,2186,16,0,
317,1,1783,2187,16,
0,317,1,40,1041,
1,477,1375,1,42,
2188,16,0,317,1,
479,1385,1,44,1053,
1,373,1210,1,47,
1055,1,48,1061,1,
49,1067,1,50,1072,
1,51,1077,1,379,
1252,1,380,1230,1,
157,2189,16,0,317,
1,1255,2190,16,0,
317,1,371,1199,1,
478,1380,1,387,2191,
16,0,317,1,375,
1247,1,63,1089,1,
262,1008,1,283,1047,
1,66,1095,1,67,
1100,1,68,1105,1,
69,1110,1,70,1115,
1,1597,2192,16,0,
317,1,476,1369,1,
73,2193,16,0,317,
1,74,1135,1,1165,
2194,16,0,317,1,
377,1220,1,172,1311,
1,480,1014,1,188,
1325,1,82,2195,16,
0,317,1,412,2196,
16,0,317,1,1471,
2197,16,0,317,1,
305,1083,1,525,1021,
1,1507,2198,16,0,
317,1,827,2199,16,
0,317,1,93,1161,
1,1839,2200,16,0,
317,1,205,2201,16,
0,317,1,515,2202,
16,0,590,1,883,
2203,16,0,317,1,
1046,1125,1,1002,1412,
1,1300,2204,16,0,
317,1,1635,2205,16,
0,317,1,107,2206,
16,0,317,1,27,
2207,19,513,1,27,
2208,5,79,1,1584,
2209,16,0,511,1,
2113,673,1,112,2210,
16,0,511,1,1858,
2211,16,0,511,1,
431,2212,16,0,511,
1,447,2213,16,0,
511,1,1490,683,1,
1654,2214,16,0,511,
1,2303,2215,16,0,
511,1,124,2216,16,
0,511,1,525,2217,
16,0,511,1,236,
2218,16,0,511,1,
346,2219,16,0,511,
1,1764,695,1,459,
2220,16,0,511,1,
1332,2221,16,0,511,
1,1115,2222,16,0,
511,1,1926,704,1,
1927,709,1,137,2223,
16,0,511,1,1929,
715,1,32,2224,16,
0,511,1,1777,2225,
16,0,511,1,1887,
722,1,1888,2226,16,
0,511,1,1936,729,
1,2108,734,1,256,
2227,16,0,511,1,
1833,2228,16,0,511,
1,2111,741,1,41,
2229,16,0,511,1,
151,2230,16,0,511,
1,43,2231,16,0,
511,1,1681,2232,16,
0,511,1,509,2233,
16,0,511,1,1738,
2234,16,0,511,1,
1422,2235,16,0,511,
1,52,2236,16,0,
511,1,1538,755,1,
381,2237,16,0,511,
1,1540,2238,16,0,
511,1,1941,762,1,
166,2239,16,0,511,
1,1802,2240,16,0,
511,1,277,2241,16,
0,511,1,2107,768,
1,62,2242,16,0,
511,1,1917,774,1,
1159,2243,16,0,511,
1,71,2244,16,0,
511,1,1707,781,1,
182,2245,16,0,511,
1,1709,2246,16,0,
511,1,1928,789,1,
76,2247,16,0,511,
1,1930,795,1,79,
2248,16,0,511,1,
299,2249,16,0,511,
1,1242,2250,16,0,
511,1,1501,2251,16,
0,511,1,85,2252,
16,0,511,1,1830,
805,1,1940,811,1,
1287,2253,16,0,511,
1,89,2254,16,0,
511,1,199,2255,16,
0,511,1,406,2256,
16,0,511,1,1932,
820,1,1377,2257,16,
0,511,1,1934,826,
1,97,2258,16,0,
511,1,1938,832,1,
2063,2259,16,0,511,
1,102,2260,16,0,
511,1,1629,2261,16,
0,511,1,322,2262,
16,0,511,1,462,
2263,16,0,511,1,
1197,2264,16,0,511,
1,217,2265,16,0,
511,1,28,2266,19,
570,1,28,2267,5,
59,1,328,1130,1,
1094,1282,1,223,1364,
1,118,1189,1,883,
1272,1,525,1021,1,
1001,1407,1,130,1236,
1,1112,1183,1,459,
1492,1,242,1397,1,
352,1184,1,447,1335,
1,464,1495,1,1011,
1172,1,143,1257,1,
40,1041,1,41,1469,
1,42,1473,1,479,
1385,1,44,1053,1,
481,1501,1,373,1210,
1,47,1055,1,157,
1267,1,49,1067,1,
50,1072,1,48,1061,
1,379,1252,1,380,
1230,1,51,1077,1,
476,1369,1,371,1199,
1,478,1380,1,375,
1247,1,172,1311,1,
262,1008,1,283,1047,
1,63,1089,1,67,
1100,1,68,1105,1,
69,1110,1,66,1095,
1,461,2268,16,0,
568,1,74,1135,1,
377,1220,1,1002,1412,
1,70,1115,1,188,
1325,1,82,1140,1,
305,1083,1,477,1375,
1,827,1225,1,93,
1161,1,480,1014,1,
205,1343,1,1046,1125,
1,942,1330,1,107,
1178,1,29,2269,19,
298,1,29,2270,5,
77,1,1744,2271,16,
0,296,1,1435,2272,
16,0,296,1,1094,
1282,1,223,2273,16,
0,296,1,118,1189,
1,1001,1407,1,1210,
2274,16,0,296,1,
328,1130,1,437,2275,
16,0,296,1,1390,
2276,16,0,296,1,
2309,2277,16,0,296,
1,130,1236,1,1112,
1183,1,942,1330,1,
242,2278,16,0,296,
1,352,1184,1,447,
1335,1,1553,2279,16,
0,296,1,1010,2280,
16,0,296,1,1011,
1172,1,143,1257,1,
1345,2281,16,0,296,
1,1128,2282,16,0,
296,1,1783,2283,16,
0,296,1,40,1041,
1,477,1375,1,42,
2284,16,0,296,1,
479,1385,1,44,1053,
1,373,1210,1,47,
1055,1,48,1061,1,
49,1067,1,50,1072,
1,51,1077,1,379,
1252,1,380,1230,1,
157,1267,1,1255,2285,
16,0,296,1,371,
1199,1,478,1380,1,
387,2286,16,0,296,
1,375,1247,1,63,
1089,1,262,1008,1,
283,1047,1,66,1095,
1,67,1100,1,68,
1105,1,69,1110,1,
70,1115,1,1597,2287,
16,0,296,1,476,
1369,1,73,2288,16,
0,296,1,74,1135,
1,1165,2289,16,0,
296,1,377,1220,1,
172,1311,1,480,1014,
1,188,1325,1,82,
2290,16,0,296,1,
412,2291,16,0,296,
1,1471,2292,16,0,
296,1,305,1083,1,
525,1021,1,1507,2293,
16,0,296,1,827,
2294,16,0,296,1,
93,1161,1,1839,2295,
16,0,296,1,205,
2296,16,0,296,1,
515,2297,16,0,296,
1,883,2298,16,0,
296,1,1046,1125,1,
1002,1412,1,1300,2299,
16,0,296,1,1635,
2300,16,0,296,1,
107,2301,16,0,296,
1,30,2302,19,292,
1,30,2303,5,77,
1,1744,2304,16,0,
290,1,1435,2305,16,
0,290,1,1094,1282,
1,223,2306,16,0,
290,1,118,1189,1,
1001,1407,1,1210,2307,
16,0,290,1,328,
1130,1,437,2308,16,
0,290,1,1390,2309,
16,0,290,1,2309,
2310,16,0,290,1,
130,1236,1,1112,1183,
1,942,1330,1,242,
2311,16,0,290,1,
352,1184,1,447,1335,
1,1553,2312,16,0,
290,1,1010,2313,16,
0,290,1,1011,1172,
1,143,1257,1,1345,
2314,16,0,290,1,
1128,2315,16,0,290,
1,1783,2316,16,0,
290,1,40,1041,1,
477,1375,1,42,2317,
16,0,290,1,479,
1385,1,44,1053,1,
373,1210,1,47,1055,
1,48,1061,1,49,
1067,1,50,1072,1,
51,1077,1,379,1252,
1,380,1230,1,157,
1267,1,1255,2318,16,
0,290,1,371,1199,
1,478,1380,1,387,
2319,16,0,290,1,
375,1247,1,63,1089,
1,262,1008,1,283,
1047,1,66,1095,1,
67,1100,1,68,1105,
1,69,1110,1,70,
1115,1,1597,2320,16,
0,290,1,476,1369,
1,73,2321,16,0,
290,1,74,1135,1,
1165,2322,16,0,290,
1,377,1220,1,172,
1311,1,480,1014,1,
188,1325,1,82,2323,
16,0,290,1,412,
2324,16,0,290,1,
1471,2325,16,0,290,
1,305,1083,1,525,
1021,1,1507,2326,16,
0,290,1,827,2327,
16,0,290,1,93,
1161,1,1839,2328,16,
0,290,1,205,2329,
16,0,290,1,515,
2330,16,0,290,1,
883,2331,16,0,290,
1,1046,1125,1,1002,
1412,1,1300,2332,16,
0,290,1,1635,2333,
16,0,290,1,107,
2334,16,0,290,1,
31,2335,19,273,1,
31,2336,5,77,1,
1744,2337,16,0,271,
1,1435,2338,16,0,
271,1,1094,1282,1,
223,2339,16,0,271,
1,118,1189,1,1001,
1407,1,1210,2340,16,
0,271,1,328,1130,
1,437,2341,16,0,
271,1,1390,2342,16,
0,271,1,2309,2343,
16,0,271,1,130,
1236,1,1112,1183,1,
942,1330,1,242,2344,
16,0,271,1,352,
1184,1,447,1335,1,
1553,2345,16,0,271,
1,1010,2346,16,0,
271,1,1011,1172,1,
143,2347,16,0,271,
1,1345,2348,16,0,
271,1,1128,2349,16,
0,271,1,1783,2350,
16,0,271,1,40,
1041,1,477,1375,1,
42,2351,16,0,271,
1,479,1385,1,44,
1053,1,373,1210,1,
47,1055,1,48,1061,
1,49,1067,1,50,
1072,1,51,1077,1,
379,1252,1,380,1230,
1,157,2352,16,0,
271,1,1255,2353,16,
0,271,1,371,1199,
1,478,1380,1,387,
2354,16,0,271,1,
375,1247,1,63,1089,
1,262,1008,1,283,
1047,1,66,1095,1,
67,1100,1,68,1105,
1,69,1110,1,70,
1115,1,1597,2355,16,
0,271,1,476,1369,
1,73,2356,16,0,
271,1,74,1135,1,
1165,2357,16,0,271,
1,377,1220,1,172,
1311,1,480,1014,1,
188,1325,1,82,2358,
16,0,271,1,412,
2359,16,0,271,1,
1471,2360,16,0,271,
1,305,1083,1,525,
1021,1,1507,2361,16,
0,271,1,827,2362,
16,0,271,1,93,
1161,1,1839,2363,16,
0,271,1,205,2364,
16,0,271,1,515,
2365,16,0,271,1,
883,2366,16,0,271,
1,1046,1125,1,1002,
1412,1,1300,2367,16,
0,271,1,1635,2368,
16,0,271,1,107,
2369,16,0,271,1,
32,2370,19,263,1,
32,2371,5,77,1,
1744,2372,16,0,261,
1,1435,2373,16,0,
261,1,1094,1282,1,
223,2374,16,0,261,
1,118,1189,1,1001,
1407,1,1210,2375,16,
0,261,1,328,1130,
1,437,2376,16,0,
261,1,1390,2377,16,
0,261,1,2309,2378,
16,0,261,1,130,
1236,1,1112,1183,1,
942,1330,1,242,2379,
16,0,261,1,352,
1184,1,447,1335,1,
1553,2380,16,0,261,
1,1010,2381,16,0,
261,1,1011,1172,1,
143,2382,16,0,261,
1,1345,2383,16,0,
261,1,1128,2384,16,
0,261,1,1783,2385,
16,0,261,1,40,
1041,1,477,1375,1,
42,2386,16,0,261,
1,479,1385,1,44,
1053,1,373,1210,1,
47,1055,1,48,1061,
1,49,1067,1,50,
1072,1,51,1077,1,
379,1252,1,380,1230,
1,157,2387,16,0,
261,1,1255,2388,16,
0,261,1,371,1199,
1,478,1380,1,387,
2389,16,0,261,1,
375,1247,1,63,1089,
1,262,1008,1,283,
1047,1,66,1095,1,
67,1100,1,68,1105,
1,69,1110,1,70,
1115,1,1597,2390,16,
0,261,1,476,1369,
1,73,2391,16,0,
261,1,74,1135,1,
1165,2392,16,0,261,
1,377,1220,1,172,
1311,1,480,1014,1,
188,1325,1,82,2393,
16,0,261,1,412,
2394,16,0,261,1,
1471,2395,16,0,261,
1,305,1083,1,525,
1021,1,1507,2396,16,
0,261,1,827,2397,
16,0,261,1,93,
1161,1,1839,2398,16,
0,261,1,205,2399,
16,0,261,1,515,
2400,16,0,261,1,
883,2401,16,0,261,
1,1046,1125,1,1002,
1412,1,1300,2402,16,
0,261,1,1635,2403,
16,0,261,1,107,
2404,16,0,261,1,
33,2405,19,352,1,
33,2406,5,77,1,
1744,2407,16,0,350,
1,1435,2408,16,0,
350,1,1094,1282,1,
223,2409,16,0,350,
1,118,1189,1,1001,
1407,1,1210,2410,16,
0,350,1,328,1130,
1,437,2411,16,0,
350,1,1390,2412,16,
0,350,1,2309,2413,
16,0,350,1,130,
1236,1,1112,1183,1,
942,1330,1,242,1397,
1,352,1184,1,447,
1335,1,1553,2414,16,
0,350,1,1010,2415,
16,0,350,1,1011,
1172,1,143,1257,1,
1345,2416,16,0,350,
1,1128,2417,16,0,
350,1,1783,2418,16,
0,350,1,40,1041,
1,477,1375,1,42,
2419,16,0,350,1,
479,1385,1,44,1053,
1,373,1210,1,47,
1055,1,48,1061,1,
49,1067,1,50,1072,
1,51,1077,1,379,
1252,1,380,1230,1,
157,1267,1,1255,2420,
16,0,350,1,371,
1199,1,478,1380,1,
387,2421,16,0,350,
1,375,1247,1,63,
1089,1,262,1008,1,
283,1047,1,66,1095,
1,67,1100,1,68,
1105,1,69,1110,1,
70,1115,1,1597,2422,
16,0,350,1,476,
1369,1,73,2423,16,
0,350,1,74,1135,
1,1165,2424,16,0,
350,1,377,1220,1,
172,1311,1,480,1014,
1,188,1325,1,82,
2425,16,0,350,1,
412,2426,16,0,350,
1,1471,2427,16,0,
350,1,305,1083,1,
525,1021,1,1507,2428,
16,0,350,1,827,
2429,16,0,350,1,
93,1161,1,1839,2430,
16,0,350,1,205,
2431,16,0,350,1,
515,2432,16,0,350,
1,883,2433,16,0,
350,1,1046,1125,1,
1002,1412,1,1300,2434,
16,0,350,1,1635,
2435,16,0,350,1,
107,2436,16,0,350,
1,34,2437,19,348,
1,34,2438,5,77,
1,1744,2439,16,0,
346,1,1435,2440,16,
0,346,1,1094,1282,
1,223,1364,1,118,
1189,1,1001,1407,1,
1210,2441,16,0,346,
1,328,1130,1,437,
2442,16,0,346,1,
1390,2443,16,0,346,
1,2309,2444,16,0,
346,1,130,1236,1,
1112,1183,1,942,1330,
1,242,1397,1,352,
1184,1,447,1335,1,
1553,2445,16,0,346,
1,1010,2446,16,0,
346,1,1011,1172,1,
143,1257,1,1345,2447,
16,0,346,1,1128,
2448,16,0,346,1,
1783,2449,16,0,346,
1,40,1041,1,477,
1375,1,42,2450,16,
0,346,1,479,1385,
1,44,1053,1,373,
1210,1,47,1055,1,
48,1061,1,49,1067,
1,50,1072,1,51,
1077,1,379,1252,1,
380,1230,1,157,1267,
1,1255,2451,16,0,
346,1,371,1199,1,
478,1380,1,387,2452,
16,0,346,1,375,
1247,1,63,1089,1,
262,1008,1,283,1047,
1,66,1095,1,67,
1100,1,68,1105,1,
69,1110,1,70,1115,
1,1597,2453,16,0,
346,1,476,1369,1,
73,2454,16,0,346,
1,74,1135,1,1165,
2455,16,0,346,1,
377,1220,1,172,1311,
1,480,1014,1,188,
1325,1,82,2456,16,
0,346,1,412,2457,
16,0,346,1,1471,
2458,16,0,346,1,
305,1083,1,525,1021,
1,1507,2459,16,0,
346,1,827,2460,16,
0,346,1,93,1161,
1,1839,2461,16,0,
346,1,205,1343,1,
515,2462,16,0,346,
1,883,2463,16,0,
346,1,1046,1125,1,
1002,1412,1,1300,2464,
16,0,346,1,1635,
2465,16,0,346,1,
107,2466,16,0,346,
1,35,2467,19,333,
1,35,2468,5,77,
1,1744,2469,16,0,
331,1,1435,2470,16,
0,331,1,1094,1282,
1,223,2471,16,0,
331,1,118,1189,1,
1001,1407,1,1210,2472,
16,0,331,1,328,
1130,1,437,2473,16,
0,331,1,1390,2474,
16,0,331,1,2309,
2475,16,0,331,1,
130,1236,1,1112,1183,
1,942,1330,1,242,
1397,1,352,1184,1,
447,1335,1,1553,2476,
16,0,331,1,1010,
2477,16,0,331,1,
1011,1172,1,143,1257,
1,1345,2478,16,0,
331,1,1128,2479,16,
0,331,1,1783,2480,
16,0,331,1,40,
1041,1,477,1375,1,
42,2481,16,0,331,
1,479,1385,1,44,
1053,1,373,1210,1,
47,1055,1,48,1061,
1,49,1067,1,50,
1072,1,51,1077,1,
379,1252,1,380,1230,
1,157,1267,1,1255,
2482,16,0,331,1,
371,1199,1,478,1380,
1,387,2483,16,0,
331,1,375,1247,1,
63,1089,1,262,1008,
1,283,1047,1,66,
1095,1,67,1100,1,
68,1105,1,69,1110,
1,70,1115,1,1597,
2484,16,0,331,1,
476,1369,1,73,2485,
16,0,331,1,74,
1135,1,1165,2486,16,
0,331,1,377,1220,
1,172,1311,1,480,
1014,1,188,1325,1,
82,2487,16,0,331,
1,412,2488,16,0,
331,1,1471,2489,16,
0,331,1,305,1083,
1,525,1021,1,1507,
2490,16,0,331,1,
827,2491,16,0,331,
1,93,1161,1,1839,
2492,16,0,331,1,
205,1343,1,515,2493,
16,0,331,1,883,
2494,16,0,331,1,
1046,1125,1,1002,1412,
1,1300,2495,16,0,
331,1,1635,2496,16,
0,331,1,107,2497,
16,0,331,1,36,
2498,19,224,1,36,
2499,5,78,1,1584,
2500,16,0,222,1,
2113,673,1,112,2501,
16,0,222,1,1858,
2502,16,0,222,1,
431,2503,16,0,222,
1,447,2504,16,0,
222,1,1490,683,1,
1654,2505,16,0,222,
1,2303,2506,16,0,
222,1,124,2507,16,
0,222,1,525,2508,
16,0,222,1,236,
2509,16,0,222,1,
346,2510,16,0,222,
1,1764,695,1,459,
2511,16,0,222,1,
1332,2512,16,0,222,
1,1115,2513,16,0,
222,1,1926,704,1,
1927,709,1,137,2514,
16,0,222,1,1929,
715,1,32,2515,16,
0,222,1,1777,2516,
16,0,222,1,1887,
722,1,1888,2517,16,
0,222,1,1936,729,
1,2108,734,1,256,
2518,16,0,222,1,
1833,2519,16,0,222,
1,2111,741,1,41,
2520,16,0,222,1,
151,2521,16,0,222,
1,43,2522,16,0,
222,1,1681,2523,16,
0,222,1,509,2524,
16,0,222,1,1738,
2525,16,0,222,1,
1422,2526,16,0,222,
1,52,2527,16,0,
222,1,381,2528,16,
0,222,1,1540,2529,
16,0,222,1,1941,
762,1,166,2530,16,
0,222,1,1802,2531,
16,0,222,1,277,
2532,16,0,222,1,
2107,768,1,1538,755,
1,1917,774,1,1159,
2533,16,0,222,1,
71,2534,16,0,222,
1,1707,781,1,182,
2535,16,0,222,1,
1709,2536,16,0,222,
1,1928,789,1,76,
2537,16,0,222,1,
1930,795,1,79,2538,
16,0,222,1,299,
2539,16,0,222,1,
1242,2540,16,0,222,
1,1501,2541,16,0,
222,1,85,2542,16,
0,222,1,1830,805,
1,1940,811,1,1287,
2543,16,0,222,1,
89,2544,16,0,222,
1,199,2545,16,0,
222,1,406,2546,16,
0,222,1,1932,820,
1,1377,2547,16,0,
222,1,1934,826,1,
97,2548,16,0,222,
1,1938,832,1,2063,
2549,16,0,222,1,
102,2550,16,0,222,
1,1629,2551,16,0,
222,1,322,2552,16,
0,222,1,462,2553,
16,0,222,1,1197,
2554,16,0,222,1,
217,2555,16,0,222,
1,37,2556,19,254,
1,37,2557,5,78,
1,1584,2558,16,0,
252,1,2113,673,1,
112,2559,16,0,252,
1,1858,2560,16,0,
252,1,431,2561,16,
0,252,1,447,2562,
16,0,252,1,1490,
683,1,1654,2563,16,
0,252,1,2303,2564,
16,0,252,1,124,
2565,16,0,252,1,
525,2566,16,0,252,
1,236,2567,16,0,
252,1,346,2568,16,
0,252,1,1764,695,
1,459,2569,16,0,
252,1,1332,2570,16,
0,252,1,1115,2571,
16,0,252,1,1926,
704,1,1927,709,1,
137,2572,16,0,252,
1,1929,715,1,32,
2573,16,0,252,1,
1777,2574,16,0,252,
1,1887,722,1,1888,
2575,16,0,252,1,
1936,729,1,2108,734,
1,256,2576,16,0,
252,1,1833,2577,16,
0,252,1,2111,741,
1,41,2578,16,0,
252,1,151,2579,16,
0,252,1,43,2580,
16,0,252,1,1681,
2581,16,0,252,1,
509,2582,16,0,252,
1,1738,2583,16,0,
252,1,1422,2584,16,
0,252,1,52,2585,
16,0,252,1,381,
2586,16,0,252,1,
1540,2587,16,0,252,
1,1941,762,1,166,
2588,16,0,252,1,
1802,2589,16,0,252,
1,277,2590,16,0,
252,1,2107,768,1,
1538,755,1,1917,774,
1,1159,2591,16,0,
252,1,71,2592,16,
0,252,1,1707,781,
1,182,2593,16,0,
252,1,1709,2594,16,
0,252,1,1928,789,
1,76,2595,16,0,
252,1,1930,795,1,
79,2596,16,0,252,
1,299,2597,16,0,
252,1,1242,2598,16,
0,252,1,1501,2599,
16,0,252,1,85,
2600,16,0,252,1,
1830,805,1,1940,811,
1,1287,2601,16,0,
252,1,89,2602,16,
0,252,1,199,2603,
16,0,252,1,406,
2604,16,0,252,1,
1932,820,1,1377,2605,
16,0,252,1,1934,
826,1,97,2606,16,
0,252,1,1938,832,
1,2063,2607,16,0,
252,1,102,2608,16,
0,252,1,1629,2609,
16,0,252,1,322,
2610,16,0,252,1,
462,2611,16,0,252,
1,1197,2612,16,0,
252,1,217,2613,16,
0,252,1,38,2614,
19,247,1,38,2615,
5,77,1,1744,2616,
16,0,245,1,1435,
2617,16,0,245,1,
1094,1282,1,223,1364,
1,118,1189,1,1001,
1407,1,1210,2618,16,
0,245,1,328,1130,
1,437,2619,16,0,
245,1,1390,2620,16,
0,245,1,2309,2621,
16,0,245,1,130,
1236,1,1112,1183,1,
942,1330,1,242,1397,
1,352,1184,1,447,
1335,1,1553,2622,16,
0,245,1,1010,2623,
16,0,245,1,1011,
1172,1,143,1257,1,
1345,2624,16,0,245,
1,1128,2625,16,0,
245,1,1783,2626,16,
0,245,1,40,1041,
1,477,1375,1,42,
2627,16,0,245,1,
479,1385,1,44,1053,
1,373,1210,1,47,
1055,1,48,1061,1,
49,1067,1,50,1072,
1,51,1077,1,379,
1252,1,380,1230,1,
157,1267,1,1255,2628,
16,0,245,1,371,
1199,1,478,1380,1,
387,2629,16,0,245,
1,375,1247,1,63,
1089,1,262,1008,1,
283,1047,1,66,1095,
1,67,1100,1,68,
1105,1,69,1110,1,
70,1115,1,1597,2630,
16,0,245,1,476,
1369,1,73,2631,16,
0,245,1,74,1135,
1,1165,2632,16,0,
245,1,377,1220,1,
172,1311,1,480,1014,
1,188,1325,1,82,
2633,16,0,245,1,
412,2634,16,0,245,
1,1471,2635,16,0,
245,1,305,1083,1,
525,1021,1,1507,2636,
16,0,245,1,827,
1225,1,93,1161,1,
1839,2637,16,0,245,
1,205,1343,1,515,
2638,16,0,245,1,
883,1272,1,1046,1125,
1,1002,1412,1,1300,
2639,16,0,245,1,
1635,2640,16,0,245,
1,107,2641,16,0,
245,1,39,2642,19,
232,1,39,2643,5,
77,1,1744,2644,16,
0,230,1,1435,2645,
16,0,230,1,1094,
1282,1,223,1364,1,
118,1189,1,1001,1407,
1,1210,2646,16,0,
230,1,328,1130,1,
437,2647,16,0,230,
1,1390,2648,16,0,
230,1,2309,2649,16,
0,230,1,130,1236,
1,1112,1183,1,942,
1330,1,242,1397,1,
352,1184,1,447,1335,
1,1553,2650,16,0,
230,1,1010,2651,16,
0,230,1,1011,1172,
1,143,1257,1,1345,
2652,16,0,230,1,
1128,2653,16,0,230,
1,1783,2654,16,0,
230,1,40,1041,1,
477,1375,1,42,2655,
16,0,230,1,479,
1385,1,44,1053,1,
373,1210,1,47,1055,
1,48,1061,1,49,
1067,1,50,1072,1,
51,1077,1,379,1252,
1,380,1230,1,157,
1267,1,1255,2656,16,
0,230,1,371,1199,
1,478,1380,1,387,
2657,16,0,230,1,
375,1247,1,63,1089,
1,262,1008,1,283,
1047,1,66,1095,1,
67,1100,1,68,1105,
1,69,1110,1,70,
1115,1,1597,2658,16,
0,230,1,476,1369,
1,73,2659,16,0,
230,1,74,1135,1,
1165,2660,16,0,230,
1,377,1220,1,172,
1311,1,480,1014,1,
188,1325,1,82,2661,
16,0,230,1,412,
2662,16,0,230,1,
1471,2663,16,0,230,
1,305,1083,1,525,
1021,1,1507,2664,16,
0,230,1,827,1225,
1,93,1161,1,1839,
2665,16,0,230,1,
205,1343,1,515,2666,
16,0,230,1,883,
1272,1,1046,1125,1,
1002,1412,1,1300,2667,
16,0,230,1,1635,
2668,16,0,230,1,
107,2669,16,0,230,
1,40,2670,19,220,
1,40,2671,5,77,
1,1744,2672,16,0,
218,1,1435,2673,16,
0,218,1,1094,1282,
1,223,2674,16,0,
218,1,118,2675,16,
0,218,1,1001,1407,
1,1210,2676,16,0,
218,1,328,1130,1,
437,2677,16,0,218,
1,1390,2678,16,0,
218,1,2309,2679,16,
0,218,1,130,2680,
16,0,218,1,1112,
1183,1,942,1330,1,
242,2681,16,0,218,
1,352,1184,1,447,
1335,1,1553,2682,16,
0,218,1,1010,2683,
16,0,218,1,1011,
1172,1,143,2684,16,
0,218,1,1345,2685,
16,0,218,1,1128,
2686,16,0,218,1,
1783,2687,16,0,218,
1,40,1041,1,477,
1375,1,42,2688,16,
0,218,1,479,1385,
1,44,1053,1,373,
1210,1,47,1055,1,
48,1061,1,49,1067,
1,50,1072,1,51,
1077,1,379,1252,1,
380,1230,1,157,2689,
16,0,218,1,1255,
2690,16,0,218,1,
371,1199,1,478,1380,
1,387,2691,16,0,
218,1,375,1247,1,
63,1089,1,262,1008,
1,283,1047,1,66,
1095,1,67,1100,1,
68,1105,1,69,1110,
1,70,1115,1,1597,
2692,16,0,218,1,
476,1369,1,73,2693,
16,0,218,1,74,
1135,1,1165,2694,16,
0,218,1,377,1220,
1,172,2695,16,0,
218,1,480,1014,1,
188,2696,16,0,218,
1,82,2697,16,0,
218,1,412,2698,16,
0,218,1,1471,2699,
16,0,218,1,305,
1083,1,525,1021,1,
1507,2700,16,0,218,
1,827,2701,16,0,
218,1,93,1161,1,
1839,2702,16,0,218,
1,205,2703,16,0,
218,1,515,2704,16,
0,218,1,883,2705,
16,0,218,1,1046,
1125,1,1002,1412,1,
1300,2706,16,0,218,
1,1635,2707,16,0,
218,1,107,2708,16,
0,218,1,41,2709,
19,176,1,41,2710,
5,77,1,1744,2711,
16,0,174,1,1435,
2712,16,0,174,1,
1094,1282,1,223,2713,
16,0,174,1,118,
2714,16,0,174,1,
1001,1407,1,1210,2715,
16,0,174,1,328,
1130,1,437,2716,16,
0,174,1,1390,2717,
16,0,174,1,2309,
2718,16,0,174,1,
130,2719,16,0,174,
1,1112,1183,1,942,
1330,1,242,2720,16,
0,174,1,352,1184,
1,447,1335,1,1553,
2721,16,0,174,1,
1010,2722,16,0,174,
1,1011,1172,1,143,
2723,16,0,174,1,
1345,2724,16,0,174,
1,1128,2725,16,0,
174,1,1783,2726,16,
0,174,1,40,1041,
1,477,1375,1,42,
2727,16,0,174,1,
479,1385,1,44,1053,
1,373,1210,1,47,
1055,1,48,1061,1,
49,1067,1,50,1072,
1,51,1077,1,379,
1252,1,380,1230,1,
157,2728,16,0,174,
1,1255,2729,16,0,
174,1,371,1199,1,
478,1380,1,387,2730,
16,0,174,1,375,
1247,1,63,1089,1,
262,1008,1,283,1047,
1,66,1095,1,67,
1100,1,68,1105,1,
69,1110,1,70,1115,
1,1597,2731,16,0,
174,1,476,1369,1,
73,2732,16,0,174,
1,74,1135,1,1165,
2733,16,0,174,1,
377,1220,1,172,2734,
16,0,174,1,480,
1014,1,188,2735,16,
0,174,1,82,2736,
16,0,174,1,412,
2737,16,0,174,1,
1471,2738,16,0,174,
1,305,1083,1,525,
1021,1,1507,2739,16,
0,174,1,827,2740,
16,0,174,1,93,
1161,1,1839,2741,16,
0,174,1,205,2742,
16,0,174,1,515,
2743,16,0,174,1,
883,2744,16,0,174,
1,1046,1125,1,1002,
1412,1,1300,2745,16,
0,174,1,1635,2746,
16,0,174,1,107,
2747,16,0,174,1,
42,2748,19,304,1,
42,2749,5,29,1,
1858,2750,16,0,302,
1,1490,683,1,1709,
2751,16,0,302,1,
1764,695,1,32,2752,
16,0,302,1,1887,
722,1,1888,2753,16,
0,302,1,2107,768,
1,2108,734,1,2111,
741,1,2113,673,1,
1681,2754,16,0,302,
1,1802,2755,16,0,
302,1,1538,755,1,
1917,774,1,1707,781,
1,1926,704,1,1927,
709,1,1928,789,1,
1929,715,1,1930,795,
1,1932,820,1,1934,
826,1,1936,729,1,
1938,832,1,1830,805,
1,1940,811,1,1941,
762,1,2063,2756,16,
0,302,1,43,2757,
19,341,1,43,2758,
5,20,1,1887,2759,
16,0,339,1,1926,
704,1,1927,709,1,
1928,789,1,1707,781,
1,1930,795,1,1932,
820,1,1934,826,1,
1936,729,1,1938,832,
1,1940,811,1,1830,
805,1,1538,755,1,
1490,683,1,2108,734,
1,1764,695,1,1917,
774,1,1929,715,1,
1941,762,1,2113,673,
1,44,2760,19,170,
1,44,2761,5,29,
1,1858,2762,16,0,
168,1,1490,683,1,
1709,2763,16,0,168,
1,1764,695,1,32,
2764,16,0,168,1,
1887,722,1,1888,2765,
16,0,168,1,2107,
768,1,2108,734,1,
2111,741,1,2113,673,
1,1681,2766,16,0,
168,1,1802,2767,16,
0,168,1,1538,755,
1,1917,774,1,1707,
781,1,1926,704,1,
1927,709,1,1928,789,
1,1929,715,1,1930,
795,1,1932,820,1,
1934,826,1,1936,729,
1,1938,832,1,1830,
805,1,1940,811,1,
1941,762,1,2063,2768,
16,0,168,1,45,
2769,19,250,1,45,
2770,5,30,1,1858,
2771,16,0,248,1,
1490,683,1,1709,2772,
16,0,248,1,1764,
695,1,32,2773,16,
0,248,1,1887,722,
1,1888,2774,16,0,
248,1,2107,768,1,
2108,734,1,2111,741,
1,2113,673,1,1681,
2775,16,0,248,1,
1736,2776,16,0,269,
1,1802,2777,16,0,
248,1,1538,755,1,
1917,774,1,1707,781,
1,1926,704,1,1927,
709,1,1928,789,1,
1929,715,1,1930,795,
1,1932,820,1,1934,
826,1,1936,729,1,
1938,832,1,1830,805,
1,1940,811,1,1941,
762,1,2063,2778,16,
0,248,1,46,2779,
19,469,1,46,2780,
5,29,1,1858,2781,
16,0,467,1,1490,
683,1,1709,2782,16,
0,467,1,1764,695,
1,32,2783,16,0,
467,1,1887,722,1,
1888,2784,16,0,467,
1,2107,768,1,2108,
734,1,2111,741,1,
2113,673,1,1681,2785,
16,0,467,1,1802,
2786,16,0,467,1,
1538,755,1,1917,774,
1,1707,781,1,1926,
704,1,1927,709,1,
1928,789,1,1929,715,
1,1930,795,1,1932,
820,1,1934,826,1,
1936,729,1,1938,832,
1,1830,805,1,1940,
811,1,1941,762,1,
2063,2787,16,0,467,
1,47,2788,19,360,
1,47,2789,5,19,
1,0,2790,16,0,
606,1,2115,2791,17,
2792,15,2793,4,50,
37,0,71,0,108,
0,111,0,98,0,
97,0,108,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
1,-1,1,5,2794,
20,2795,4,52,71,
0,108,0,111,0,
98,0,97,0,108,
0,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,95,0,50,
0,1,148,1,3,
1,7,1,6,2796,
22,1,10,1,2113,
673,1,2300,2797,17,
2798,15,2793,1,-1,
1,5,2799,20,2800,
4,52,71,0,108,
0,111,0,98,0,
97,0,108,0,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
95,0,49,0,1,
147,1,3,1,6,
1,5,2801,22,1,
9,1,2339,2802,17,
2803,15,2804,4,52,
37,0,71,0,108,
0,111,0,98,0,
97,0,108,0,86,
0,97,0,114,0,
105,0,97,0,98,
0,108,0,101,0,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,1,-1,1,
5,2805,20,2806,4,
54,71,0,108,0,
111,0,98,0,97,
0,108,0,86,0,
97,0,114,0,105,
0,97,0,98,0,
108,0,101,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,95,0,49,0,
1,145,1,3,1,
3,1,2,2807,22,
1,7,1,2340,2808,
16,0,606,1,2205,
654,1,2351,2809,16,
0,606,1,2279,643,
1,2281,2810,16,0,
606,1,2284,659,1,
2285,665,1,2360,2811,
17,2812,15,2813,4,
36,37,0,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,1,-1,1,
5,2814,20,2815,4,
38,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
95,0,51,0,1,
143,1,3,1,2,
1,1,2816,22,1,
5,1,2361,2817,17,
2818,15,2813,1,-1,
1,5,2819,20,2820,
4,38,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,95,0,49,0,
1,141,1,3,1,
2,1,1,2821,22,
1,3,1,2359,2822,
17,2823,15,2813,1,
-1,1,5,2824,20,
2825,4,38,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,95,0,50,
0,1,142,1,3,
1,3,1,2,2826,
22,1,4,1,1919,
2827,16,0,358,1,
2358,2828,17,2829,15,
2813,1,-1,1,5,
2830,20,2831,4,38,
71,0,108,0,111,
0,98,0,97,0,
108,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,115,0,95,
0,52,0,1,144,
1,3,1,3,1,
2,2832,22,1,6,
1,2328,2833,17,2834,
15,2804,1,-1,1,
5,2835,20,2836,4,
54,71,0,108,0,
111,0,98,0,97,
0,108,0,86,0,
97,0,114,0,105,
0,97,0,98,0,
108,0,101,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,95,0,50,0,
1,146,1,3,1,
5,1,4,2837,22,
1,8,1,2108,734,
1,48,2838,19,357,
1,48,2839,5,45,
1,0,2840,16,0,
482,1,1538,755,1,
1858,2841,16,0,355,
1,2300,2797,1,1490,
683,1,2063,2842,16,
0,355,1,1764,695,
1,2205,654,1,1927,
709,1,32,2843,16,
0,355,1,1887,722,
1,1888,2844,16,0,
355,1,2107,768,1,
2108,734,1,2361,2817,
1,2328,2833,1,2111,
741,1,2113,673,1,
2115,2791,1,1681,2845,
16,0,355,1,2339,
2802,1,2340,2846,16,
0,482,1,1802,2847,
16,0,355,1,2351,
2848,16,0,482,1,
1917,774,1,2358,2828,
1,2359,2822,1,2360,
2811,1,1707,781,1,
1926,704,1,1709,2849,
16,0,355,1,1928,
789,1,1929,715,1,
1930,795,1,1932,820,
1,1934,826,1,1936,
729,1,1938,832,1,
1830,805,1,1940,811,
1,1941,762,1,2279,
643,1,2281,2850,16,
0,482,1,2284,659,
1,2285,665,1,49,
2851,19,364,1,49,
2852,5,29,1,1858,
2853,16,0,362,1,
1490,683,1,1709,2854,
16,0,362,1,1764,
695,1,32,2855,16,
0,362,1,1887,722,
1,1888,2856,16,0,
362,1,2107,768,1,
2108,734,1,2111,741,
1,2113,673,1,1681,
2857,16,0,362,1,
1802,2858,16,0,362,
1,1538,755,1,1917,
774,1,1707,781,1,
1926,704,1,1927,709,
1,1928,789,1,1929,
715,1,1930,795,1,
1932,820,1,1934,826,
1,1936,729,1,1938,
832,1,1830,805,1,
1940,811,1,1941,762,
1,2063,2859,16,0,
362,1,50,2860,19,
474,1,50,2861,5,
29,1,1858,2862,16,
0,472,1,1490,683,
1,1709,2863,16,0,
472,1,1764,695,1,
32,2864,16,0,472,
1,1887,722,1,1888,
2865,16,0,472,1,
2107,768,1,2108,734,
1,2111,741,1,2113,
673,1,1681,2866,16,
0,472,1,1802,2867,
16,0,472,1,1538,
755,1,1917,774,1,
1707,781,1,1926,704,
1,1927,709,1,1928,
789,1,1929,715,1,
1930,795,1,1932,820,
1,1934,826,1,1936,
729,1,1938,832,1,
1830,805,1,1940,811,
1,1941,762,1,2063,
2868,16,0,472,1,
51,2869,19,127,1,
51,2870,5,54,1,
0,2871,16,0,125,
1,2358,2828,1,2154,
2872,16,0,125,1,
1858,2873,16,0,125,
1,10,2874,16,0,
125,1,2300,2797,1,
1490,683,1,1540,2875,
16,0,125,1,2340,
2876,16,0,125,1,
1654,2877,16,0,125,
1,1764,695,1,21,
2878,16,0,125,1,
1332,2879,16,0,125,
1,1115,2880,16,0,
125,1,1927,709,1,
32,2881,16,0,125,
1,1887,722,1,1888,
2882,16,0,125,1,
2107,768,1,2360,2811,
1,2361,2817,1,2328,
2833,1,2111,741,1,
1941,762,1,2113,673,
1,1242,2883,16,0,
125,1,2115,2791,1,
1681,2884,16,0,125,
1,2339,2802,1,1422,
2885,16,0,125,1,
52,2886,16,0,125,
1,1802,2887,16,0,
125,1,1538,755,1,
1917,774,1,1377,2888,
16,0,125,1,2359,
2822,1,2287,2889,16,
0,125,1,1707,781,
1,1926,704,1,1709,
2890,16,0,125,1,
1928,789,1,1929,715,
1,1930,795,1,1932,
820,1,1934,826,1,
1936,729,1,1938,832,
1,1830,805,1,1940,
811,1,1287,2891,16,
0,125,1,2063,2892,
16,0,125,1,1584,
2893,16,0,125,1,
2108,734,1,1197,2894,
16,0,125,1,52,
2895,19,124,1,52,
2896,5,54,1,0,
2897,16,0,122,1,
2358,2828,1,2154,2898,
16,0,122,1,1858,
2899,16,0,122,1,
10,2900,16,0,122,
1,2300,2797,1,1490,
683,1,1540,2901,16,
0,122,1,2340,2902,
16,0,122,1,1654,
2903,16,0,122,1,
1764,695,1,21,2904,
16,0,122,1,1332,
2905,16,0,122,1,
1115,2906,16,0,122,
1,1927,709,1,32,
2907,16,0,122,1,
1887,722,1,1888,2908,
16,0,122,1,2107,
768,1,2360,2811,1,
2361,2817,1,2328,2833,
1,2111,741,1,1941,
762,1,2113,673,1,
1242,2909,16,0,122,
1,2115,2791,1,1681,
2910,16,0,122,1,
2339,2802,1,1422,2911,
16,0,122,1,52,
2912,16,0,122,1,
1802,2913,16,0,122,
1,1538,755,1,1917,
774,1,1377,2914,16,
0,122,1,2359,2822,
1,2287,2915,16,0,
122,1,1707,781,1,
1926,704,1,1709,2916,
16,0,122,1,1928,
789,1,1929,715,1,
1930,795,1,1932,820,
1,1934,826,1,1936,
729,1,1938,832,1,
1830,805,1,1940,811,
1,1287,2917,16,0,
122,1,2063,2918,16,
0,122,1,1584,2919,
16,0,122,1,2108,
734,1,1197,2920,16,
0,122,1,53,2921,
19,121,1,53,2922,
5,54,1,0,2923,
16,0,119,1,2358,
2828,1,2154,2924,16,
0,119,1,1858,2925,
16,0,119,1,10,
2926,16,0,119,1,
2300,2797,1,1490,683,
1,1540,2927,16,0,
119,1,2340,2928,16,
0,119,1,1654,2929,
16,0,119,1,1764,
695,1,21,2930,16,
0,119,1,1332,2931,
16,0,119,1,1115,
2932,16,0,119,1,
1927,709,1,32,2933,
16,0,119,1,1887,
722,1,1888,2934,16,
0,119,1,2107,768,
1,2360,2811,1,2361,
2817,1,2328,2833,1,
2111,741,1,1941,762,
1,2113,673,1,1242,
2935,16,0,119,1,
2115,2791,1,1681,2936,
16,0,119,1,2339,
2802,1,1422,2937,16,
0,119,1,52,2938,
16,0,119,1,1802,
2939,16,0,119,1,
1538,755,1,1917,774,
1,1377,2940,16,0,
119,1,2359,2822,1,
2287,2941,16,0,119,
1,1707,781,1,1926,
704,1,1709,2942,16,
0,119,1,1928,789,
1,1929,715,1,1930,
795,1,1932,820,1,
1934,826,1,1936,729,
1,1938,832,1,1830,
805,1,1940,811,1,
1287,2943,16,0,119,
1,2063,2944,16,0,
119,1,1584,2945,16,
0,119,1,2108,734,
1,1197,2946,16,0,
119,1,54,2947,19,
118,1,54,2948,5,
54,1,0,2949,16,
0,116,1,2358,2828,
1,2154,2950,16,0,
116,1,1858,2951,16,
0,116,1,10,2952,
16,0,116,1,2300,
2797,1,1490,683,1,
1540,2953,16,0,116,
1,2340,2954,16,0,
116,1,1654,2955,16,
0,116,1,1764,695,
1,21,2956,16,0,
116,1,1332,2957,16,
0,116,1,1115,2958,
16,0,116,1,1927,
709,1,32,2959,16,
0,116,1,1887,722,
1,1888,2960,16,0,
116,1,2107,768,1,
2360,2811,1,2361,2817,
1,2328,2833,1,2111,
741,1,1941,762,1,
2113,673,1,1242,2961,
16,0,116,1,2115,
2791,1,1681,2962,16,
0,116,1,2339,2802,
1,1422,2963,16,0,
116,1,52,2964,16,
0,116,1,1802,2965,
16,0,116,1,1538,
755,1,1917,774,1,
1377,2966,16,0,116,
1,2359,2822,1,2287,
2967,16,0,116,1,
1707,781,1,1926,704,
1,1709,2968,16,0,
116,1,1928,789,1,
1929,715,1,1930,795,
1,1932,820,1,1934,
826,1,1936,729,1,
1938,832,1,1830,805,
1,1940,811,1,1287,
2969,16,0,116,1,
2063,2970,16,0,116,
1,1584,2971,16,0,
116,1,2108,734,1,
1197,2972,16,0,116,
1,55,2973,19,115,
1,55,2974,5,54,
1,0,2975,16,0,
113,1,2358,2828,1,
2154,2976,16,0,113,
1,1858,2977,16,0,
113,1,10,2978,16,
0,113,1,2300,2797,
1,1490,683,1,1540,
2979,16,0,113,1,
2340,2980,16,0,113,
1,1654,2981,16,0,
113,1,1764,695,1,
21,2982,16,0,113,
1,1332,2983,16,0,
113,1,1115,2984,16,
0,113,1,1927,709,
1,32,2985,16,0,
113,1,1887,722,1,
1888,2986,16,0,113,
1,2107,768,1,2360,
2811,1,2361,2817,1,
2328,2833,1,2111,741,
1,1941,762,1,2113,
673,1,1242,2987,16,
0,113,1,2115,2791,
1,1681,2988,16,0,
113,1,2339,2802,1,
1422,2989,16,0,113,
1,52,2990,16,0,
113,1,1802,2991,16,
0,113,1,1538,755,
1,1917,774,1,1377,
2992,16,0,113,1,
2359,2822,1,2287,2993,
16,0,113,1,1707,
781,1,1926,704,1,
1709,2994,16,0,113,
1,1928,789,1,1929,
715,1,1930,795,1,
1932,820,1,1934,826,
1,1936,729,1,1938,
832,1,1830,805,1,
1940,811,1,1287,2995,
16,0,113,1,2063,
2996,16,0,113,1,
1584,2997,16,0,113,
1,2108,734,1,1197,
2998,16,0,113,1,
56,2999,19,112,1,
56,3000,5,54,1,
0,3001,16,0,110,
1,2358,2828,1,2154,
3002,16,0,110,1,
1858,3003,16,0,110,
1,10,3004,16,0,
110,1,2300,2797,1,
1490,683,1,1540,3005,
16,0,110,1,2340,
3006,16,0,110,1,
1654,3007,16,0,110,
1,1764,695,1,21,
3008,16,0,110,1,
1332,3009,16,0,110,
1,1115,3010,16,0,
110,1,1927,709,1,
32,3011,16,0,110,
1,1887,722,1,1888,
3012,16,0,110,1,
2107,768,1,2360,2811,
1,2361,2817,1,2328,
2833,1,2111,741,1,
1941,762,1,2113,673,
1,1242,3013,16,0,
110,1,2115,2791,1,
1681,3014,16,0,110,
1,2339,2802,1,1422,
3015,16,0,110,1,
52,3016,16,0,110,
1,1802,3017,16,0,
110,1,1538,755,1,
1917,774,1,1377,3018,
16,0,110,1,2359,
2822,1,2287,3019,16,
0,110,1,1707,781,
1,1926,704,1,1709,
3020,16,0,110,1,
1928,789,1,1929,715,
1,1930,795,1,1932,
820,1,1934,826,1,
1936,729,1,1938,832,
1,1830,805,1,1940,
811,1,1287,3021,16,
0,110,1,2063,3022,
16,0,110,1,1584,
3023,16,0,110,1,
2108,734,1,1197,3024,
16,0,110,1,57,
3025,19,109,1,57,
3026,5,54,1,0,
3027,16,0,107,1,
2358,2828,1,2154,3028,
16,0,107,1,1858,
3029,16,0,107,1,
10,3030,16,0,107,
1,2300,2797,1,1490,
683,1,1540,3031,16,
0,107,1,2340,3032,
16,0,107,1,1654,
3033,16,0,107,1,
1764,695,1,21,3034,
16,0,107,1,1332,
3035,16,0,107,1,
1115,3036,16,0,107,
1,1927,709,1,32,
3037,16,0,107,1,
1887,722,1,1888,3038,
16,0,107,1,2107,
768,1,2360,2811,1,
2361,2817,1,2328,2833,
1,2111,741,1,1941,
762,1,2113,673,1,
1242,3039,16,0,107,
1,2115,2791,1,1681,
3040,16,0,107,1,
2339,2802,1,1422,3041,
16,0,107,1,52,
3042,16,0,107,1,
1802,3043,16,0,107,
1,1538,755,1,1917,
774,1,1377,3044,16,
0,107,1,2359,2822,
1,2287,3045,16,0,
107,1,1707,781,1,
1926,704,1,1709,3046,
16,0,107,1,1928,
789,1,1929,715,1,
1930,795,1,1932,820,
1,1934,826,1,1936,
729,1,1938,832,1,
1830,805,1,1940,811,
1,1287,3047,16,0,
107,1,2063,3048,16,
0,107,1,1584,3049,
16,0,107,1,2108,
734,1,1197,3050,16,
0,107,1,58,3051,
19,629,1,58,3052,
5,9,1,2113,673,
1,2119,3053,16,0,
627,1,2204,1433,1,
2206,1439,1,2167,1446,
1,2243,3054,16,0,
627,1,2169,3055,16,
0,627,1,2208,3056,
16,0,627,1,2108,
734,1,59,3057,19,
626,1,59,3058,5,
9,1,2113,673,1,
2119,3059,16,0,624,
1,2204,1433,1,2206,
1439,1,2167,1446,1,
2243,3060,16,0,624,
1,2169,3061,16,0,
624,1,2208,3062,16,
0,624,1,2108,734,
1,60,3063,19,623,
1,60,3064,5,9,
1,2113,673,1,2119,
3065,16,0,621,1,
2204,1433,1,2206,1439,
1,2167,1446,1,2243,
3066,16,0,621,1,
2169,3067,16,0,621,
1,2208,3068,16,0,
621,1,2108,734,1,
61,3069,19,620,1,
61,3070,5,9,1,
2113,673,1,2119,3071,
16,0,618,1,2204,
1433,1,2206,1439,1,
2167,1446,1,2243,3072,
16,0,618,1,2169,
3073,16,0,618,1,
2208,3074,16,0,618,
1,2108,734,1,62,
3075,19,617,1,62,
3076,5,9,1,2113,
673,1,2119,3077,16,
0,615,1,2204,1433,
1,2206,1439,1,2167,
1446,1,2243,3078,16,
0,615,1,2169,3079,
16,0,615,1,2208,
3080,16,0,615,1,
2108,734,1,63,3081,
19,614,1,63,3082,
5,9,1,2113,673,
1,2119,3083,16,0,
612,1,2204,1433,1,
2206,1439,1,2167,1446,
1,2243,3084,16,0,
612,1,2169,3085,16,
0,612,1,2208,3086,
16,0,612,1,2108,
734,1,64,3087,19,
555,1,64,3088,5,
9,1,2113,673,1,
2119,3089,16,0,553,
1,2204,1433,1,2206,
1439,1,2167,1446,1,
2243,3090,16,0,553,
1,2169,3091,16,0,
553,1,2208,3092,16,
0,553,1,2108,734,
1,65,3093,19,552,
1,65,3094,5,9,
1,2113,673,1,2119,
3095,16,0,550,1,
2204,1433,1,2206,1439,
1,2167,1446,1,2243,
3096,16,0,550,1,
2169,3097,16,0,550,
1,2208,3098,16,0,
550,1,2108,734,1,
66,3099,19,549,1,
66,3100,5,9,1,
2113,673,1,2119,3101,
16,0,547,1,2204,
1433,1,2206,1439,1,
2167,1446,1,2243,3102,
16,0,547,1,2169,
3103,16,0,547,1,
2208,3104,16,0,547,
1,2108,734,1,67,
3105,19,546,1,67,
3106,5,9,1,2113,
673,1,2119,3107,16,
0,544,1,2204,1433,
1,2206,1439,1,2167,
1446,1,2243,3108,16,
0,544,1,2169,3109,
16,0,544,1,2208,
3110,16,0,544,1,
2108,734,1,68,3111,
19,543,1,68,3112,
5,9,1,2113,673,
1,2119,3113,16,0,
541,1,2204,1433,1,
2206,1439,1,2167,1446,
1,2243,3114,16,0,
541,1,2169,3115,16,
0,541,1,2208,3116,
16,0,541,1,2108,
734,1,69,3117,19,
610,1,69,3118,5,
9,1,2113,673,1,
2119,3119,16,0,608,
1,2204,1433,1,2206,
1439,1,2167,1446,1,
2243,3120,16,0,608,
1,2169,3121,16,0,
608,1,2208,3122,16,
0,608,1,2108,734,
1,70,3123,19,322,
1,70,3124,5,9,
1,2113,673,1,2119,
3125,16,0,320,1,
2204,1433,1,2206,1439,
1,2167,1446,1,2243,
3126,16,0,320,1,
2169,3127,16,0,320,
1,2208,3128,16,0,
320,1,2108,734,1,
71,3129,19,538,1,
71,3130,5,9,1,
2113,673,1,2119,3131,
16,0,536,1,2204,
1433,1,2206,1439,1,
2167,1446,1,2243,3132,
16,0,536,1,2169,
3133,16,0,536,1,
2208,3134,16,0,536,
1,2108,734,1,72,
3135,19,535,1,72,
3136,5,9,1,2113,
673,1,2119,3137,16,
0,533,1,2204,1433,
1,2206,1439,1,2167,
1446,1,2243,3138,16,
0,533,1,2169,3139,
16,0,533,1,2208,
3140,16,0,533,1,
2108,734,1,73,3141,
19,532,1,73,3142,
5,9,1,2113,673,
1,2119,3143,16,0,
530,1,2204,1433,1,
2206,1439,1,2167,1446,
1,2243,3144,16,0,
530,1,2169,3145,16,
0,530,1,2208,3146,
16,0,530,1,2108,
734,1,74,3147,19,
529,1,74,3148,5,
9,1,2113,673,1,
2119,3149,16,0,527,
1,2204,1433,1,2206,
1439,1,2167,1446,1,
2243,3150,16,0,527,
1,2169,3151,16,0,
527,1,2208,3152,16,
0,527,1,2108,734,
1,75,3153,19,602,
1,75,3154,5,9,
1,2113,673,1,2119,
3155,16,0,600,1,
2204,1433,1,2206,1439,
1,2167,1446,1,2243,
3156,16,0,600,1,
2169,3157,16,0,600,
1,2208,3158,16,0,
600,1,2108,734,1,
76,3159,19,523,1,
76,3160,5,9,1,
2113,673,1,2119,3161,
16,0,521,1,2204,
1433,1,2206,1439,1,
2167,1446,1,2243,3162,
16,0,521,1,2169,
3163,16,0,521,1,
2208,3164,16,0,521,
1,2108,734,1,77,
3165,19,599,1,77,
3166,5,9,1,2113,
673,1,2119,3167,16,
0,597,1,2204,1433,
1,2206,1439,1,2167,
1446,1,2243,3168,16,
0,597,1,2169,3169,
16,0,597,1,2208,
3170,16,0,597,1,
2108,734,1,78,3171,
19,596,1,78,3172,
5,9,1,2113,673,
1,2119,3173,16,0,
594,1,2204,1433,1,
2206,1439,1,2167,1446,
1,2243,3174,16,0,
594,1,2169,3175,16,
0,594,1,2208,3176,
16,0,594,1,2108,
734,1,79,3177,19,
516,1,79,3178,5,
9,1,2113,673,1,
2119,3179,16,0,514,
1,2204,1433,1,2206,
1439,1,2167,1446,1,
2243,3180,16,0,514,
1,2169,3181,16,0,
514,1,2208,3182,16,
0,514,1,2108,734,
1,80,3183,19,593,
1,80,3184,5,9,
1,2113,673,1,2119,
3185,16,0,591,1,
2204,1433,1,2206,1439,
1,2167,1446,1,2243,
3186,16,0,591,1,
2169,3187,16,0,591,
1,2208,3188,16,0,
591,1,2108,734,1,
81,3189,19,510,1,
81,3190,5,9,1,
2113,673,1,2119,3191,
16,0,508,1,2204,
1433,1,2206,1439,1,
2167,1446,1,2243,3192,
16,0,508,1,2169,
3193,16,0,508,1,
2208,3194,16,0,508,
1,2108,734,1,82,
3195,19,507,1,82,
3196,5,9,1,2113,
673,1,2119,3197,16,
0,505,1,2204,1433,
1,2206,1439,1,2167,
1446,1,2243,3198,16,
0,505,1,2169,3199,
16,0,505,1,2208,
3200,16,0,505,1,
2108,734,1,83,3201,
19,504,1,83,3202,
5,9,1,2113,673,
1,2119,3203,16,0,
502,1,2204,1433,1,
2206,1439,1,2167,1446,
1,2243,3204,16,0,
502,1,2169,3205,16,
0,502,1,2208,3206,
16,0,502,1,2108,
734,1,84,3207,19,
501,1,84,3208,5,
9,1,2113,673,1,
2119,3209,16,0,499,
1,2204,1433,1,2206,
1439,1,2167,1446,1,
2243,3210,16,0,499,
1,2169,3211,16,0,
499,1,2208,3212,16,
0,499,1,2108,734,
1,85,3213,19,589,
1,85,3214,5,9,
1,2113,673,1,2119,
3215,16,0,587,1,
2204,1433,1,2206,1439,
1,2167,1446,1,2243,
3216,16,0,587,1,
2169,3217,16,0,587,
1,2208,3218,16,0,
587,1,2108,734,1,
86,3219,19,244,1,
86,3220,5,9,1,
2113,673,1,2119,3221,
16,0,242,1,2204,
1433,1,2206,1439,1,
2167,1446,1,2243,3222,
16,0,242,1,2169,
3223,16,0,242,1,
2208,3224,16,0,242,
1,2108,734,1,87,
3225,19,496,1,87,
3226,5,9,1,2113,
673,1,2119,3227,16,
0,494,1,2204,1433,
1,2206,1439,1,2167,
1446,1,2243,3228,16,
0,494,1,2169,3229,
16,0,494,1,2208,
3230,16,0,494,1,
2108,734,1,88,3231,
19,493,1,88,3232,
5,9,1,2113,673,
1,2119,3233,16,0,
491,1,2204,1433,1,
2206,1439,1,2167,1446,
1,2243,3234,16,0,
491,1,2169,3235,16,
0,491,1,2208,3236,
16,0,491,1,2108,
734,1,89,3237,19,
487,1,89,3238,5,
9,1,2113,673,1,
2119,3239,16,0,485,
1,2204,1433,1,2206,
1439,1,2167,1446,1,
2243,3240,16,0,485,
1,2169,3241,16,0,
485,1,2208,3242,16,
0,485,1,2108,734,
1,90,3243,19,490,
1,90,3244,5,9,
1,2113,673,1,2119,
3245,16,0,488,1,
2204,1433,1,2206,1439,
1,2167,1446,1,2243,
3246,16,0,488,1,
2169,3247,16,0,488,
1,2208,3248,16,0,
488,1,2108,734,1,
91,3249,19,133,1,
91,3250,5,109,1,
0,3251,16,0,199,
1,1,1750,1,2,
1756,1,3,1761,1,
4,1766,1,5,1771,
1,6,1776,1,7,
1781,1,8,3252,16,
0,131,1,256,3253,
16,0,177,1,18,
3254,16,0,144,1,
1777,3255,16,0,177,
1,525,3256,16,0,
177,1,509,3257,16,
0,177,1,277,3258,
16,0,177,1,32,
3259,16,0,171,1,
1540,3260,16,0,171,
1,1924,3261,16,0,
369,1,2300,2797,1,
43,3262,16,0,177,
1,2303,3263,16,0,
177,1,1802,3264,16,
0,171,1,46,3265,
16,0,182,1,41,
3266,16,0,177,1,
299,3267,16,0,177,
1,52,3268,16,0,
177,1,2063,3269,16,
0,171,1,62,3270,
16,0,203,1,1764,
695,1,65,3271,16,
0,206,1,2328,2833,
1,322,3272,16,0,
177,1,1830,805,1,
1287,3273,16,0,171,
1,71,3274,16,0,
177,1,1833,3275,16,
0,177,1,1332,3276,
16,0,171,1,1584,
3277,16,0,171,1,
79,3278,16,0,177,
1,2339,2802,1,2340,
3279,16,0,199,1,
1538,755,1,76,3280,
16,0,177,1,85,
3281,16,0,177,1,
89,3282,16,0,177,
1,346,3283,16,0,
177,1,97,3284,16,
0,177,1,2358,2828,
1,2359,2822,1,1858,
3285,16,0,171,1,
2361,2817,1,2111,741,
1,2113,673,1,102,
3286,16,0,177,1,
2117,3287,16,0,154,
1,1115,3288,16,0,
171,1,112,3289,16,
0,177,1,372,3290,
16,0,439,1,1377,
3291,16,0,171,1,
1629,3292,16,0,177,
1,124,3293,16,0,
177,1,376,3294,16,
0,443,1,378,3295,
16,0,445,1,1887,
722,1,1888,3296,16,
0,171,1,374,3297,
16,0,441,1,137,
3298,16,0,177,1,
381,3299,16,0,177,
1,1654,3300,16,0,
171,1,151,3301,16,
0,177,1,1159,3302,
16,0,177,1,1917,
774,1,1919,3303,16,
0,361,1,1922,3304,
16,0,365,1,166,
3305,16,0,177,1,
1422,3306,16,0,171,
1,1926,704,1,1927,
709,1,1928,789,1,
1929,715,1,1930,795,
1,1932,820,1,2360,
2811,1,1934,826,1,
1936,729,1,431,3307,
16,0,177,1,1938,
832,1,182,3308,16,
0,177,1,1940,811,
1,1941,762,1,1197,
3309,16,0,171,1,
447,3310,16,0,177,
1,406,3311,16,0,
177,1,199,3312,16,
0,177,1,1707,781,
1,1709,3313,16,0,
171,1,459,3314,16,
0,177,1,462,3315,
16,0,177,1,1111,
3316,16,0,632,1,
217,3317,16,0,177,
1,1681,3318,16,0,
171,1,1738,3319,16,
0,177,1,2107,768,
1,2108,734,1,1490,
683,1,236,3320,16,
0,177,1,1242,3321,
16,0,171,1,2115,
2791,1,1501,3322,16,
0,177,1,92,3323,
19,567,1,92,3324,
5,79,1,1584,3325,
16,0,565,1,2113,
673,1,112,3326,16,
0,565,1,1858,3327,
16,0,565,1,431,
3328,16,0,565,1,
447,3329,16,0,565,
1,1490,683,1,1654,
3330,16,0,565,1,
2303,3331,16,0,565,
1,124,3332,16,0,
565,1,525,3333,16,
0,565,1,236,3334,
16,0,565,1,346,
3335,16,0,565,1,
1764,695,1,459,3336,
16,0,565,1,1332,
3337,16,0,565,1,
1115,3338,16,0,565,
1,1926,704,1,1927,
709,1,137,3339,16,
0,565,1,1929,715,
1,32,3340,16,0,
565,1,1777,3341,16,
0,565,1,1887,722,
1,1888,3342,16,0,
565,1,1936,729,1,
2108,734,1,256,3343,
16,0,565,1,1833,
3344,16,0,565,1,
2111,741,1,41,3345,
16,0,565,1,151,
3346,16,0,565,1,
43,3347,16,0,565,
1,1681,3348,16,0,
565,1,509,3349,16,
0,565,1,1738,3350,
16,0,565,1,1422,
3351,16,0,565,1,
52,3352,16,0,565,
1,1538,755,1,381,
3353,16,0,565,1,
1540,3354,16,0,565,
1,1941,762,1,166,
3355,16,0,565,1,
1802,3356,16,0,565,
1,277,3357,16,0,
565,1,2107,768,1,
62,3358,16,0,565,
1,1917,774,1,1159,
3359,16,0,565,1,
71,3360,16,0,565,
1,1707,781,1,182,
3361,16,0,565,1,
1709,3362,16,0,565,
1,1928,789,1,76,
3363,16,0,565,1,
1930,795,1,79,3364,
16,0,565,1,299,
3365,16,0,565,1,
1242,3366,16,0,565,
1,1501,3367,16,0,
565,1,85,3368,16,
0,565,1,1830,805,
1,1940,811,1,1287,
3369,16,0,565,1,
89,3370,16,0,565,
1,199,3371,16,0,
565,1,406,3372,16,
0,565,1,1932,820,
1,1377,3373,16,0,
565,1,1934,826,1,
97,3374,16,0,565,
1,1938,832,1,2063,
3375,16,0,565,1,
102,3376,16,0,565,
1,1629,3377,16,0,
565,1,322,3378,16,
0,565,1,462,3379,
16,0,565,1,1197,
3380,16,0,565,1,
217,3381,16,0,565,
1,93,3382,19,564,
1,93,3383,5,79,
1,1584,3384,16,0,
562,1,2113,673,1,
112,3385,16,0,562,
1,1858,3386,16,0,
562,1,431,3387,16,
0,562,1,447,3388,
16,0,562,1,1490,
683,1,1654,3389,16,
0,562,1,2303,3390,
16,0,562,1,124,
3391,16,0,562,1,
525,3392,16,0,562,
1,236,3393,16,0,
562,1,346,3394,16,
0,562,1,1764,695,
1,459,3395,16,0,
562,1,1332,3396,16,
0,562,1,1115,3397,
16,0,562,1,1926,
704,1,1927,709,1,
137,3398,16,0,562,
1,1929,715,1,32,
3399,16,0,562,1,
1777,3400,16,0,562,
1,1887,722,1,1888,
3401,16,0,562,1,
1936,729,1,2108,734,
1,256,3402,16,0,
562,1,1833,3403,16,
0,562,1,2111,741,
1,41,3404,16,0,
562,1,151,3405,16,
0,562,1,43,3406,
16,0,562,1,1681,
3407,16,0,562,1,
509,3408,16,0,562,
1,1738,3409,16,0,
562,1,1422,3410,16,
0,562,1,52,3411,
16,0,562,1,1538,
755,1,381,3412,16,
0,562,1,1540,3413,
16,0,562,1,1941,
762,1,166,3414,16,
0,562,1,1802,3415,
16,0,562,1,277,
3416,16,0,562,1,
2107,768,1,62,3417,
16,0,562,1,1917,
774,1,1159,3418,16,
0,562,1,71,3419,
16,0,562,1,1707,
781,1,182,3420,16,
0,562,1,1709,3421,
16,0,562,1,1928,
789,1,76,3422,16,
0,562,1,1930,795,
1,79,3423,16,0,
562,1,299,3424,16,
0,562,1,1242,3425,
16,0,562,1,1501,
3426,16,0,562,1,
85,3427,16,0,562,
1,1830,805,1,1940,
811,1,1287,3428,16,
0,562,1,89,3429,
16,0,562,1,199,
3430,16,0,562,1,
406,3431,16,0,562,
1,1932,820,1,1377,
3432,16,0,562,1,
1934,826,1,97,3433,
16,0,562,1,1938,
832,1,2063,3434,16,
0,562,1,102,3435,
16,0,562,1,1629,
3436,16,0,562,1,
322,3437,16,0,562,
1,462,3438,16,0,
562,1,1197,3439,16,
0,562,1,217,3440,
16,0,562,1,94,
3441,19,561,1,94,
3442,5,79,1,1584,
3443,16,0,559,1,
2113,673,1,112,3444,
16,0,559,1,1858,
3445,16,0,559,1,
431,3446,16,0,559,
1,447,3447,16,0,
559,1,1490,683,1,
1654,3448,16,0,559,
1,2303,3449,16,0,
559,1,124,3450,16,
0,559,1,525,3451,
16,0,559,1,236,
3452,16,0,559,1,
346,3453,16,0,559,
1,1764,695,1,459,
3454,16,0,559,1,
1332,3455,16,0,559,
1,1115,3456,16,0,
559,1,1926,704,1,
1927,709,1,137,3457,
16,0,559,1,1929,
715,1,32,3458,16,
0,559,1,1777,3459,
16,0,559,1,1887,
722,1,1888,3460,16,
0,559,1,1936,729,
1,2108,734,1,256,
3461,16,0,559,1,
1833,3462,16,0,559,
1,2111,741,1,41,
3463,16,0,559,1,
151,3464,16,0,559,
1,43,3465,16,0,
559,1,1681,3466,16,
0,559,1,509,3467,
16,0,559,1,1738,
3468,16,0,559,1,
1422,3469,16,0,559,
1,52,3470,16,0,
559,1,1538,755,1,
381,3471,16,0,559,
1,1540,3472,16,0,
559,1,1941,762,1,
166,3473,16,0,559,
1,1802,3474,16,0,
559,1,277,3475,16,
0,559,1,2107,768,
1,62,3476,16,0,
559,1,1917,774,1,
1159,3477,16,0,559,
1,71,3478,16,0,
559,1,1707,781,1,
182,3479,16,0,559,
1,1709,3480,16,0,
559,1,1928,789,1,
76,3481,16,0,559,
1,1930,795,1,79,
3482,16,0,559,1,
299,3483,16,0,559,
1,1242,3484,16,0,
559,1,1501,3485,16,
0,559,1,85,3486,
16,0,559,1,1830,
805,1,1940,811,1,
1287,3487,16,0,559,
1,89,3488,16,0,
559,1,199,3489,16,
0,559,1,406,3490,
16,0,559,1,1932,
820,1,1377,3491,16,
0,559,1,1934,826,
1,97,3492,16,0,
559,1,1938,832,1,
2063,3493,16,0,559,
1,102,3494,16,0,
559,1,1629,3495,16,
0,559,1,322,3496,
16,0,559,1,462,
3497,16,0,559,1,
1197,3498,16,0,559,
1,217,3499,16,0,
559,1,95,3500,19,
103,1,95,3501,5,
1,1,0,3502,16,
0,104,1,96,3503,
19,426,1,96,3504,
5,1,1,0,3505,
16,0,424,1,97,
3506,19,286,1,97,
3507,5,2,1,0,
3508,16,0,284,1,
2340,3509,16,0,335,
1,98,3510,19,283,
1,98,3511,5,2,
1,0,3512,16,0,
281,1,2340,3513,16,
0,404,1,99,3514,
19,194,1,99,3515,
5,2,1,0,3516,
16,0,192,1,2340,
3517,16,0,330,1,
100,3518,19,197,1,
100,3519,5,4,1,
0,3520,16,0,198,
1,2340,3521,16,0,
198,1,2281,3522,16,
0,195,1,2351,3523,
16,0,195,1,101,
3524,19,142,1,101,
3525,5,2,1,2119,
3526,16,0,580,1,
2208,3527,16,0,140,
1,102,3528,19,462,
1,102,3529,5,4,
1,2169,3530,16,0,
603,1,2119,3531,16,
0,460,1,2208,3532,
16,0,460,1,2243,
3533,16,0,603,1,
103,3534,19,147,1,
103,3535,5,3,1,
2287,3536,16,0,336,
1,2154,3537,16,0,
577,1,10,3538,16,
0,145,1,104,3539,
19,153,1,104,3540,
5,23,1,0,3541,
16,0,295,1,1888,
3542,16,0,465,1,
2154,3543,16,0,151,
1,1115,3544,16,0,
268,1,1654,3545,16,
0,268,1,1709,3546,
16,0,465,1,1858,
3547,16,0,465,1,
2340,3548,16,0,295,
1,10,3549,16,0,
151,1,1197,3550,16,
0,268,1,1332,3551,
16,0,268,1,1681,
3552,16,0,465,1,
1377,3553,16,0,268,
1,21,3554,16,0,
155,1,1540,3555,16,
0,268,1,1242,3556,
16,0,268,1,1802,
3557,16,0,465,1,
2063,3558,16,0,465,
1,1287,3559,16,0,
268,1,2287,3560,16,
0,151,1,1584,3561,
16,0,268,1,32,
3562,16,0,465,1,
1422,3563,16,0,268,
1,105,3564,19,130,
1,105,3565,5,24,
1,0,3566,16,0,
128,1,1888,3567,16,
0,143,1,2154,3568,
16,0,143,1,1115,
3569,16,0,143,1,
1654,3570,16,0,143,
1,1709,3571,16,0,
143,1,1858,3572,16,
0,143,1,2340,3573,
16,0,128,1,10,
3574,16,0,143,1,
1197,3575,16,0,143,
1,1332,3576,16,0,
143,1,52,3577,16,
0,201,1,1681,3578,
16,0,143,1,1377,
3579,16,0,143,1,
21,3580,16,0,143,
1,1540,3581,16,0,
143,1,1242,3582,16,
0,143,1,1802,3583,
16,0,143,1,2063,
3584,16,0,143,1,
1287,3585,16,0,143,
1,2287,3586,16,0,
143,1,1584,3587,16,
0,143,1,32,3588,
16,0,143,1,1422,
3589,16,0,143,1,
106,3590,19,574,1,
106,3591,5,4,1,
2169,3592,16,0,572,
1,2119,3593,16,0,
572,1,2208,3594,16,
0,572,1,2243,3595,
16,0,572,1,107,
3596,19,214,1,107,
3597,5,10,1,1888,
3598,16,0,370,1,
2298,3599,16,0,212,
1,1709,3600,16,0,
370,1,1858,3601,16,
0,370,1,1681,3602,
16,0,370,1,2165,
3603,16,0,579,1,
1802,3604,16,0,370,
1,2063,3605,16,0,
370,1,31,3606,16,
0,583,1,32,3607,
16,0,370,1,108,
3608,19,458,1,108,
3609,5,1,1,32,
3610,16,0,456,1,
109,3611,19,164,1,
109,3612,5,7,1,
2063,3613,16,0,475,
1,1709,3614,16,0,
205,1,1802,3615,16,
0,301,1,1888,3616,
16,0,354,1,1858,
3617,16,0,338,1,
1681,3618,16,0,162,
1,32,3619,16,0,
478,1,110,3620,19,
267,1,110,3621,5,
17,1,1332,3622,16,
0,383,1,1888,3623,
16,0,397,1,1115,
3624,16,0,265,1,
1654,3625,16,0,434,
1,1709,3626,16,0,
397,1,1858,3627,16,
0,397,1,1197,3628,
16,0,274,1,1681,
3629,16,0,397,1,
1377,3630,16,0,431,
1,1242,3631,16,0,
311,1,1540,3632,16,
0,434,1,1802,3633,
16,0,397,1,2063,
3634,16,0,397,1,
1287,3635,16,0,337,
1,1584,3636,16,0,
584,1,32,3637,16,
0,397,1,1422,3638,
16,0,430,1,111,
3639,19,395,1,111,
3640,5,7,1,2063,
3641,16,0,393,1,
1709,3642,16,0,393,
1,1802,3643,16,0,
393,1,1888,3644,16,
0,393,1,1858,3645,
16,0,393,1,1681,
3646,16,0,393,1,
32,3647,16,0,393,
1,112,3648,19,391,
1,112,3649,5,7,
1,2063,3650,16,0,
389,1,1709,3651,16,
0,389,1,1802,3652,
16,0,389,1,1888,
3653,16,0,389,1,
1858,3654,16,0,389,
1,1681,3655,16,0,
389,1,32,3656,16,
0,389,1,113,3657,
19,419,1,113,3658,
5,7,1,2063,3659,
16,0,417,1,1709,
3660,16,0,417,1,
1802,3661,16,0,417,
1,1888,3662,16,0,
417,1,1858,3663,16,
0,417,1,1681,3664,
16,0,417,1,32,
3665,16,0,417,1,
114,3666,19,452,1,
114,3667,5,7,1,
2063,3668,16,0,450,
1,1709,3669,16,0,
450,1,1802,3670,16,
0,450,1,1888,3671,
16,0,450,1,1858,
3672,16,0,450,1,
1681,3673,16,0,450,
1,32,3674,16,0,
450,1,115,3675,19,
382,1,115,3676,5,
7,1,2063,3677,16,
0,380,1,1709,3678,
16,0,380,1,1802,
3679,16,0,380,1,
1888,3680,16,0,380,
1,1858,3681,16,0,
380,1,1681,3682,16,
0,380,1,32,3683,
16,0,380,1,116,
3684,19,379,1,116,
3685,5,7,1,2063,
3686,16,0,377,1,
1709,3687,16,0,377,
1,1802,3688,16,0,
377,1,1888,3689,16,
0,377,1,1858,3690,
16,0,377,1,1681,
3691,16,0,377,1,
32,3692,16,0,377,
1,117,3693,19,376,
1,117,3694,5,7,
1,2063,3695,16,0,
374,1,1709,3696,16,
0,374,1,1802,3697,
16,0,374,1,1888,
3698,16,0,374,1,
1858,3699,16,0,374,
1,1681,3700,16,0,
374,1,32,3701,16,
0,374,1,118,3702,
19,414,1,118,3703,
5,7,1,2063,3704,
16,0,412,1,1709,
3705,16,0,412,1,
1802,3706,16,0,412,
1,1888,3707,16,0,
412,1,1858,3708,16,
0,412,1,1681,3709,
16,0,412,1,32,
3710,16,0,412,1,
119,3711,19,260,1,
119,3712,5,2,1,
1540,3713,16,0,539,
1,1654,3714,16,0,
258,1,120,3715,19,
437,1,120,3716,5,
57,1,1584,3717,16,
0,435,1,112,3718,
16,0,435,1,1858,
3719,16,0,435,1,
431,3720,16,0,435,
1,447,3721,16,0,
435,1,2303,3722,16,
0,435,1,124,3723,
16,0,435,1,525,
3724,16,0,435,1,
236,3725,16,0,435,
1,346,3726,16,0,
435,1,459,3727,16,
0,435,1,1332,3728,
16,0,435,1,1115,
3729,16,0,435,1,
462,3730,16,0,435,
1,137,3731,16,0,
435,1,32,3732,16,
0,435,1,1777,3733,
16,0,435,1,1888,
3734,16,0,435,1,
256,3735,16,0,435,
1,1833,3736,16,0,
435,1,41,3737,16,
0,435,1,151,3738,
16,0,435,1,43,
3739,16,0,435,1,
1681,3740,16,0,435,
1,509,3741,16,0,
435,1,1738,3742,16,
0,435,1,1422,3743,
16,0,435,1,52,
3744,16,0,435,1,
381,3745,16,0,435,
1,166,3746,16,0,
435,1,1802,3747,16,
0,435,1,277,3748,
16,0,435,1,62,
3749,16,0,480,1,
1540,3750,16,0,435,
1,1159,3751,16,0,
435,1,71,3752,16,
0,435,1,1654,3753,
16,0,435,1,182,
3754,16,0,435,1,
1709,3755,16,0,435,
1,76,3756,16,0,
435,1,79,3757,16,
0,435,1,299,3758,
16,0,435,1,1242,
3759,16,0,435,1,
1501,3760,16,0,435,
1,85,3761,16,0,
435,1,1287,3762,16,
0,435,1,89,3763,
16,0,435,1,199,
3764,16,0,435,1,
406,3765,16,0,435,
1,1377,3766,16,0,
435,1,97,3767,16,
0,435,1,2063,3768,
16,0,435,1,102,
3769,16,0,435,1,
1629,3770,16,0,435,
1,322,3771,16,0,
435,1,1197,3772,16,
0,435,1,217,3773,
16,0,435,1,121,
3774,19,519,1,121,
3775,5,2,1,459,
3776,16,0,517,1,
41,3777,16,0,605,
1,122,3778,19,526,
1,122,3779,5,3,
1,462,3780,16,0,
524,1,459,3781,16,
0,571,1,41,3782,
16,0,571,1,123,
3783,19,3784,4,36,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,1,123,3779,1,
124,3785,19,448,1,
124,3786,5,57,1,
1584,3787,16,0,446,
1,112,3788,16,0,
446,1,1858,3789,16,
0,446,1,431,3790,
16,0,446,1,447,
3791,16,0,446,1,
2303,3792,16,0,446,
1,124,3793,16,0,
446,1,525,3794,16,
0,446,1,236,3795,
16,0,446,1,346,
3796,16,0,446,1,
459,3797,16,0,446,
1,1332,3798,16,0,
446,1,1115,3799,16,
0,446,1,462,3800,
16,0,446,1,137,
3801,16,0,446,1,
32,3802,16,0,446,
1,1777,3803,16,0,
446,1,1888,3804,16,
0,446,1,256,3805,
16,0,446,1,1833,
3806,16,0,446,1,
41,3807,16,0,446,
1,151,3808,16,0,
446,1,43,3809,16,
0,446,1,1681,3810,
16,0,446,1,509,
3811,16,0,446,1,
1738,3812,16,0,446,
1,1422,3813,16,0,
446,1,52,3814,16,
0,446,1,381,3815,
16,0,446,1,166,
3816,16,0,446,1,
1802,3817,16,0,446,
1,277,3818,16,0,
446,1,62,3819,16,
0,481,1,1540,3820,
16,0,446,1,1159,
3821,16,0,446,1,
71,3822,16,0,446,
1,1654,3823,16,0,
446,1,182,3824,16,
0,446,1,1709,3825,
16,0,446,1,76,
3826,16,0,446,1,
79,3827,16,0,446,
1,299,3828,16,0,
446,1,1242,3829,16,
0,446,1,1501,3830,
16,0,446,1,85,
3831,16,0,446,1,
1287,3832,16,0,446,
1,89,3833,16,0,
446,1,199,3834,16,
0,446,1,406,3835,
16,0,446,1,1377,
3836,16,0,446,1,
97,3837,16,0,446,
1,2063,3838,16,0,
446,1,102,3839,16,
0,446,1,1629,3840,
16,0,446,1,322,
3841,16,0,446,1,
1197,3842,16,0,446,
1,217,3843,16,0,
446,1,125,3844,19,
3845,4,28,86,0,
101,0,99,0,116,
0,111,0,114,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,125,3786,1,
126,3846,19,3847,4,
32,82,0,111,0,
116,0,97,0,116,
0,105,0,111,0,
110,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,126,
3786,1,127,3848,19,
3849,4,24,76,0,
105,0,115,0,116,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,127,3786,
1,128,3850,19,139,
1,128,3851,5,56,
1,1584,3852,16,0,
575,1,112,3853,16,
0,264,1,1858,3854,
16,0,433,1,431,
3855,16,0,476,1,
447,3856,16,0,325,
1,406,3857,16,0,
464,1,2303,3858,16,
0,299,1,124,3859,
16,0,279,1,525,
3860,16,0,325,1,
236,3861,16,0,353,
1,346,3862,16,0,
432,1,459,3863,16,
0,173,1,1332,3864,
16,0,349,1,1115,
3865,16,0,137,1,
462,3866,16,0,173,
1,137,3867,16,0,
294,1,32,3868,16,
0,433,1,1777,3869,
16,0,310,1,1888,
3870,16,0,433,1,
256,3871,16,0,385,
1,41,3872,16,0,
173,1,151,3873,16,
0,300,1,43,3874,
16,0,576,1,1681,
3875,16,0,433,1,
509,3876,16,0,585,
1,1738,3877,16,0,
215,1,1422,3878,16,
0,415,1,52,3879,
16,0,497,1,381,
3880,16,0,454,1,
166,3881,16,0,312,
1,1802,3882,16,0,
433,1,277,3883,16,
0,405,1,1540,3884,
16,0,477,1,1159,
3885,16,0,275,1,
71,3886,16,0,225,
1,1654,3887,16,0,
477,1,182,3888,16,
0,325,1,1709,3889,
16,0,433,1,76,
3890,16,0,453,1,
79,3891,16,0,226,
1,299,3892,16,0,
410,1,1242,3893,16,
0,293,1,1501,3894,
16,0,459,1,85,
3895,16,0,421,1,
1287,3896,16,0,323,
1,1833,3897,16,0,
309,1,199,3898,16,
0,334,1,89,3899,
16,0,241,1,1377,
3900,16,0,400,1,
97,3901,16,0,399,
1,2063,3902,16,0,
433,1,102,3903,16,
0,256,1,1629,3904,
16,0,586,1,322,
3905,16,0,422,1,
1197,3906,16,0,240,
1,217,3907,16,0,
345,1,129,3908,19,
3909,4,36,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
129,3851,1,130,3910,
19,3911,4,30,73,
0,100,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
130,3851,1,131,3912,
19,3913,4,36,73,
0,100,0,101,0,
110,0,116,0,68,
0,111,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,131,3851,1,132,
3914,19,3915,4,44,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,67,0,97,0,
108,0,108,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
132,3851,1,133,3916,
19,3917,4,32,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,133,3851,1,
134,3918,19,3919,4,
30,85,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,134,3851,1,
135,3920,19,3921,4,
36,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,135,3851,
1,136,3922,19,3923,
4,42,80,0,97,
0,114,0,101,0,
110,0,116,0,104,
0,101,0,115,0,
105,0,115,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
136,3851,1,137,3924,
19,3925,4,56,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,137,3851,1,139,
3926,19,641,1,139,
3501,1,140,3927,19,
652,1,140,3501,1,
141,3928,19,2820,1,
141,3504,1,142,3929,
19,2825,1,142,3504,
1,143,3930,19,2815,
1,143,3504,1,144,
3931,19,2831,1,144,
3504,1,145,3932,19,
2806,1,145,3507,1,
146,3933,19,2836,1,
146,3507,1,147,3934,
19,2800,1,147,3511,
1,148,3935,19,2795,
1,148,3511,1,149,
3936,19,668,1,149,
3515,1,150,3937,19,
663,1,150,3515,1,
151,3938,19,647,1,
151,3519,1,152,3939,
19,657,1,152,3519,
1,153,3940,19,1442,
1,153,3525,1,154,
3941,19,1437,1,154,
3525,1,155,3942,19,
1450,1,155,3529,1,
156,3943,19,1483,1,
156,3535,1,157,3944,
19,1466,1,157,3535,
1,158,3945,19,1006,
1,158,3540,1,159,
3946,19,677,1,159,
3597,1,160,3947,19,
737,1,160,3597,1,
161,3948,19,745,1,
161,3609,1,162,3949,
19,771,1,162,3609,
1,163,3950,19,758,
1,163,3612,1,164,
3951,19,814,1,164,
3612,1,165,3952,19,
687,1,165,3612,1,
166,3953,19,835,1,
166,3612,1,167,3954,
19,732,1,167,3612,
1,168,3955,19,829,
1,168,3612,1,169,
3956,19,823,1,169,
3612,1,170,3957,19,
798,1,170,3612,1,
171,3958,19,718,1,
171,3612,1,172,3959,
19,792,1,172,3612,
1,173,3960,19,712,
1,173,3612,1,174,
3961,19,707,1,174,
3612,1,175,3962,19,
1309,1,175,3649,1,
176,3963,19,1303,1,
176,3658,1,177,3964,
19,1297,1,177,3667,
1,178,3965,19,1292,
1,178,3667,1,179,
3966,19,726,1,179,
3676,1,180,3967,19,
777,1,180,3676,1,
181,3968,19,809,1,
181,3685,1,182,3969,
19,699,1,182,3694,
1,183,3970,19,785,
1,183,3703,1,184,
3971,19,1169,1,184,
3712,1,185,3972,19,
1031,1,185,3712,1,
186,3973,19,1159,1,
186,3712,1,187,3974,
19,1208,1,187,3712,
1,188,3975,19,1280,
1,188,3621,1,189,
3976,19,1322,1,189,
3621,1,190,3977,19,
1245,1,190,3621,1,
191,3978,19,1154,1,
191,3621,1,192,3979,
19,1149,1,192,3621,
1,193,3980,19,993,
1,193,3621,1,194,
3981,19,1351,1,194,
3621,1,195,3982,19,
1218,1,195,3621,1,
196,3983,19,1356,1,
196,3621,1,197,3984,
19,1361,1,197,3621,
1,198,3985,19,1197,
1,198,3621,1,199,
3986,19,1123,1,199,
3621,1,200,3987,19,
1036,1,200,3621,1,
201,3988,19,1395,1,
201,3621,1,202,3989,
19,1265,1,202,3621,
1,203,3990,19,999,
1,203,3640,1,204,
3991,19,1405,1,204,
3640,1,205,3992,19,
1388,1,205,3786,1,
206,3993,19,1383,1,
206,3786,1,207,3994,
19,1378,1,207,3786,
1,208,3995,19,1373,
1,208,3786,1,209,
3996,19,1018,1,209,
3786,1,210,3997,19,
1339,1,210,3786,1,
211,3998,19,1025,1,
211,3786,1,212,3999,
19,1234,1,212,3851,
1,213,4000,19,1045,
1,213,3851,1,214,
4001,19,1059,1,214,
3851,1,215,4002,19,
1080,1,215,3851,1,
216,4003,19,1075,1,
216,3851,1,217,4004,
19,1070,1,217,3851,
1,218,4005,19,1065,
1,218,3851,1,219,
4006,19,1223,1,219,
3851,1,220,4007,19,
1213,1,220,3851,1,
221,4008,19,1255,1,
221,3851,1,222,4009,
19,1250,1,222,3851,
1,223,4010,19,1203,
1,223,3851,1,224,
4011,19,1187,1,224,
3851,1,225,4012,19,
1133,1,225,3851,1,
226,4013,19,1086,1,
226,3851,1,227,4014,
19,1050,1,227,3851,
1,228,4015,19,1012,
1,228,3851,1,229,
4016,19,1400,1,229,
3851,1,230,4017,19,
1367,1,230,3851,1,
231,4018,19,1346,1,
231,3851,1,232,4019,
19,1328,1,232,3851,
1,233,4020,19,1314,
1,233,3851,1,234,
4021,19,1270,1,234,
3851,1,235,4022,19,
1260,1,235,3851,1,
236,4023,19,1239,1,
236,3851,1,237,4024,
19,1192,1,237,3851,
1,238,4025,19,1228,
1,238,3851,1,239,
4026,19,1275,1,239,
3851,1,240,4027,19,
1333,1,240,3851,1,
241,4028,19,1128,1,
241,3851,1,242,4029,
19,1181,1,242,3851,
1,243,4030,19,1164,
1,243,3851,1,244,
4031,19,1144,1,244,
3851,1,245,4032,19,
1176,1,245,3851,1,
246,4033,19,1415,1,
246,3851,1,247,4034,
19,1093,1,247,3851,
1,248,4035,19,1098,
1,248,3851,1,249,
4036,19,1118,1,249,
3851,1,250,4037,19,
1108,1,250,3851,1,
251,4038,19,1113,1,
251,3851,1,252,4039,
19,1103,1,252,3851,
1,253,4040,19,1410,
1,253,3851,1,254,
4041,19,1138,1,254,
3851,1,255,4042,19,
1286,1,255,3716,1,
256,4043,19,1504,1,
256,3775,1,257,4044,
19,1498,1,257,3775,
1,258,4045,19,1477,
1,258,3779,1,259,
4046,19,1784,1,259,
3565,1,260,4047,19,
1779,1,260,3565,1,
261,4048,19,1774,1,
261,3565,1,262,4049,
19,1769,1,262,3565,
1,263,4050,19,1764,
1,263,3565,1,264,
4051,19,1759,1,264,
3565,1,265,4052,19,
1754,1,265,3565,1,
266,4053,19,1689,1,
266,3591,1,267,4054,
19,1735,1,267,3591,
1,268,4055,19,1683,
1,268,3591,1,269,
4056,19,1678,1,269,
3591,1,270,4057,19,
1673,1,270,3591,1,
271,4058,19,1668,1,
271,3591,1,272,4059,
19,1663,1,272,3591,
1,273,4060,19,1728,
1,273,3591,1,274,
4061,19,1657,1,274,
3591,1,275,4062,19,
1652,1,275,3591,1,
276,4063,19,1647,1,
276,3591,1,277,4064,
19,1642,1,277,3591,
1,278,4065,19,1637,
1,278,3591,1,279,
4066,19,1521,1,279,
3591,1,280,4067,19,
1721,1,280,3591,1,
281,4068,19,1631,1,
281,3591,1,282,4069,
19,1626,1,282,3591,
1,283,4070,19,1621,
1,283,3591,1,284,
4071,19,1616,1,284,
3591,1,285,4072,19,
1611,1,285,3591,1,
286,4073,19,1713,1,
286,3591,1,287,4074,
19,1708,1,287,3591,
1,288,4075,19,1703,
1,288,3591,1,289,
4076,19,1603,1,289,
3591,1,290,4077,19,
1598,1,290,3591,1,
291,4078,19,1593,1,
291,3591,1,292,4079,
19,1588,1,292,3591,
1,293,4080,19,1583,
1,293,3591,1,294,
4081,19,1578,1,294,
3591,1,295,4082,19,
1573,1,295,3591,1,
296,4083,19,1568,1,
296,3591,1,297,4084,
19,1563,1,297,3591,
1,298,4085,19,1746,
1,298,3591,1,299,
4086,19,4087,4,50,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,95,0,51,0,
1,299,3535,1,300,
4088,19,4089,4,28,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,51,0,1,300,
3775,1,301,4090,19,
4091,4,50,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,52,0,1,301,
3535,1,302,4092,19,
4093,4,24,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
51,0,1,302,3612,
1,303,4094,19,4095,
4,28,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,95,0,52,0,
1,303,3775,1,304,
4096,19,4097,4,50,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,95,0,53,0,
1,304,3535,2,0,0};
new Sfactory(this,"ExpressionArgument_1",new SCreator(ExpressionArgument_1_factory));
new Sfactory(this,"StatementList_1",new SCreator(StatementList_1_factory));
new Sfactory(this,"StateChange_1",new SCreator(StateChange_1_factory));
new Sfactory(this,"StateChange_2",new SCreator(StateChange_2_factory));
new Sfactory(this,"Declaration",new SCreator(Declaration_factory));
new Sfactory(this,"IdentExpression",new SCreator(IdentExpression_factory));
new Sfactory(this,"error",new SCreator(error_factory));
new Sfactory(this,"BinaryExpression_2",new SCreator(BinaryExpression_2_factory));
new Sfactory(this,"BinaryExpression_3",new SCreator(BinaryExpression_3_factory));
new Sfactory(this,"BinaryExpression_4",new SCreator(BinaryExpression_4_factory));
new Sfactory(this,"BinaryExpression_5",new SCreator(BinaryExpression_5_factory));
new Sfactory(this,"ReturnStatement_2",new SCreator(ReturnStatement_2_factory));
new Sfactory(this,"BinaryExpression_8",new SCreator(BinaryExpression_8_factory));
new Sfactory(this,"BinaryExpression_9",new SCreator(BinaryExpression_9_factory));
new Sfactory(this,"VectorConstant_1",new SCreator(VectorConstant_1_factory));
new Sfactory(this,"ParenthesisExpression",new SCreator(ParenthesisExpression_factory));
new Sfactory(this,"UnaryExpression",new SCreator(UnaryExpression_factory));
new Sfactory(this,"IdentDotExpression_1",new SCreator(IdentDotExpression_1_factory));
new Sfactory(this,"Typename",new SCreator(Typename_factory));
new Sfactory(this,"IfStatement_1",new SCreator(IfStatement_1_factory));
new Sfactory(this,"Assignment",new SCreator(Assignment_factory));
new Sfactory(this,"CompoundStatement_1",new SCreator(CompoundStatement_1_factory));
new Sfactory(this,"CompoundStatement_2",new SCreator(CompoundStatement_2_factory));
new Sfactory(this,"ReturnStatement_1",new SCreator(ReturnStatement_1_factory));
new Sfactory(this,"IdentDotExpression",new SCreator(IdentDotExpression_factory));
new Sfactory(this,"Argument",new SCreator(Argument_factory));
new Sfactory(this,"State_2",new SCreator(State_2_factory));
new Sfactory(this,"WhileStatement_1",new SCreator(WhileStatement_1_factory));
new Sfactory(this,"GlobalDefinitions_3",new SCreator(GlobalDefinitions_3_factory));
new Sfactory(this,"GlobalDefinitions_4",new SCreator(GlobalDefinitions_4_factory));
new Sfactory(this,"Event_1",new SCreator(Event_1_factory));
new Sfactory(this,"ListConstant",new SCreator(ListConstant_factory));
new Sfactory(this,"Event_3",new SCreator(Event_3_factory));
new Sfactory(this,"Event_4",new SCreator(Event_4_factory));
new Sfactory(this,"Event_6",new SCreator(Event_6_factory));
new Sfactory(this,"Assignment_10",new SCreator(Assignment_10_factory));
new Sfactory(this,"Assignment_11",new SCreator(Assignment_11_factory));
new Sfactory(this,"Assignment_12",new SCreator(Assignment_12_factory));
new Sfactory(this,"Assignment_13",new SCreator(Assignment_13_factory));
new Sfactory(this,"Assignment_14",new SCreator(Assignment_14_factory));
new Sfactory(this,"Assignment_15",new SCreator(Assignment_15_factory));
new Sfactory(this,"Typename_6",new SCreator(Typename_6_factory));
new Sfactory(this,"Typename_7",new SCreator(Typename_7_factory));
new Sfactory(this,"ArgumentDeclarationList",new SCreator(ArgumentDeclarationList_factory));
new Sfactory(this,"ConstantExpression",new SCreator(ConstantExpression_factory));
new Sfactory(this,"LSLProgramRoot_1",new SCreator(LSLProgramRoot_1_factory));
new Sfactory(this,"LSLProgramRoot_2",new SCreator(LSLProgramRoot_2_factory));
new Sfactory(this,"States_1",new SCreator(States_1_factory));
new Sfactory(this,"States_2",new SCreator(States_2_factory));
new Sfactory(this,"FunctionCallExpression_1",new SCreator(FunctionCallExpression_1_factory));
new Sfactory(this,"ForLoopStatement",new SCreator(ForLoopStatement_factory));
new Sfactory(this,"DoWhileStatement_1",new SCreator(DoWhileStatement_1_factory));
new Sfactory(this,"JumpLabel",new SCreator(JumpLabel_factory));
new Sfactory(this,"JumpStatement_1",new SCreator(JumpStatement_1_factory));
new Sfactory(this,"GlobalDefinitions",new SCreator(GlobalDefinitions_factory));
new Sfactory(this,"FunctionCall_1",new SCreator(FunctionCall_1_factory));
new Sfactory(this,"ArgumentList_3",new SCreator(ArgumentList_3_factory));
new Sfactory(this,"Assignment_2",new SCreator(Assignment_2_factory));
new Sfactory(this,"Assignment_4",new SCreator(Assignment_4_factory));
new Sfactory(this,"Assignment_6",new SCreator(Assignment_6_factory));
new Sfactory(this,"TypecastExpression_1",new SCreator(TypecastExpression_1_factory));
new Sfactory(this,"TypecastExpression_4",new SCreator(TypecastExpression_4_factory));
new Sfactory(this,"TypecastExpression_5",new SCreator(TypecastExpression_5_factory));
new Sfactory(this,"TypecastExpression_6",new SCreator(TypecastExpression_6_factory));
new Sfactory(this,"TypecastExpression_9",new SCreator(TypecastExpression_9_factory));
new Sfactory(this,"ArgumentDeclarationList_1",new SCreator(ArgumentDeclarationList_1_factory));
new Sfactory(this,"ArgumentDeclarationList_2",new SCreator(ArgumentDeclarationList_2_factory));
new Sfactory(this,"ArgumentDeclarationList_3",new SCreator(ArgumentDeclarationList_3_factory));
new Sfactory(this,"GlobalDefinitions_1",new SCreator(GlobalDefinitions_1_factory));
new Sfactory(this,"GlobalDefinitions_2",new SCreator(GlobalDefinitions_2_factory));
new Sfactory(this,"IncrementDecrementExpression",new SCreator(IncrementDecrementExpression_factory));
new Sfactory(this,"GlobalVariableDeclaration",new SCreator(GlobalVariableDeclaration_factory));
new Sfactory(this,"Typename_4",new SCreator(Typename_4_factory));
new Sfactory(this,"Event_11",new SCreator(Event_11_factory));
new Sfactory(this,"TypecastExpression_2",new SCreator(TypecastExpression_2_factory));
new Sfactory(this,"TypecastExpression_3",new SCreator(TypecastExpression_3_factory));
new Sfactory(this,"TypecastExpression_8",new SCreator(TypecastExpression_8_factory));
new Sfactory(this,"Constant_1",new SCreator(Constant_1_factory));
new Sfactory(this,"Expression",new SCreator(Expression_factory));
new Sfactory(this,"Constant_3",new SCreator(Constant_3_factory));
new Sfactory(this,"Constant_4",new SCreator(Constant_4_factory));
new Sfactory(this,"BinaryExpression_1",new SCreator(BinaryExpression_1_factory));
new Sfactory(this,"IfStatement_2",new SCreator(IfStatement_2_factory));
new Sfactory(this,"ReturnStatement",new SCreator(ReturnStatement_factory));
new Sfactory(this,"Event_2",new SCreator(Event_2_factory));
new Sfactory(this,"RotationConstant",new SCreator(RotationConstant_factory));
new Sfactory(this,"Statement_13",new SCreator(Statement_13_factory));
new Sfactory(this,"UnaryExpression_1",new SCreator(UnaryExpression_1_factory));
new Sfactory(this,"UnaryExpression_2",new SCreator(UnaryExpression_2_factory));
new Sfactory(this,"UnaryExpression_3",new SCreator(UnaryExpression_3_factory));
new Sfactory(this,"ArgumentList_1",new SCreator(ArgumentList_1_factory));
new Sfactory(this,"ArgumentList_2",new SCreator(ArgumentList_2_factory));
new Sfactory(this,"Constant",new SCreator(Constant_factory));
new Sfactory(this,"State",new SCreator(State_factory));
new Sfactory(this,"LSLProgramRoot",new SCreator(LSLProgramRoot_factory));
new Sfactory(this,"StateChange",new SCreator(StateChange_factory));
new Sfactory(this,"IncrementDecrementExpression_2",new SCreator(IncrementDecrementExpression_2_factory));
new Sfactory(this,"GlobalVariableDeclaration_1",new SCreator(GlobalVariableDeclaration_1_factory));
new Sfactory(this,"GlobalVariableDeclaration_2",new SCreator(GlobalVariableDeclaration_2_factory));
new Sfactory(this,"IncrementDecrementExpression_5",new SCreator(IncrementDecrementExpression_5_factory));
new Sfactory(this,"GlobalFunctionDefinition_2",new SCreator(GlobalFunctionDefinition_2_factory));
new Sfactory(this,"IncrementDecrementExpression_7",new SCreator(IncrementDecrementExpression_7_factory));
new Sfactory(this,"IncrementDecrementExpression_8",new SCreator(IncrementDecrementExpression_8_factory));
new Sfactory(this,"Assignment_1",new SCreator(Assignment_1_factory));
new Sfactory(this,"Assignment_3",new SCreator(Assignment_3_factory));
new Sfactory(this,"Assignment_5",new SCreator(Assignment_5_factory));
new Sfactory(this,"Assignment_7",new SCreator(Assignment_7_factory));
new Sfactory(this,"Assignment_8",new SCreator(Assignment_8_factory));
new Sfactory(this,"Assignment_9",new SCreator(Assignment_9_factory));
new Sfactory(this,"Event_22",new SCreator(Event_22_factory));
new Sfactory(this,"CompoundStatement",new SCreator(CompoundStatement_factory));
new Sfactory(this,"RotationConstant_1",new SCreator(RotationConstant_1_factory));
new Sfactory(this,"Event_13",new SCreator(Event_13_factory));
new Sfactory(this,"Statement_1",new SCreator(Statement_1_factory));
new Sfactory(this,"Statement_2",new SCreator(Statement_2_factory));
new Sfactory(this,"Statement_3",new SCreator(Statement_3_factory));
new Sfactory(this,"Statement_4",new SCreator(Statement_4_factory));
new Sfactory(this,"Statement_5",new SCreator(Statement_5_factory));
new Sfactory(this,"Statement_6",new SCreator(Statement_6_factory));
new Sfactory(this,"Statement_7",new SCreator(Statement_7_factory));
new Sfactory(this,"Statement_8",new SCreator(Statement_8_factory));
new Sfactory(this,"Statement_9",new SCreator(Statement_9_factory));
new Sfactory(this,"ExpressionArgument",new SCreator(ExpressionArgument_factory));
new Sfactory(this,"GlobalFunctionDefinition",new SCreator(GlobalFunctionDefinition_factory));
new Sfactory(this,"State_1",new SCreator(State_1_factory));
new Sfactory(this,"DoWhileStatement",new SCreator(DoWhileStatement_factory));
new Sfactory(this,"ParenthesisExpression_1",new SCreator(ParenthesisExpression_1_factory));
new Sfactory(this,"Event_5",new SCreator(Event_5_factory));
new Sfactory(this,"StateBody",new SCreator(StateBody_factory));
new Sfactory(this,"Event_7",new SCreator(Event_7_factory));
new Sfactory(this,"Event_8",new SCreator(Event_8_factory));
new Sfactory(this,"IncrementDecrementExpression_1",new SCreator(IncrementDecrementExpression_1_factory));
new Sfactory(this,"Typename_2",new SCreator(Typename_2_factory));
new Sfactory(this,"IncrementDecrementExpression_3",new SCreator(IncrementDecrementExpression_3_factory));
new Sfactory(this,"IncrementDecrementExpression_4",new SCreator(IncrementDecrementExpression_4_factory));
new Sfactory(this,"IncrementDecrementExpression_6",new SCreator(IncrementDecrementExpression_6_factory));
new Sfactory(this,"StateEvent",new SCreator(StateEvent_factory));
new Sfactory(this,"Event_20",new SCreator(Event_20_factory));
new Sfactory(this,"Event_24",new SCreator(Event_24_factory));
new Sfactory(this,"Event_26",new SCreator(Event_26_factory));
new Sfactory(this,"Event",new SCreator(Event_factory));
new Sfactory(this,"Statement_10",new SCreator(Statement_10_factory));
new Sfactory(this,"Statement_11",new SCreator(Statement_11_factory));
new Sfactory(this,"Statement_12",new SCreator(Statement_12_factory));
new Sfactory(this,"TypecastExpression",new SCreator(TypecastExpression_factory));
new Sfactory(this,"Event_15",new SCreator(Event_15_factory));
new Sfactory(this,"Event_16",new SCreator(Event_16_factory));
new Sfactory(this,"Event_31",new SCreator(Event_31_factory));
new Sfactory(this,"Event_32",new SCreator(Event_32_factory));
new Sfactory(this,"Event_33",new SCreator(Event_33_factory));
new Sfactory(this,"BinaryExpression",new SCreator(BinaryExpression_factory));
new Sfactory(this,"FunctionCallExpression",new SCreator(FunctionCallExpression_factory));
new Sfactory(this,"BinaryExpression_11",new SCreator(BinaryExpression_11_factory));
new Sfactory(this,"StateBody_1",new SCreator(StateBody_1_factory));
new Sfactory(this,"StatementList_2",new SCreator(StatementList_2_factory));
new Sfactory(this,"BinaryExpression_14",new SCreator(BinaryExpression_14_factory));
new Sfactory(this,"BinaryExpression_15",new SCreator(BinaryExpression_15_factory));
new Sfactory(this,"BinaryExpression_16",new SCreator(BinaryExpression_16_factory));
new Sfactory(this,"BinaryExpression_17",new SCreator(BinaryExpression_17_factory));
new Sfactory(this,"BinaryExpression_18",new SCreator(BinaryExpression_18_factory));
new Sfactory(this,"Event_25",new SCreator(Event_25_factory));
new Sfactory(this,"Event_9",new SCreator(Event_9_factory));
new Sfactory(this,"Statement",new SCreator(Statement_factory));
new Sfactory(this,"JumpStatement",new SCreator(JumpStatement_factory));
new Sfactory(this,"BinaryExpression_12",new SCreator(BinaryExpression_12_factory));
new Sfactory(this,"BinaryExpression_13",new SCreator(BinaryExpression_13_factory));
new Sfactory(this,"BinaryExpression_6",new SCreator(BinaryExpression_6_factory));
new Sfactory(this,"BinaryExpression_7",new SCreator(BinaryExpression_7_factory));
new Sfactory(this,"ArgumentList",new SCreator(ArgumentList_factory));
new Sfactory(this,"Event_10",new SCreator(Event_10_factory));
new Sfactory(this,"ConstantExpression_1",new SCreator(ConstantExpression_1_factory));
new Sfactory(this,"Event_12",new SCreator(Event_12_factory));
new Sfactory(this,"Event_14",new SCreator(Event_14_factory));
new Sfactory(this,"Event_17",new SCreator(Event_17_factory));
new Sfactory(this,"Event_18",new SCreator(Event_18_factory));
new Sfactory(this,"Event_19",new SCreator(Event_19_factory));
new Sfactory(this,"BinaryExpression_10",new SCreator(BinaryExpression_10_factory));
new Sfactory(this,"StateEvent_1",new SCreator(StateEvent_1_factory));
new Sfactory(this,"VectorConstant",new SCreator(VectorConstant_factory));
new Sfactory(this,"Event_21",new SCreator(Event_21_factory));
new Sfactory(this,"Event_23",new SCreator(Event_23_factory));
new Sfactory(this,"TypecastExpression_7",new SCreator(TypecastExpression_7_factory));
new Sfactory(this,"FunctionCall",new SCreator(FunctionCall_factory));
new Sfactory(this,"Event_27",new SCreator(Event_27_factory));
new Sfactory(this,"Event_28",new SCreator(Event_28_factory));
new Sfactory(this,"Event_29",new SCreator(Event_29_factory));
new Sfactory(this,"ListConstant_1",new SCreator(ListConstant_1_factory));
new Sfactory(this,"Declaration_1",new SCreator(Declaration_1_factory));
new Sfactory(this,"ForLoop",new SCreator(ForLoop_factory));
new Sfactory(this,"Event_30",new SCreator(Event_30_factory));
new Sfactory(this,"Typename_1",new SCreator(Typename_1_factory));
new Sfactory(this,"Typename_3",new SCreator(Typename_3_factory));
new Sfactory(this,"Typename_5",new SCreator(Typename_5_factory));
new Sfactory(this,"GlobalFunctionDefinition_1",new SCreator(GlobalFunctionDefinition_1_factory));
new Sfactory(this,"JumpLabel_1",new SCreator(JumpLabel_1_factory));
new Sfactory(this,"ArgumentList_4",new SCreator(ArgumentList_4_factory));
new Sfactory(this,"IfStatement",new SCreator(IfStatement_factory));
new Sfactory(this,"ForLoopStatement_1",new SCreator(ForLoopStatement_1_factory));
new Sfactory(this,"ForLoopStatement_2",new SCreator(ForLoopStatement_2_factory));
new Sfactory(this,"ForLoopStatement_3",new SCreator(ForLoopStatement_3_factory));
new Sfactory(this,"ForLoopStatement_4",new SCreator(ForLoopStatement_4_factory));
new Sfactory(this,"ArgumentDeclarationList_4",new SCreator(ArgumentDeclarationList_4_factory));
new Sfactory(this,"ArgumentDeclarationList_5",new SCreator(ArgumentDeclarationList_5_factory));
new Sfactory(this,"WhileStatement",new SCreator(WhileStatement_factory));
new Sfactory(this,"ForLoop_1",new SCreator(ForLoop_1_factory));
new Sfactory(this,"Constant_2",new SCreator(Constant_2_factory));
new Sfactory(this,"StatementList",new SCreator(StatementList_factory));
new Sfactory(this,"StateBody_2",new SCreator(StateBody_2_factory));
new Sfactory(this,"IdentExpression_1",new SCreator(IdentExpression_1_factory));
new Sfactory(this,"States",new SCreator(States_factory));
}
public static object ExpressionArgument_1_factory(Parser yyp) { return new ExpressionArgument_1(yyp); }
public static object StatementList_1_factory(Parser yyp) { return new StatementList_1(yyp); }
public static object StateChange_1_factory(Parser yyp) { return new StateChange_1(yyp); }
public static object StateChange_2_factory(Parser yyp) { return new StateChange_2(yyp); }
public static object Declaration_factory(Parser yyp) { return new Declaration(yyp); }
public static object IdentExpression_factory(Parser yyp) { return new IdentExpression(yyp); }
public static object error_factory(Parser yyp) { return new error(yyp); }
public static object BinaryExpression_2_factory(Parser yyp) { return new BinaryExpression_2(yyp); }
public static object BinaryExpression_3_factory(Parser yyp) { return new BinaryExpression_3(yyp); }
public static object BinaryExpression_4_factory(Parser yyp) { return new BinaryExpression_4(yyp); }
public static object BinaryExpression_5_factory(Parser yyp) { return new BinaryExpression_5(yyp); }
public static object ReturnStatement_2_factory(Parser yyp) { return new ReturnStatement_2(yyp); }
public static object BinaryExpression_8_factory(Parser yyp) { return new BinaryExpression_8(yyp); }
public static object BinaryExpression_9_factory(Parser yyp) { return new BinaryExpression_9(yyp); }
public static object VectorConstant_1_factory(Parser yyp) { return new VectorConstant_1(yyp); }
public static object ParenthesisExpression_factory(Parser yyp) { return new ParenthesisExpression(yyp); }
public static object UnaryExpression_factory(Parser yyp) { return new UnaryExpression(yyp); }
public static object IdentDotExpression_1_factory(Parser yyp) { return new IdentDotExpression_1(yyp); }
public static object Typename_factory(Parser yyp) { return new Typename(yyp); }
public static object IfStatement_1_factory(Parser yyp) { return new IfStatement_1(yyp); }
public static object Assignment_factory(Parser yyp) { return new Assignment(yyp); }
public static object CompoundStatement_1_factory(Parser yyp) { return new CompoundStatement_1(yyp); }
public static object CompoundStatement_2_factory(Parser yyp) { return new CompoundStatement_2(yyp); }
public static object ReturnStatement_1_factory(Parser yyp) { return new ReturnStatement_1(yyp); }
public static object IdentDotExpression_factory(Parser yyp) { return new IdentDotExpression(yyp); }
public static object Argument_factory(Parser yyp) { return new Argument(yyp); }
public static object State_2_factory(Parser yyp) { return new State_2(yyp); }
public static object WhileStatement_1_factory(Parser yyp) { return new WhileStatement_1(yyp); }
public static object GlobalDefinitions_3_factory(Parser yyp) { return new GlobalDefinitions_3(yyp); }
public static object GlobalDefinitions_4_factory(Parser yyp) { return new GlobalDefinitions_4(yyp); }
public static object Event_1_factory(Parser yyp) { return new Event_1(yyp); }
public static object ListConstant_factory(Parser yyp) { return new ListConstant(yyp); }
public static object Event_3_factory(Parser yyp) { return new Event_3(yyp); }
public static object Event_4_factory(Parser yyp) { return new Event_4(yyp); }
public static object Event_6_factory(Parser yyp) { return new Event_6(yyp); }
public static object Assignment_10_factory(Parser yyp) { return new Assignment_10(yyp); }
public static object Assignment_11_factory(Parser yyp) { return new Assignment_11(yyp); }
public static object Assignment_12_factory(Parser yyp) { return new Assignment_12(yyp); }
public static object Assignment_13_factory(Parser yyp) { return new Assignment_13(yyp); }
public static object Assignment_14_factory(Parser yyp) { return new Assignment_14(yyp); }
public static object Assignment_15_factory(Parser yyp) { return new Assignment_15(yyp); }
public static object Typename_6_factory(Parser yyp) { return new Typename_6(yyp); }
public static object Typename_7_factory(Parser yyp) { return new Typename_7(yyp); }
public static object ArgumentDeclarationList_factory(Parser yyp) { return new ArgumentDeclarationList(yyp); }
public static object ConstantExpression_factory(Parser yyp) { return new ConstantExpression(yyp); }
public static object LSLProgramRoot_1_factory(Parser yyp) { return new LSLProgramRoot_1(yyp); }
public static object LSLProgramRoot_2_factory(Parser yyp) { return new LSLProgramRoot_2(yyp); }
public static object States_1_factory(Parser yyp) { return new States_1(yyp); }
public static object States_2_factory(Parser yyp) { return new States_2(yyp); }
public static object FunctionCallExpression_1_factory(Parser yyp) { return new FunctionCallExpression_1(yyp); }
public static object ForLoopStatement_factory(Parser yyp) { return new ForLoopStatement(yyp); }
public static object DoWhileStatement_1_factory(Parser yyp) { return new DoWhileStatement_1(yyp); }
public static object JumpLabel_factory(Parser yyp) { return new JumpLabel(yyp); }
public static object JumpStatement_1_factory(Parser yyp) { return new JumpStatement_1(yyp); }
public static object GlobalDefinitions_factory(Parser yyp) { return new GlobalDefinitions(yyp); }
public static object FunctionCall_1_factory(Parser yyp) { return new FunctionCall_1(yyp); }
public static object ArgumentList_3_factory(Parser yyp) { return new ArgumentList_3(yyp); }
public static object Assignment_2_factory(Parser yyp) { return new Assignment_2(yyp); }
public static object Assignment_4_factory(Parser yyp) { return new Assignment_4(yyp); }
public static object Assignment_6_factory(Parser yyp) { return new Assignment_6(yyp); }
public static object TypecastExpression_1_factory(Parser yyp) { return new TypecastExpression_1(yyp); }
public static object TypecastExpression_4_factory(Parser yyp) { return new TypecastExpression_4(yyp); }
public static object TypecastExpression_5_factory(Parser yyp) { return new TypecastExpression_5(yyp); }
public static object TypecastExpression_6_factory(Parser yyp) { return new TypecastExpression_6(yyp); }
public static object TypecastExpression_9_factory(Parser yyp) { return new TypecastExpression_9(yyp); }
public static object ArgumentDeclarationList_1_factory(Parser yyp) { return new ArgumentDeclarationList_1(yyp); }
public static object ArgumentDeclarationList_2_factory(Parser yyp) { return new ArgumentDeclarationList_2(yyp); }
public static object ArgumentDeclarationList_3_factory(Parser yyp) { return new ArgumentDeclarationList_3(yyp); }
public static object GlobalDefinitions_1_factory(Parser yyp) { return new GlobalDefinitions_1(yyp); }
public static object GlobalDefinitions_2_factory(Parser yyp) { return new GlobalDefinitions_2(yyp); }
public static object IncrementDecrementExpression_factory(Parser yyp) { return new IncrementDecrementExpression(yyp); }
public static object GlobalVariableDeclaration_factory(Parser yyp) { return new GlobalVariableDeclaration(yyp); }
public static object Typename_4_factory(Parser yyp) { return new Typename_4(yyp); }
public static object Event_11_factory(Parser yyp) { return new Event_11(yyp); }
public static object TypecastExpression_2_factory(Parser yyp) { return new TypecastExpression_2(yyp); }
public static object TypecastExpression_3_factory(Parser yyp) { return new TypecastExpression_3(yyp); }
public static object TypecastExpression_8_factory(Parser yyp) { return new TypecastExpression_8(yyp); }
public static object Constant_1_factory(Parser yyp) { return new Constant_1(yyp); }
public static object Expression_factory(Parser yyp) { return new Expression(yyp); }
public static object Constant_3_factory(Parser yyp) { return new Constant_3(yyp); }
public static object Constant_4_factory(Parser yyp) { return new Constant_4(yyp); }
public static object BinaryExpression_1_factory(Parser yyp) { return new BinaryExpression_1(yyp); }
public static object IfStatement_2_factory(Parser yyp) { return new IfStatement_2(yyp); }
public static object ReturnStatement_factory(Parser yyp) { return new ReturnStatement(yyp); }
public static object Event_2_factory(Parser yyp) { return new Event_2(yyp); }
public static object RotationConstant_factory(Parser yyp) { return new RotationConstant(yyp); }
public static object Statement_13_factory(Parser yyp) { return new Statement_13(yyp); }
public static object UnaryExpression_1_factory(Parser yyp) { return new UnaryExpression_1(yyp); }
public static object UnaryExpression_2_factory(Parser yyp) { return new UnaryExpression_2(yyp); }
public static object UnaryExpression_3_factory(Parser yyp) { return new UnaryExpression_3(yyp); }
public static object ArgumentList_1_factory(Parser yyp) { return new ArgumentList_1(yyp); }
public static object ArgumentList_2_factory(Parser yyp) { return new ArgumentList_2(yyp); }
public static object Constant_factory(Parser yyp) { return new Constant(yyp); }
public static object State_factory(Parser yyp) { return new State(yyp); }
public static object LSLProgramRoot_factory(Parser yyp) { return new LSLProgramRoot(yyp); }
public static object StateChange_factory(Parser yyp) { return new StateChange(yyp); }
public static object IncrementDecrementExpression_2_factory(Parser yyp) { return new IncrementDecrementExpression_2(yyp); }
public static object GlobalVariableDeclaration_1_factory(Parser yyp) { return new GlobalVariableDeclaration_1(yyp); }
public static object GlobalVariableDeclaration_2_factory(Parser yyp) { return new GlobalVariableDeclaration_2(yyp); }
public static object IncrementDecrementExpression_5_factory(Parser yyp) { return new IncrementDecrementExpression_5(yyp); }
public static object GlobalFunctionDefinition_2_factory(Parser yyp) { return new GlobalFunctionDefinition_2(yyp); }
public static object IncrementDecrementExpression_7_factory(Parser yyp) { return new IncrementDecrementExpression_7(yyp); }
public static object IncrementDecrementExpression_8_factory(Parser yyp) { return new IncrementDecrementExpression_8(yyp); }
public static object Assignment_1_factory(Parser yyp) { return new Assignment_1(yyp); }
public static object Assignment_3_factory(Parser yyp) { return new Assignment_3(yyp); }
public static object Assignment_5_factory(Parser yyp) { return new Assignment_5(yyp); }
public static object Assignment_7_factory(Parser yyp) { return new Assignment_7(yyp); }
public static object Assignment_8_factory(Parser yyp) { return new Assignment_8(yyp); }
public static object Assignment_9_factory(Parser yyp) { return new Assignment_9(yyp); }
public static object Event_22_factory(Parser yyp) { return new Event_22(yyp); }
public static object CompoundStatement_factory(Parser yyp) { return new CompoundStatement(yyp); }
public static object RotationConstant_1_factory(Parser yyp) { return new RotationConstant_1(yyp); }
public static object Event_13_factory(Parser yyp) { return new Event_13(yyp); }
public static object Statement_1_factory(Parser yyp) { return new Statement_1(yyp); }
public static object Statement_2_factory(Parser yyp) { return new Statement_2(yyp); }
public static object Statement_3_factory(Parser yyp) { return new Statement_3(yyp); }
public static object Statement_4_factory(Parser yyp) { return new Statement_4(yyp); }
public static object Statement_5_factory(Parser yyp) { return new Statement_5(yyp); }
public static object Statement_6_factory(Parser yyp) { return new Statement_6(yyp); }
public static object Statement_7_factory(Parser yyp) { return new Statement_7(yyp); }
public static object Statement_8_factory(Parser yyp) { return new Statement_8(yyp); }
public static object Statement_9_factory(Parser yyp) { return new Statement_9(yyp); }
public static object ExpressionArgument_factory(Parser yyp) { return new ExpressionArgument(yyp); }
public static object GlobalFunctionDefinition_factory(Parser yyp) { return new GlobalFunctionDefinition(yyp); }
public static object State_1_factory(Parser yyp) { return new State_1(yyp); }
public static object DoWhileStatement_factory(Parser yyp) { return new DoWhileStatement(yyp); }
public static object ParenthesisExpression_1_factory(Parser yyp) { return new ParenthesisExpression_1(yyp); }
public static object Event_5_factory(Parser yyp) { return new Event_5(yyp); }
public static object StateBody_factory(Parser yyp) { return new StateBody(yyp); }
public static object Event_7_factory(Parser yyp) { return new Event_7(yyp); }
public static object Event_8_factory(Parser yyp) { return new Event_8(yyp); }
public static object IncrementDecrementExpression_1_factory(Parser yyp) { return new IncrementDecrementExpression_1(yyp); }
public static object Typename_2_factory(Parser yyp) { return new Typename_2(yyp); }
public static object IncrementDecrementExpression_3_factory(Parser yyp) { return new IncrementDecrementExpression_3(yyp); }
public static object IncrementDecrementExpression_4_factory(Parser yyp) { return new IncrementDecrementExpression_4(yyp); }
public static object IncrementDecrementExpression_6_factory(Parser yyp) { return new IncrementDecrementExpression_6(yyp); }
public static object StateEvent_factory(Parser yyp) { return new StateEvent(yyp); }
public static object Event_20_factory(Parser yyp) { return new Event_20(yyp); }
public static object Event_24_factory(Parser yyp) { return new Event_24(yyp); }
public static object Event_26_factory(Parser yyp) { return new Event_26(yyp); }
public static object Event_factory(Parser yyp) { return new Event(yyp); }
public static object Statement_10_factory(Parser yyp) { return new Statement_10(yyp); }
public static object Statement_11_factory(Parser yyp) { return new Statement_11(yyp); }
public static object Statement_12_factory(Parser yyp) { return new Statement_12(yyp); }
public static object TypecastExpression_factory(Parser yyp) { return new TypecastExpression(yyp); }
public static object Event_15_factory(Parser yyp) { return new Event_15(yyp); }
public static object Event_16_factory(Parser yyp) { return new Event_16(yyp); }
public static object Event_31_factory(Parser yyp) { return new Event_31(yyp); }
public static object Event_32_factory(Parser yyp) { return new Event_32(yyp); }
public static object Event_33_factory(Parser yyp) { return new Event_33(yyp); }
public static object BinaryExpression_factory(Parser yyp) { return new BinaryExpression(yyp); }
public static object FunctionCallExpression_factory(Parser yyp) { return new FunctionCallExpression(yyp); }
public static object BinaryExpression_11_factory(Parser yyp) { return new BinaryExpression_11(yyp); }
public static object StateBody_1_factory(Parser yyp) { return new StateBody_1(yyp); }
public static object StatementList_2_factory(Parser yyp) { return new StatementList_2(yyp); }
public static object BinaryExpression_14_factory(Parser yyp) { return new BinaryExpression_14(yyp); }
public static object BinaryExpression_15_factory(Parser yyp) { return new BinaryExpression_15(yyp); }
public static object BinaryExpression_16_factory(Parser yyp) { return new BinaryExpression_16(yyp); }
public static object BinaryExpression_17_factory(Parser yyp) { return new BinaryExpression_17(yyp); }
public static object BinaryExpression_18_factory(Parser yyp) { return new BinaryExpression_18(yyp); }
public static object Event_25_factory(Parser yyp) { return new Event_25(yyp); }
public static object Event_9_factory(Parser yyp) { return new Event_9(yyp); }
public static object Statement_factory(Parser yyp) { return new Statement(yyp); }
public static object JumpStatement_factory(Parser yyp) { return new JumpStatement(yyp); }
public static object BinaryExpression_12_factory(Parser yyp) { return new BinaryExpression_12(yyp); }
public static object BinaryExpression_13_factory(Parser yyp) { return new BinaryExpression_13(yyp); }
public static object BinaryExpression_6_factory(Parser yyp) { return new BinaryExpression_6(yyp); }
public static object BinaryExpression_7_factory(Parser yyp) { return new BinaryExpression_7(yyp); }
public static object ArgumentList_factory(Parser yyp) { return new ArgumentList(yyp); }
public static object Event_10_factory(Parser yyp) { return new Event_10(yyp); }
public static object ConstantExpression_1_factory(Parser yyp) { return new ConstantExpression_1(yyp); }
public static object Event_12_factory(Parser yyp) { return new Event_12(yyp); }
public static object Event_14_factory(Parser yyp) { return new Event_14(yyp); }
public static object Event_17_factory(Parser yyp) { return new Event_17(yyp); }
public static object Event_18_factory(Parser yyp) { return new Event_18(yyp); }
public static object Event_19_factory(Parser yyp) { return new Event_19(yyp); }
public static object BinaryExpression_10_factory(Parser yyp) { return new BinaryExpression_10(yyp); }
public static object StateEvent_1_factory(Parser yyp) { return new StateEvent_1(yyp); }
public static object VectorConstant_factory(Parser yyp) { return new VectorConstant(yyp); }
public static object Event_21_factory(Parser yyp) { return new Event_21(yyp); }
public static object Event_23_factory(Parser yyp) { return new Event_23(yyp); }
public static object TypecastExpression_7_factory(Parser yyp) { return new TypecastExpression_7(yyp); }
public static object FunctionCall_factory(Parser yyp) { return new FunctionCall(yyp); }
public static object Event_27_factory(Parser yyp) { return new Event_27(yyp); }
public static object Event_28_factory(Parser yyp) { return new Event_28(yyp); }
public static object Event_29_factory(Parser yyp) { return new Event_29(yyp); }
public static object ListConstant_1_factory(Parser yyp) { return new ListConstant_1(yyp); }
public static object Declaration_1_factory(Parser yyp) { return new Declaration_1(yyp); }
public static object ForLoop_factory(Parser yyp) { return new ForLoop(yyp); }
public static object Event_30_factory(Parser yyp) { return new Event_30(yyp); }
public static object Typename_1_factory(Parser yyp) { return new Typename_1(yyp); }
public static object Typename_3_factory(Parser yyp) { return new Typename_3(yyp); }
public static object Typename_5_factory(Parser yyp) { return new Typename_5(yyp); }
public static object GlobalFunctionDefinition_1_factory(Parser yyp) { return new GlobalFunctionDefinition_1(yyp); }
public static object JumpLabel_1_factory(Parser yyp) { return new JumpLabel_1(yyp); }
public static object ArgumentList_4_factory(Parser yyp) { return new ArgumentList_4(yyp); }
public static object IfStatement_factory(Parser yyp) { return new IfStatement(yyp); }
public static object ForLoopStatement_1_factory(Parser yyp) { return new ForLoopStatement_1(yyp); }
public static object ForLoopStatement_2_factory(Parser yyp) { return new ForLoopStatement_2(yyp); }
public static object ForLoopStatement_3_factory(Parser yyp) { return new ForLoopStatement_3(yyp); }
public static object ForLoopStatement_4_factory(Parser yyp) { return new ForLoopStatement_4(yyp); }
public static object ArgumentDeclarationList_4_factory(Parser yyp) { return new ArgumentDeclarationList_4(yyp); }
public static object ArgumentDeclarationList_5_factory(Parser yyp) { return new ArgumentDeclarationList_5(yyp); }
public static object WhileStatement_factory(Parser yyp) { return new WhileStatement(yyp); }
public static object ForLoop_1_factory(Parser yyp) { return new ForLoop_1(yyp); }
public static object Constant_2_factory(Parser yyp) { return new Constant_2(yyp); }
public static object StatementList_factory(Parser yyp) { return new StatementList(yyp); }
public static object StateBody_2_factory(Parser yyp) { return new StateBody_2(yyp); }
public static object IdentExpression_1_factory(Parser yyp) { return new IdentExpression_1(yyp); }
public static object States_factory(Parser yyp) { return new States(yyp); }
}
public class LSLSyntax
: Parser {
public LSLSyntax
():base(new yyLSLSyntax
(),new LSLTokens()) {}
public LSLSyntax
(YyParser syms):base(syms,new LSLTokens()) {}
public LSLSyntax
(YyParser syms,ErrorHandler erh):base(syms,new LSLTokens(erh)) {}

 }
}
