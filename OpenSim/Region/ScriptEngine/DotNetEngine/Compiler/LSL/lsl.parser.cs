/*
 * Copyright (c) Contributors, http://opensimulator.org/
 * See CONTRIBUTORS.TXT for a full list of copyright holders.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the OpenSim Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;using Tools;
namespace OpenSim.Region.ScriptEngine.DotNetEngine.Compiler.LSL {
//%+LSLProgramRoot+95
public class LSLProgramRoot : SYMBOL{
 public  LSLProgramRoot (Parser yyp, States  s ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}
 public  LSLProgramRoot (Parser yyp, GlobalDefinitions  gd , States  s ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
}

public override string yyname { get { return "LSLProgramRoot"; }}
public override int yynum { get { return 95; }}
public LSLProgramRoot(Parser yyp):base(yyp){}}
//%+GlobalDefinitions+96
public class GlobalDefinitions : SYMBOL{
 public  GlobalDefinitions (Parser yyp, GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalVariableDeclaration  gvd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gvd );
}
 public  GlobalDefinitions (Parser yyp, GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ kids . Add ( gfd );
}
 public  GlobalDefinitions (Parser yyp, GlobalDefinitions  gd , GlobalFunctionDefinition  gfd ):base(((LSLSyntax
)yyp)){ while (0< gd . kids . Count ) kids . Add ( gd . kids . Pop ());
 kids . Add ( gfd );
}

public override string yyname { get { return "GlobalDefinitions"; }}
public override int yynum { get { return 96; }}
public GlobalDefinitions(Parser yyp):base(yyp){}}
//%+GlobalVariableDeclaration+97
public class GlobalVariableDeclaration : SYMBOL{
 public  GlobalVariableDeclaration (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  GlobalVariableDeclaration (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}

public override string yyname { get { return "GlobalVariableDeclaration"; }}
public override int yynum { get { return 97; }}
public GlobalVariableDeclaration(Parser yyp):base(yyp){}}
//%+GlobalFunctionDefinition+98
public class GlobalFunctionDefinition : SYMBOL{
 private  string  m_returnType ;
 private  string  m_name ;
 public  GlobalFunctionDefinition (Parser yyp, string  returnType , string  name , ArgumentDeclarationList  adl , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_returnType = returnType ;
 m_name = name ;
 kids . Add ( adl );
 kids . Add ( cs );
}
 public  string  ReturnType { get { return  m_returnType ;
}
 set { m_returnType = value ;
}
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "GlobalFunctionDefinition"; }}
public override int yynum { get { return 98; }}
public GlobalFunctionDefinition(Parser yyp):base(yyp){}}
//%+States+99
public class States : SYMBOL{
 public  States (Parser yyp, State  ds ):base(((LSLSyntax
)yyp)){ kids . Add ( ds );
}
 public  States (Parser yyp, States  s , State  us ):base(((LSLSyntax
)yyp)){ while (0< s . kids . Count ) kids . Add ( s . kids . Pop ());
 kids . Add ( us );
}

public override string yyname { get { return "States"; }}
public override int yynum { get { return 99; }}
public States(Parser yyp):base(yyp){}}
//%+State+100
public class State : SYMBOL{
 private  string  m_name ;
 public  State (Parser yyp, string  name , StateBody  sb ):base(((LSLSyntax
)yyp)){ m_name = name ;
 while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
}
 public  override  string  ToString (){ return "STATE<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "State"; }}
public override int yynum { get { return 100; }}
public State(Parser yyp):base(yyp){}}
//%+StateBody+101
public class StateBody : SYMBOL{
 public  StateBody (Parser yyp, StateBody  sb , StateEvent  se ):base(((LSLSyntax
)yyp)){ while (0< sb . kids . Count ) kids . Add ( sb . kids . Pop ());
 kids . Add ( se );
}
 public  StateBody (Parser yyp, StateEvent  se ):base(((LSLSyntax
)yyp)){ kids . Add ( se );
}

public override string yyname { get { return "StateBody"; }}
public override int yynum { get { return 101; }}
public StateBody(Parser yyp):base(yyp){}}
//%+StateEvent+102
public class StateEvent : SYMBOL{
 private  string  m_name ;
 public  StateEvent (Parser yyp, string  name , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 kids . Add ( cs );
}
 public  StateEvent (Parser yyp, string  name , ArgumentDeclarationList  dal , CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ m_name = name ;
 if (0< dal . kids . Count ) kids . Add ( dal );
 kids . Add ( cs );
}
 public  override  string  ToString (){ return "EVENT<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "StateEvent"; }}
public override int yynum { get { return 102; }}
public StateEvent(Parser yyp):base(yyp){}}
//%+ArgumentDeclarationList+103
public class ArgumentDeclarationList : SYMBOL{
 public  ArgumentDeclarationList (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  ArgumentDeclarationList (Parser yyp, ArgumentDeclarationList  adl , Declaration  d ):base(((LSLSyntax
)yyp)){ while (0< adl . kids . Count ) kids . Add ( adl . kids . Pop ());
 kids . Add ( d );
}

public override string yyname { get { return "ArgumentDeclarationList"; }}
public override int yynum { get { return 103; }}
public ArgumentDeclarationList(Parser yyp):base(yyp){}}
//%+Declaration+104
public class Declaration : SYMBOL{
 private  string  m_datatype ;
 private  string  m_id ;
 public  Declaration (Parser yyp, string  type , string  id ):base(((LSLSyntax
)yyp)){ m_datatype = type ;
 m_id = id ;
}
 public  override  string  ToString (){ return "Declaration<"+ m_datatype +":"+ m_id +">";
}
 public  string  Datatype { get { return  m_datatype ;
}
 set { m_datatype = value ;
}
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "Declaration"; }}
public override int yynum { get { return 104; }}
public Declaration(Parser yyp):base(yyp){}}
//%+Typename+105
public class Typename : SYMBOL{
 public  string  yytext ;
 public  Typename (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Typename"; }}
public override int yynum { get { return 105; }}
public Typename(Parser yyp):base(yyp){}}
//%+Event+106
public class Event : SYMBOL{
 public  string  yytext ;
 public  Event (Parser yyp, string  text ):base(((LSLSyntax
)yyp)){ yytext = text ;
}

public override string yyname { get { return "Event"; }}
public override int yynum { get { return 106; }}
public Event(Parser yyp):base(yyp){}}
//%+CompoundStatement+107
public class CompoundStatement : SYMBOL{
 public  CompoundStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  CompoundStatement (Parser yyp, StatementList  sl ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
}

public override string yyname { get { return "CompoundStatement"; }}
public override int yynum { get { return 107; }}
}
//%+StatementList+108
public class StatementList : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if ( s . kids . Top  is  IfStatement || s . kids . Top  is  WhileStatement || s . kids . Top  is  DoWhileStatement || s . kids . Top  is  ForLoop ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  StatementList (Parser yyp, Statement  s ):base(((LSLSyntax
)yyp)){ AddStatement ( s );
}
 public  StatementList (Parser yyp, StatementList  sl , Statement  s ):base(((LSLSyntax
)yyp)){ while (0< sl . kids . Count ) kids . Add ( sl . kids . Pop ());
 AddStatement ( s );
}

public override string yyname { get { return "StatementList"; }}
public override int yynum { get { return 108; }}
public StatementList(Parser yyp):base(yyp){}}
//%+Statement+109
public class Statement : SYMBOL{
 public  Statement (Parser yyp, Declaration  d ):base(((LSLSyntax
)yyp)){ kids . Add ( d );
}
 public  Statement (Parser yyp, CompoundStatement  cs ):base(((LSLSyntax
)yyp)){ kids . Add ( cs );
}
 public  Statement (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}
 public  Statement (Parser yyp, Assignment  a ):base(((LSLSyntax
)yyp)){ kids . Add ( a );
}
 public  Statement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  Statement (Parser yyp, ReturnStatement  rs ):base(((LSLSyntax
)yyp)){ kids . Add ( rs );
}
 public  Statement (Parser yyp, StateChange  sc ):base(((LSLSyntax
)yyp)){ kids . Add ( sc );
}
 public  Statement (Parser yyp, IfStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, WhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, DoWhileStatement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( ifs );
}
 public  Statement (Parser yyp, ForLoop  fl ):base(((LSLSyntax
)yyp)){ kids . Add ( fl );
}
 public  Statement (Parser yyp, JumpLabel  jl ):base(((LSLSyntax
)yyp)){ kids . Add ( jl );
}
 public  Statement (Parser yyp, JumpStatement  js ):base(((LSLSyntax
)yyp)){ kids . Add ( js );
}

public override string yyname { get { return "Statement"; }}
public override int yynum { get { return 109; }}
public Statement(Parser yyp):base(yyp){}}
//%+Assignment+110
public class Assignment : SYMBOL{
 protected  string  m_assignmentType ;
 public  Assignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}
 public  Assignment (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ m_assignmentType = sa . AssignmentType ;
 while (0< sa . kids . Count ) kids . Add ( sa . kids . Pop ());
}
 public  string  AssignmentType { get { return  m_assignmentType ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_assignmentType +">";
}

public override string yyname { get { return "Assignment"; }}
public override int yynum { get { return 110; }}
public Assignment(Parser yyp):base(yyp){}}
//%+SimpleAssignment+111
public class SimpleAssignment : Assignment{
 public  SimpleAssignment (Parser yyp, SYMBOL  lhs , SYMBOL  rhs , string  assignmentType ):base(((LSLSyntax
)yyp)){ m_assignmentType = assignmentType ;
 kids . Add ( lhs );
 if ( rhs  is  ConstantExpression ) while (0< rhs . kids . Count ) kids . Add ( rhs . kids . Pop ());
 else  kids . Add ( rhs );
}

public override string yyname { get { return "SimpleAssignment"; }}
public override int yynum { get { return 111; }}
public SimpleAssignment(Parser yyp):base(yyp){}}
//%+ReturnStatement+112
public class ReturnStatement : SYMBOL{
 public  ReturnStatement (Parser yyp):base(((LSLSyntax
)yyp)){}
 public  ReturnStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ReturnStatement"; }}
public override int yynum { get { return 112; }}
}
//%+JumpLabel+113
public class JumpLabel : SYMBOL{
 private  string  m_labelName ;
 public  JumpLabel (Parser yyp, string  labelName ):base(((LSLSyntax
)yyp)){ m_labelName = labelName ;
}
 public  string  LabelName { get { return  m_labelName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_labelName +">";
}

public override string yyname { get { return "JumpLabel"; }}
public override int yynum { get { return 113; }}
public JumpLabel(Parser yyp):base(yyp){}}
//%+JumpStatement+114
public class JumpStatement : SYMBOL{
 private  string  m_targetName ;
 public  JumpStatement (Parser yyp, string  targetName ):base(((LSLSyntax
)yyp)){ m_targetName = targetName ;
}
 public  string  TargetName { get { return  m_targetName ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_targetName +">";
}

public override string yyname { get { return "JumpStatement"; }}
public override int yynum { get { return 114; }}
public JumpStatement(Parser yyp):base(yyp){}}
//%+StateChange+115
public class StateChange : SYMBOL{
 private  string  m_newState ;
 public  StateChange (Parser yyp, string  newState ):base(((LSLSyntax
)yyp)){ m_newState = newState ;
}
 public  string  NewState { get { return  m_newState ;
}
}

public override string yyname { get { return "StateChange"; }}
public override int yynum { get { return 115; }}
public StateChange(Parser yyp):base(yyp){}}
//%+IfStatement+116
public class IfStatement : SYMBOL{
 private  void  AddStatement ( Statement  s ){ if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
}
 public  IfStatement (Parser yyp, SYMBOL  s , Statement  ifs , Statement  es ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 AddStatement ( ifs );
 if (0< es . kids . Count && es . kids . Top  is  IfStatement ) kids . Add ( es . kids . Pop ());
 else  AddStatement ( es );
}

public override string yyname { get { return "IfStatement"; }}
public override int yynum { get { return 116; }}
public IfStatement(Parser yyp):base(yyp){}}
//%+WhileStatement+117
public class WhileStatement : SYMBOL{
 public  WhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ kids . Add ( s );
 if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
}

public override string yyname { get { return "WhileStatement"; }}
public override int yynum { get { return 117; }}
public WhileStatement(Parser yyp):base(yyp){}}
//%+DoWhileStatement+118
public class DoWhileStatement : SYMBOL{
 public  DoWhileStatement (Parser yyp, SYMBOL  s , Statement  st ):base(((LSLSyntax
)yyp)){ if (0< st . kids . Count && st . kids . Top  is  CompoundStatement ) kids . Add ( st . kids . Pop ());
 else  kids . Add ( st );
 kids . Add ( s );
}

public override string yyname { get { return "DoWhileStatement"; }}
public override int yynum { get { return 118; }}
public DoWhileStatement(Parser yyp):base(yyp){}}
//%+ForLoop+119
public class ForLoop : SYMBOL{
 public  ForLoop (Parser yyp, ForLoopStatement  flsa , Expression  e , ForLoopStatement  flsb , Statement  s ):base(((LSLSyntax
)yyp)){ kids . Add ( flsa );
 kids . Add ( e );
 kids . Add ( flsb );
 if (0< s . kids . Count && s . kids . Top  is  CompoundStatement ) kids . Add ( s . kids . Pop ());
 else  kids . Add ( s );
}

public override string yyname { get { return "ForLoop"; }}
public override int yynum { get { return 119; }}
public ForLoop(Parser yyp):base(yyp){}}
//%+ForLoopStatement+120
public class ForLoopStatement : SYMBOL{
 public  ForLoopStatement (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ kids . Add ( sa );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , Expression  e ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( e );
}
 public  ForLoopStatement (Parser yyp, ForLoopStatement  fls , SimpleAssignment  sa ):base(((LSLSyntax
)yyp)){ while (0< fls . kids . Count ) kids . Add ( fls . kids . Pop ());
 kids . Add ( sa );
}

public override string yyname { get { return "ForLoopStatement"; }}
public override int yynum { get { return 120; }}
public ForLoopStatement(Parser yyp):base(yyp){}}
//%+FunctionCall+121
public class FunctionCall : SYMBOL{
 private  string  m_id ;
 public  FunctionCall (Parser yyp, string  id , ArgumentList  al ):base(((LSLSyntax
)yyp)){ m_id = id ;
 kids . Add ( al );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_id +">";
}
 public  string  Id { get { return  m_id ;
}
}

public override string yyname { get { return "FunctionCall"; }}
public override int yynum { get { return 121; }}
public FunctionCall(Parser yyp):base(yyp){}}
//%+ArgumentList+122
public class ArgumentList : SYMBOL{
 public  ArgumentList (Parser yyp, Argument  a ):base(((LSLSyntax
)yyp)){ AddArgument ( a );
}
 public  ArgumentList (Parser yyp, ArgumentList  al , Argument  a ):base(((LSLSyntax
)yyp)){ while (0< al . kids . Count ) kids . Add ( al . kids . Pop ());
 AddArgument ( a );
}
 private  void  AddArgument ( Argument  a ){ if ( a  is  ExpressionArgument ) while (0< a . kids . Count ) kids . Add ( a . kids . Pop ());
 else  kids . Add ( a );
}

public override string yyname { get { return "ArgumentList"; }}
public override int yynum { get { return 122; }}
public ArgumentList(Parser yyp):base(yyp){}}
//%+Argument+123
public class Argument : SYMBOL{
public override string yyname { get { return "Argument"; }}
public override int yynum { get { return 123; }}
public Argument(Parser yyp):base(yyp){}}
//%+ExpressionArgument+124
public class ExpressionArgument : Argument{
 public  ExpressionArgument (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "ExpressionArgument"; }}
public override int yynum { get { return 124; }}
public ExpressionArgument(Parser yyp):base(yyp){}}
//%+Constant+125
public class Constant : SYMBOL{
 private  string  m_type ;
 private  string  m_val ;
 public  Constant (Parser yyp, string  type , string  val ):base(((LSLSyntax
)yyp)){ m_type = type ;
 m_val = val ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_type +":"+ m_val +">";
}
 public  string  Value { get { return  m_val ;
}
 set { m_val = value ;
}
}
 public  string  Type { get { return  m_type ;
}
 set { m_type = value ;
}
}

public override string yyname { get { return "Constant"; }}
public override int yynum { get { return 125; }}
public Constant(Parser yyp):base(yyp){}}
//%+VectorConstant+126
public class VectorConstant : Constant{
 public  VectorConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ ):base(((LSLSyntax
)yyp),"vector", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
}

public override string yyname { get { return "VectorConstant"; }}
public override int yynum { get { return 126; }}
public VectorConstant(Parser yyp):base(yyp){}}
//%+RotationConstant+127
public class RotationConstant : Constant{
 public  RotationConstant (Parser yyp, Expression  valX , Expression  valY , Expression  valZ , Expression  valS ):base(((LSLSyntax
)yyp),"rotation", null ){ kids . Add ( valX );
 kids . Add ( valY );
 kids . Add ( valZ );
 kids . Add ( valS );
}

public override string yyname { get { return "RotationConstant"; }}
public override int yynum { get { return 127; }}
public RotationConstant(Parser yyp):base(yyp){}}
//%+ListConstant+128
public class ListConstant : Constant{
 public  ListConstant (Parser yyp, ArgumentList  al ):base(((LSLSyntax
)yyp),"list", null ){ kids . Add ( al );
}

public override string yyname { get { return "ListConstant"; }}
public override int yynum { get { return 128; }}
public ListConstant(Parser yyp):base(yyp){}}
//%+Expression+129
public class Expression : SYMBOL{
 protected  void  AddExpression ( Expression  e ){ if ( e  is  ConstantExpression ) while (0< e . kids . Count ) kids . Add ( e . kids . Pop ());
 else  kids . Add ( e );
}

public override string yyname { get { return "Expression"; }}
public override int yynum { get { return 129; }}
public Expression(Parser yyp):base(yyp){}}
//%+ConstantExpression+130
public class ConstantExpression : Expression{
 public  ConstantExpression (Parser yyp, Constant  c ):base(((LSLSyntax
)yyp)){ kids . Add ( c );
}

public override string yyname { get { return "ConstantExpression"; }}
public override int yynum { get { return 130; }}
public ConstantExpression(Parser yyp):base(yyp){}}
//%+IdentExpression+131
public class IdentExpression : Expression{
 protected  string  m_name ;
 public  IdentExpression (Parser yyp, string  name ):base(((LSLSyntax
)yyp)){ m_name = name ;
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_name +">";
}
 public  string  Name { get { return  m_name ;
}
}

public override string yyname { get { return "IdentExpression"; }}
public override int yynum { get { return 131; }}
public IdentExpression(Parser yyp):base(yyp){}}
//%+IdentDotExpression+132
public class IdentDotExpression : IdentExpression{
 private  string  m_member ;
 public  IdentDotExpression (Parser yyp, string  name , string  member ):base(((LSLSyntax
)yyp), name ){ m_member = member ;
}
 public  override  string  ToString (){ string  baseToString = base . ToString ();
 return  baseToString . Substring (0, baseToString . Length -1)+"."+ m_member +">";
}
 public  string  Member { get { return  m_member ;
}
}

public override string yyname { get { return "IdentDotExpression"; }}
public override int yynum { get { return 132; }}
public IdentDotExpression(Parser yyp):base(yyp){}}
//%+FunctionCallExpression+133
public class FunctionCallExpression : Expression{
 public  FunctionCallExpression (Parser yyp, FunctionCall  fc ):base(((LSLSyntax
)yyp)){ kids . Add ( fc );
}

public override string yyname { get { return "FunctionCallExpression"; }}
public override int yynum { get { return 133; }}
public FunctionCallExpression(Parser yyp):base(yyp){}}
//%+BinaryExpression+134
public class BinaryExpression : Expression{
 private  string  m_expressionSymbol ;
 public  BinaryExpression (Parser yyp, Expression  lhs , Expression  rhs , string  expressionSymbol ):base(((LSLSyntax
)yyp)){ m_expressionSymbol = expressionSymbol ;
 AddExpression ( lhs );
 AddExpression ( rhs );
}
 public  string  ExpressionSymbol { get { return  m_expressionSymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_expressionSymbol +">";
}

public override string yyname { get { return "BinaryExpression"; }}
public override int yynum { get { return 134; }}
public BinaryExpression(Parser yyp):base(yyp){}}
//%+UnaryExpression+135
public class UnaryExpression : Expression{
 private  string  m_unarySymbol ;
 public  UnaryExpression (Parser yyp, string  unarySymbol , Expression  e ):base(((LSLSyntax
)yyp)){ m_unarySymbol = unarySymbol ;
 AddExpression ( e );
}
 public  string  UnarySymbol { get { return  m_unarySymbol ;
}
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+ m_unarySymbol +">";
}

public override string yyname { get { return "UnaryExpression"; }}
public override int yynum { get { return 135; }}
public UnaryExpression(Parser yyp):base(yyp){}}
//%+TypecastExpression+136
public class TypecastExpression : Expression{
 private  string  m_typecastType ;
 public  TypecastExpression (Parser yyp, string  typecastType , SYMBOL  rhs ):base(((LSLSyntax
)yyp)){ m_typecastType = typecastType ;
 kids . Add ( rhs );
}
 public  string  TypecastType { get { return  m_typecastType ;
}
 set { m_typecastType = value ;
}
}

public override string yyname { get { return "TypecastExpression"; }}
public override int yynum { get { return 136; }}
public TypecastExpression(Parser yyp):base(yyp){}}
//%+ParenthesisExpression+137
public class ParenthesisExpression : Expression{
 public  ParenthesisExpression (Parser yyp, Expression  e ):base(((LSLSyntax
)yyp)){ kids . Add ( e );
}

public override string yyname { get { return "ParenthesisExpression"; }}
public override int yynum { get { return 137; }}
public ParenthesisExpression(Parser yyp):base(yyp){}}
//%+IncrementDecrementExpression+138
public class IncrementDecrementExpression : Expression{
 private  string  m_name ;
 private  string  m_operation ;
 private  bool  m_postOperation ;
 public  IncrementDecrementExpression (Parser yyp, string  name , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_name = name ;
 m_operation = operation ;
 m_postOperation = postOperation ;
}
 public  IncrementDecrementExpression (Parser yyp, IdentDotExpression  ide , string  operation , bool  postOperation ):base(((LSLSyntax
)yyp)){ m_operation = operation ;
 m_postOperation = postOperation ;
 kids . Add ( ide );
}
 public  override  string  ToString (){ return  base . ToString ()+"<"+( m_postOperation ? m_name + m_operation : m_operation + m_name )+">";
}
 public  string  Name { get { return  m_name ;
}
}
 public  string  Operation { get { return  m_operation ;
}
}
 public  bool  PostOperation { get { return  m_postOperation ;
}
}

public override string yyname { get { return "IncrementDecrementExpression"; }}
public override int yynum { get { return 138; }}
public IncrementDecrementExpression(Parser yyp):base(yyp){}}

public class LSLProgramRoot_1 : LSLProgramRoot {
  public LSLProgramRoot_1(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((States)(yyq.StackAt(0).m_value))
	){}}

public class LSLProgramRoot_2 : LSLProgramRoot {
  public LSLProgramRoot_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_1 : GlobalDefinitions {
  public GlobalDefinitions_1(Parser yyq):base(yyq,
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_2 : GlobalDefinitions {
  public GlobalDefinitions_2(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalVariableDeclaration)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_3 : GlobalDefinitions {
  public GlobalDefinitions_3(Parser yyq):base(yyq,
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalDefinitions_4 : GlobalDefinitions {
  public GlobalDefinitions_4(Parser yyq):base(yyq,
	((GlobalDefinitions)(yyq.StackAt(1).m_value))
	, 
	((GlobalFunctionDefinition)(yyq.StackAt(0).m_value))
	){}}

public class GlobalVariableDeclaration_1 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class GlobalVariableDeclaration_2 : GlobalVariableDeclaration {
  public GlobalVariableDeclaration_2(Parser yyq):base(yyq,new Assignment(((LSLSyntax
)yyq), 
	((Declaration)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	, 
	((EQUALS)(yyq.StackAt(2).m_value))
	.yytext)){}}

public class GlobalFunctionDefinition_1 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_1(Parser yyq):base(yyq,"void", 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class GlobalFunctionDefinition_2 : GlobalFunctionDefinition {
  public GlobalFunctionDefinition_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class States_1 : States {
  public States_1(Parser yyq):base(yyq,
	((State)(yyq.StackAt(0).m_value))
	){}}

public class States_2 : States {
  public States_2(Parser yyq):base(yyq,
	((States)(yyq.StackAt(1).m_value))
	, 
	((State)(yyq.StackAt(0).m_value))
	){}}

public class State_1 : State {
  public State_1(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class State_2 : State {
  public State_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((StateBody)(yyq.StackAt(1).m_value))
	){}}

public class StateBody_1 : StateBody {
  public StateBody_1(Parser yyq):base(yyq,
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateBody_2 : StateBody {
  public StateBody_2(Parser yyq):base(yyq,
	((StateBody)(yyq.StackAt(1).m_value))
	, 
	((StateEvent)(yyq.StackAt(0).m_value))
	){}}

public class StateEvent_1 : StateEvent {
  public StateEvent_1(Parser yyq):base(yyq,
	((Event)(yyq.StackAt(4).m_value))
	.yytext, 
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_1 : ArgumentDeclarationList {
  public ArgumentDeclarationList_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentDeclarationList_2 : ArgumentDeclarationList {
  public ArgumentDeclarationList_2(Parser yyq):base(yyq,
	((ArgumentDeclarationList)(yyq.StackAt(2).m_value))
	, 
	((Declaration)(yyq.StackAt(0).m_value))
	){}}

public class Declaration_1 : Declaration {
  public Declaration_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(1).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class CompoundStatement_1 : CompoundStatement {
  public CompoundStatement_1(Parser yyq):base(yyq){}}

public class CompoundStatement_2 : CompoundStatement {
  public CompoundStatement_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	){}}

public class StatementList_1 : StatementList {
  public StatementList_1(Parser yyq):base(yyq,
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class StatementList_2 : StatementList {
  public StatementList_2(Parser yyq):base(yyq,
	((StatementList)(yyq.StackAt(1).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_1 : Statement {
  public Statement_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(1).m_value))
	){}}

public class Statement_2 : Statement {
  public Statement_2(Parser yyq):base(yyq,
	((Assignment)(yyq.StackAt(1).m_value))
	){}}

public class Statement_3 : Statement {
  public Statement_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class Statement_4 : Statement {
  public Statement_4(Parser yyq):base(yyq,
	((ReturnStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_5 : Statement {
  public Statement_5(Parser yyq):base(yyq,
	((JumpLabel)(yyq.StackAt(1).m_value))
	){}}

public class Statement_6 : Statement {
  public Statement_6(Parser yyq):base(yyq,
	((JumpStatement)(yyq.StackAt(1).m_value))
	){}}

public class Statement_7 : Statement {
  public Statement_7(Parser yyq):base(yyq,
	((StateChange)(yyq.StackAt(1).m_value))
	){}}

public class Statement_8 : Statement {
  public Statement_8(Parser yyq):base(yyq,
	((IfStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_9 : Statement {
  public Statement_9(Parser yyq):base(yyq,
	((WhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_10 : Statement {
  public Statement_10(Parser yyq):base(yyq,
	((DoWhileStatement)(yyq.StackAt(0).m_value))
	){}}

public class Statement_11 : Statement {
  public Statement_11(Parser yyq):base(yyq,
	((ForLoop)(yyq.StackAt(0).m_value))
	){}}

public class Statement_12 : Statement {
  public Statement_12(Parser yyq):base(yyq,
	((CompoundStatement)(yyq.StackAt(0).m_value))
	){}}

public class JumpLabel_1 : JumpLabel {
  public JumpLabel_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class JumpStatement_1 : JumpStatement {
  public JumpStatement_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_1 : StateChange {
  public StateChange_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class StateChange_2 : StateChange {
  public StateChange_2(Parser yyq):base(yyq,
	((DEFAULT_STATE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IfStatement_1 : IfStatement {
  public IfStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_2 : IfStatement {
  public IfStatement_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_3 : IfStatement {
  public IfStatement_3(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class IfStatement_4 : IfStatement {
  public IfStatement_4(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(4).m_value))
	, 
	((Statement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_1 : WhileStatement {
  public WhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class WhileStatement_2 : WhileStatement {
  public WhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class DoWhileStatement_1 : DoWhileStatement {
  public DoWhileStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class DoWhileStatement_2 : DoWhileStatement {
  public DoWhileStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(5).m_value))
	){}}

public class ForLoop_1 : ForLoop {
  public ForLoop_1(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(6).m_value))
	, 
	((Expression)(yyq.StackAt(4).m_value))
	, 
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Statement)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_1 : ForLoopStatement {
  public ForLoopStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_2 : ForLoopStatement {
  public ForLoopStatement_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_3 : ForLoopStatement {
  public ForLoopStatement_3(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ForLoopStatement_4 : ForLoopStatement {
  public ForLoopStatement_4(Parser yyq):base(yyq,
	((ForLoopStatement)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class Assignment_1 : Assignment {
  public Assignment_1(Parser yyq):base(yyq,
	((Declaration)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class Assignment_2 : Assignment {
  public Assignment_2(Parser yyq):base(yyq,
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	){}}

public class SimpleAssignment_1 : SimpleAssignment {
  public SimpleAssignment_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_2 : SimpleAssignment {
  public SimpleAssignment_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_3 : SimpleAssignment {
  public SimpleAssignment_3(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_4 : SimpleAssignment {
  public SimpleAssignment_4(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_5 : SimpleAssignment {
  public SimpleAssignment_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_6 : SimpleAssignment {
  public SimpleAssignment_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_7 : SimpleAssignment {
  public SimpleAssignment_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_8 : SimpleAssignment {
  public SimpleAssignment_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_9 : SimpleAssignment {
  public SimpleAssignment_9(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_10 : SimpleAssignment {
  public SimpleAssignment_10(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_11 : SimpleAssignment {
  public SimpleAssignment_11(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_12 : SimpleAssignment {
  public SimpleAssignment_12(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_13 : SimpleAssignment {
  public SimpleAssignment_13(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_14 : SimpleAssignment {
  public SimpleAssignment_14(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_15 : SimpleAssignment {
  public SimpleAssignment_15(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_16 : SimpleAssignment {
  public SimpleAssignment_16(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_17 : SimpleAssignment {
  public SimpleAssignment_17(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_18 : SimpleAssignment {
  public SimpleAssignment_18(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	, 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_19 : SimpleAssignment {
  public SimpleAssignment_19(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_20 : SimpleAssignment {
  public SimpleAssignment_20(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PLUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_21 : SimpleAssignment {
  public SimpleAssignment_21(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((MINUS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_22 : SimpleAssignment {
  public SimpleAssignment_22(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((STAR_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_23 : SimpleAssignment {
  public SimpleAssignment_23(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((SLASH_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class SimpleAssignment_24 : SimpleAssignment {
  public SimpleAssignment_24(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(4).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext), 
	((SimpleAssignment)(yyq.StackAt(0).m_value))
	, 
	((PERCENT_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class ReturnStatement_1 : ReturnStatement {
  public ReturnStatement_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ReturnStatement_2 : ReturnStatement {
  public ReturnStatement_2(Parser yyq):base(yyq){}}

public class Constant_1 : Constant {
  public Constant_1(Parser yyq):base(yyq,"integer", 
	((INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_2 : Constant {
  public Constant_2(Parser yyq):base(yyq,"integer", 
	((HEX_INTEGER_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_3 : Constant {
  public Constant_3(Parser yyq):base(yyq,"float", 
	((FLOAT_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Constant_4 : Constant {
  public Constant_4(Parser yyq):base(yyq,"string", 
	((STRING_CONSTANT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class ListConstant_1 : ListConstant {
  public ListConstant_1(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class VectorConstant_1 : VectorConstant {
  public VectorConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class RotationConstant_1 : RotationConstant {
  public RotationConstant_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(7).m_value))
	, 
	((Expression)(yyq.StackAt(5).m_value))
	, 
	((Expression)(yyq.StackAt(3).m_value))
	, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class ConstantExpression_1 : ConstantExpression {
  public ConstantExpression_1(Parser yyq):base(yyq,
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class IdentExpression_1 : IdentExpression {
  public IdentExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IdentDotExpression_1 : IdentDotExpression {
  public IdentDotExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class IncrementDecrementExpression_1 : IncrementDecrementExpression {
  public IncrementDecrementExpression_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_2 : IncrementDecrementExpression {
  public IncrementDecrementExpression_2(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_3 : IncrementDecrementExpression {
  public IncrementDecrementExpression_3(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_4 : IncrementDecrementExpression {
  public IncrementDecrementExpression_4(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true){}}

public class IncrementDecrementExpression_5 : IncrementDecrementExpression {
  public IncrementDecrementExpression_5(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_6 : IncrementDecrementExpression {
  public IncrementDecrementExpression_6(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(1).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_7 : IncrementDecrementExpression {
  public IncrementDecrementExpression_7(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class IncrementDecrementExpression_8 : IncrementDecrementExpression {
  public IncrementDecrementExpression_8(Parser yyq):base(yyq,new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(3).m_value))
	.yytext, false){}}

public class FunctionCallExpression_1 : FunctionCallExpression {
  public FunctionCallExpression_1(Parser yyq):base(yyq,
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class BinaryExpression_1 : BinaryExpression {
  public BinaryExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PLUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_2 : BinaryExpression {
  public BinaryExpression_2(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_3 : BinaryExpression {
  public BinaryExpression_3(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STAR)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_4 : BinaryExpression {
  public BinaryExpression_4(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((SLASH)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_5 : BinaryExpression {
  public BinaryExpression_5(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((PERCENT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_6 : BinaryExpression {
  public BinaryExpression_6(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_7 : BinaryExpression {
  public BinaryExpression_7(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_8 : BinaryExpression {
  public BinaryExpression_8(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((CARET)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_9 : BinaryExpression {
  public BinaryExpression_9(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_10 : BinaryExpression {
  public BinaryExpression_10(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_ANGLE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_11 : BinaryExpression {
  public BinaryExpression_11(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EQUALS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_12 : BinaryExpression {
  public BinaryExpression_12(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((EXCLAMATION_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_13 : BinaryExpression {
  public BinaryExpression_13(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LESS_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_14 : BinaryExpression {
  public BinaryExpression_14(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((GREATER_EQUALS)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_15 : BinaryExpression {
  public BinaryExpression_15(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((AMP_AMP)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_16 : BinaryExpression {
  public BinaryExpression_16(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((STROKE_STROKE)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_17 : BinaryExpression {
  public BinaryExpression_17(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((LEFT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class BinaryExpression_18 : BinaryExpression {
  public BinaryExpression_18(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(2).m_value))
	, 
	((Expression)(yyq.StackAt(0).m_value))
	, 
	((RIGHT_SHIFT)(yyq.StackAt(1).m_value))
	.yytext){}}

public class UnaryExpression_1 : UnaryExpression {
  public UnaryExpression_1(Parser yyq):base(yyq,
	((EXCLAMATION)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_2 : UnaryExpression {
  public UnaryExpression_2(Parser yyq):base(yyq,
	((MINUS)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class UnaryExpression_3 : UnaryExpression {
  public UnaryExpression_3(Parser yyq):base(yyq,
	((TILDE)(yyq.StackAt(1).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class ParenthesisExpression_1 : ParenthesisExpression {
  public ParenthesisExpression_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class TypecastExpression_1 : TypecastExpression {
  public TypecastExpression_1(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((Constant)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_2 : TypecastExpression {
  public TypecastExpression_2(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, new IdentExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_3 : TypecastExpression {
  public TypecastExpression_3(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(2).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(0).m_value))
	.yytext)){}}

public class TypecastExpression_4 : TypecastExpression {
  public TypecastExpression_4(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_5 : TypecastExpression {
  public TypecastExpression_5(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((INCREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_6 : TypecastExpression {
  public TypecastExpression_6(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(3).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext, 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_7 : TypecastExpression {
  public TypecastExpression_7(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(5).m_value))
	.yytext, new IncrementDecrementExpression(((LSLSyntax
)yyq), new IdentDotExpression(((LSLSyntax
)yyq), 
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((IDENT)(yyq.StackAt(1).m_value))
	.yytext), 
	((DECREMENT)(yyq.StackAt(0).m_value))
	.yytext, true)){}}

public class TypecastExpression_8 : TypecastExpression {
  public TypecastExpression_8(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(2).m_value))
	.yytext, 
	((FunctionCall)(yyq.StackAt(0).m_value))
	){}}

public class TypecastExpression_9 : TypecastExpression {
  public TypecastExpression_9(Parser yyq):base(yyq,
	((Typename)(yyq.StackAt(4).m_value))
	.yytext, 
	((Expression)(yyq.StackAt(1).m_value))
	){}}

public class FunctionCall_1 : FunctionCall {
  public FunctionCall_1(Parser yyq):base(yyq,
	((IDENT)(yyq.StackAt(3).m_value))
	.yytext, 
	((ArgumentList)(yyq.StackAt(1).m_value))
	){}}

public class ArgumentList_1 : ArgumentList {
  public ArgumentList_1(Parser yyq):base(yyq,
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ArgumentList_2 : ArgumentList {
  public ArgumentList_2(Parser yyq):base(yyq,
	((ArgumentList)(yyq.StackAt(2).m_value))
	, 
	((Argument)(yyq.StackAt(0).m_value))
	){}}

public class ExpressionArgument_1 : ExpressionArgument {
  public ExpressionArgument_1(Parser yyq):base(yyq,
	((Expression)(yyq.StackAt(0).m_value))
	){}}

public class Typename_1 : Typename {
  public Typename_1(Parser yyq):base(yyq,
	((INTEGER_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_2 : Typename {
  public Typename_2(Parser yyq):base(yyq,
	((FLOAT_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_3 : Typename {
  public Typename_3(Parser yyq):base(yyq,
	((STRING_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_4 : Typename {
  public Typename_4(Parser yyq):base(yyq,
	((KEY_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_5 : Typename {
  public Typename_5(Parser yyq):base(yyq,
	((VECTOR_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_6 : Typename {
  public Typename_6(Parser yyq):base(yyq,
	((ROTATION_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Typename_7 : Typename {
  public Typename_7(Parser yyq):base(yyq,
	((LIST_TYPE)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_1 : Event {
  public Event_1(Parser yyq):base(yyq,
	((AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_2 : Event {
  public Event_2(Parser yyq):base(yyq,
	((AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_3 : Event {
  public Event_3(Parser yyq):base(yyq,
	((ATTACH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_4 : Event {
  public Event_4(Parser yyq):base(yyq,
	((CHANGED_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_5 : Event {
  public Event_5(Parser yyq):base(yyq,
	((COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_6 : Event {
  public Event_6(Parser yyq):base(yyq,
	((COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_7 : Event {
  public Event_7(Parser yyq):base(yyq,
	((COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_8 : Event {
  public Event_8(Parser yyq):base(yyq,
	((CONTROL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_9 : Event {
  public Event_9(Parser yyq):base(yyq,
	((DATASERVER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_10 : Event {
  public Event_10(Parser yyq):base(yyq,
	((EMAIL_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_11 : Event {
  public Event_11(Parser yyq):base(yyq,
	((HTTP_RESPONSE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_12 : Event {
  public Event_12(Parser yyq):base(yyq,
	((LAND_COLLISION_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_13 : Event {
  public Event_13(Parser yyq):base(yyq,
	((LAND_COLLISION_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_14 : Event {
  public Event_14(Parser yyq):base(yyq,
	((LAND_COLLISION_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_15 : Event {
  public Event_15(Parser yyq):base(yyq,
	((LINK_MESSAGE_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_16 : Event {
  public Event_16(Parser yyq):base(yyq,
	((LISTEN_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_17 : Event {
  public Event_17(Parser yyq):base(yyq,
	((MONEY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_18 : Event {
  public Event_18(Parser yyq):base(yyq,
	((MOVING_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_19 : Event {
  public Event_19(Parser yyq):base(yyq,
	((MOVING_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_20 : Event {
  public Event_20(Parser yyq):base(yyq,
	((NO_SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_21 : Event {
  public Event_21(Parser yyq):base(yyq,
	((NOT_AT_ROT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_22 : Event {
  public Event_22(Parser yyq):base(yyq,
	((NOT_AT_TARGET_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_23 : Event {
  public Event_23(Parser yyq):base(yyq,
	((OBJECT_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_24 : Event {
  public Event_24(Parser yyq):base(yyq,
	((ON_REZ_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_25 : Event {
  public Event_25(Parser yyq):base(yyq,
	((REMOTE_DATA_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_26 : Event {
  public Event_26(Parser yyq):base(yyq,
	((RUN_TIME_PERMISSIONS_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_27 : Event {
  public Event_27(Parser yyq):base(yyq,
	((SENSOR_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_28 : Event {
  public Event_28(Parser yyq):base(yyq,
	((STATE_ENTRY_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_29 : Event {
  public Event_29(Parser yyq):base(yyq,
	((STATE_EXIT_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_30 : Event {
  public Event_30(Parser yyq):base(yyq,
	((TIMER_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_31 : Event {
  public Event_31(Parser yyq):base(yyq,
	((TOUCH_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_32 : Event {
  public Event_32(Parser yyq):base(yyq,
	((TOUCH_END_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}

public class Event_33 : Event {
  public Event_33(Parser yyq):base(yyq,
	((TOUCH_START_EVENT)(yyq.StackAt(0).m_value))
	.yytext){}}
public class yyLSLSyntax
: YyParser {
  public override object Action(Parser yyq,SYMBOL yysym, int yyact) {
    switch(yyact) {
	 case -1: break; //// keep compiler happy
}  return null; }

public class ArgumentDeclarationList_3 : ArgumentDeclarationList {
  public ArgumentDeclarationList_3(Parser yyq):base(yyq){}}

public class ArgumentList_3 : ArgumentList {
  public ArgumentList_3(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_4 : ArgumentDeclarationList {
  public ArgumentDeclarationList_4(Parser yyq):base(yyq){}}

public class ArgumentDeclarationList_5 : ArgumentDeclarationList {
  public ArgumentDeclarationList_5(Parser yyq):base(yyq){}}

public class Statement_13 : Statement {
  public Statement_13(Parser yyq):base(yyq){}}

public class ArgumentList_4 : ArgumentList {
  public ArgumentList_4(Parser yyq):base(yyq){}}
public yyLSLSyntax
():base() { arr = new int[] { 
101,4,6,52,0,
46,0,53,0,102,
20,103,4,28,76,
0,83,0,76,0,
80,0,114,0,111,
0,103,0,114,0,
97,0,109,0,82,
0,111,0,111,0,
116,0,1,95,1,
2,104,18,1,2607,
102,2,0,105,5,
310,1,0,106,18,
1,0,0,2,0,
1,1,107,18,1,
1,108,20,109,4,
18,76,0,73,0,
83,0,84,0,95,
0,84,0,89,0,
80,0,69,0,1,
57,1,1,2,0,
1,2,110,18,1,
2,111,20,112,4,
26,82,0,79,0,
84,0,65,0,84,
0,73,0,79,0,
78,0,95,0,84,
0,89,0,80,0,
69,0,1,56,1,
1,2,0,1,3,
113,18,1,3,114,
20,115,4,22,86,
0,69,0,67,0,
84,0,79,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,55,1,1,
2,0,1,4,116,
18,1,4,117,20,
118,4,16,75,0,
69,0,89,0,95,
0,84,0,89,0,
80,0,69,0,1,
54,1,1,2,0,
1,5,119,18,1,
5,120,20,121,4,
22,83,0,84,0,
82,0,73,0,78,
0,71,0,95,0,
84,0,89,0,80,
0,69,0,1,53,
1,1,2,0,1,
6,122,18,1,6,
123,20,124,4,20,
70,0,76,0,79,
0,65,0,84,0,
95,0,84,0,89,
0,80,0,69,0,
1,52,1,1,2,
0,1,7,125,18,
1,7,126,20,127,
4,24,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,84,0,
89,0,80,0,69,
0,1,51,1,1,
2,0,1,8,128,
18,1,8,129,20,
130,4,16,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
105,1,2,2,0,
1,9,131,18,1,
9,132,20,133,4,
10,73,0,68,0,
69,0,78,0,84,
0,1,91,1,1,
2,0,1,10,134,
18,1,10,135,20,
136,4,20,76,0,
69,0,70,0,84,
0,95,0,80,0,
65,0,82,0,69,
0,78,0,1,16,
1,1,2,0,1,
18,137,18,1,18,
129,2,0,1,19,
138,18,1,19,132,
2,0,1,20,139,
18,1,20,140,20,
141,4,46,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,1,
103,1,2,2,0,
1,21,142,18,1,
21,143,20,144,4,
10,67,0,79,0,
77,0,77,0,65,
0,1,14,1,1,
2,0,1,1693,145,
18,1,1693,143,2,
0,1,1699,146,18,
1,1699,147,20,148,
4,20,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,129,1,
2,2,0,1,30,
149,18,1,30,150,
20,151,4,22,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,1,104,1,2,
2,0,1,31,152,
18,1,31,153,20,
154,4,22,82,0,
73,0,71,0,72,
0,84,0,95,0,
80,0,65,0,82,
0,69,0,78,0,
1,17,1,1,2,
0,1,32,155,18,
1,32,156,20,157,
4,20,76,0,69,
0,70,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
69,0,1,12,1,
1,2,0,1,1150,
158,18,1,1150,159,
20,160,4,32,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,1,111,1,2,
2,0,1,1115,161,
18,1,1115,162,20,
163,4,28,80,0,
69,0,82,0,67,
0,69,0,78,0,
84,0,95,0,69,
0,81,0,85,0,
65,0,76,0,83,
0,1,10,1,1,
2,0,1,40,164,
18,1,40,132,2,
0,1,41,165,18,
1,41,135,2,0,
1,42,166,18,1,
42,147,2,0,1,
43,167,18,1,43,
168,20,169,4,22,
82,0,73,0,71,
0,72,0,84,0,
95,0,83,0,72,
0,73,0,70,0,
84,0,1,41,1,
1,2,0,1,44,
170,18,1,44,132,
2,0,1,46,171,
18,1,46,172,20,
173,4,12,80,0,
69,0,82,0,73,
0,79,0,68,0,
1,24,1,1,2,
0,1,47,174,18,
1,47,132,2,0,
1,48,175,18,1,
48,176,20,177,4,
18,68,0,69,0,
67,0,82,0,69,
0,77,0,69,0,
78,0,84,0,1,
5,1,1,2,0,
1,49,178,18,1,
49,179,20,180,4,
18,73,0,78,0,
67,0,82,0,69,
0,77,0,69,0,
78,0,84,0,1,
4,1,1,2,0,
1,50,181,18,1,
50,176,2,0,1,
51,182,18,1,51,
179,2,0,1,52,
183,18,1,52,135,
2,0,1,1728,184,
18,1,1728,159,2,
0,1,1729,185,18,
1,1729,186,20,187,
4,18,83,0,69,
0,77,0,73,0,
67,0,79,0,76,
0,79,0,78,0,
1,11,1,1,2,
0,1,61,188,18,
1,61,129,2,0,
1,62,189,18,1,
62,153,2,0,1,
63,190,18,1,63,
132,2,0,1,1735,
191,18,1,1735,147,
2,0,1,65,192,
18,1,65,172,2,
0,1,66,193,18,
1,66,132,2,0,
1,67,194,18,1,
67,176,2,0,1,
68,195,18,1,68,
179,2,0,1,69,
196,18,1,69,176,
2,0,1,70,197,
18,1,70,179,2,
0,1,71,198,18,
1,71,135,2,0,
1,1186,199,18,1,
1186,159,2,0,1,
73,200,18,1,73,
147,2,0,1,74,
201,18,1,74,153,
2,0,1,1692,202,
18,1,1692,203,20,
204,4,32,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,120,1,2,2,
0,1,76,205,18,
1,76,206,20,207,
4,20,76,0,69,
0,70,0,84,0,
95,0,83,0,72,
0,73,0,70,0,
84,0,1,40,1,
1,2,0,1,1193,
208,18,1,1193,147,
2,0,1,1121,209,
18,1,1121,147,2,
0,1,82,210,18,
1,82,147,2,0,
1,1754,211,18,1,
1754,186,2,0,1,
2545,212,18,1,2545,
213,20,214,4,34,
67,0,111,0,109,
0,112,0,111,0,
117,0,110,0,100,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
107,1,2,2,0,
1,85,215,18,1,
85,216,20,217,4,
26,83,0,84,0,
82,0,79,0,75,
0,69,0,95,0,
83,0,84,0,82,
0,79,0,75,0,
69,0,1,39,1,
1,2,0,1,79,
218,18,1,79,219,
20,220,4,10,84,
0,73,0,76,0,
68,0,69,0,1,
36,1,1,2,0,
1,89,221,18,1,
89,222,20,223,4,
10,77,0,73,0,
78,0,85,0,83,
0,1,19,1,1,
2,0,1,93,224,
18,1,93,147,2,
0,1,97,225,18,
1,97,226,20,227,
4,14,65,0,77,
0,80,0,95,0,
65,0,77,0,80,
0,1,38,1,1,
2,0,1,1771,228,
18,1,1771,203,2,
0,1,102,229,18,
1,102,230,20,231,
4,22,69,0,88,
0,67,0,76,0,
65,0,77,0,65,
0,84,0,73,0,
79,0,78,0,1,
37,1,1,2,0,
1,107,232,18,1,
107,147,2,0,1,
1222,233,18,1,1222,
159,2,0,1,1223,
234,18,1,1223,235,
20,236,4,24,77,
0,73,0,78,0,
85,0,83,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,7,
1,1,2,0,1,
1151,237,18,1,1151,
238,20,239,4,24,
83,0,76,0,65,
0,83,0,72,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
9,1,1,2,0,
1,112,240,18,1,
112,241,20,242,4,
28,71,0,82,0,
69,0,65,0,84,
0,69,0,82,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
32,1,1,2,0,
1,1229,243,18,1,
1229,147,2,0,1,
118,244,18,1,118,
147,2,0,1,1157,
245,18,1,1157,147,
2,0,1,2278,246,
18,1,2278,159,2,
0,1,124,247,18,
1,124,248,20,249,
4,22,76,0,69,
0,83,0,83,0,
95,0,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
31,1,1,2,0,
1,2353,250,18,1,
2353,251,20,252,4,
22,82,0,73,0,
71,0,72,0,84,
0,95,0,66,0,
82,0,65,0,67,
0,69,0,1,13,
1,1,2,0,1,
2356,253,18,1,2356,
254,20,255,4,18,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,109,
1,2,2,0,1,
1800,256,18,1,1800,
254,2,0,1,130,
257,18,1,130,147,
2,0,1,1802,258,
18,1,1802,259,20,
260,4,4,68,0,
79,0,1,44,1,
1,2,0,1,2360,
261,18,1,2360,213,
2,0,1,2361,262,
18,1,2361,150,2,
0,1,2362,263,18,
1,2362,264,20,265,
4,10,83,0,84,
0,65,0,84,0,
69,0,1,48,1,
1,2,0,1,2363,
266,18,1,2363,132,
2,0,1,2364,267,
18,1,2364,156,2,
0,1,137,268,18,
1,137,269,20,270,
4,36,69,0,88,
0,67,0,76,0,
65,0,77,0,65,
0,84,0,73,0,
79,0,78,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,30,
1,1,2,0,1,
2366,271,18,1,2366,
272,20,273,4,30,
84,0,79,0,85,
0,67,0,72,0,
95,0,69,0,78,
0,68,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,90,1,1,2,
0,1,2367,274,18,
1,2367,275,20,276,
4,22,84,0,79,
0,85,0,67,0,
72,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
88,1,1,2,0,
1,2368,277,18,1,
2368,278,20,279,4,
22,84,0,73,0,
77,0,69,0,82,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,87,
1,1,2,0,1,
2369,280,18,1,2369,
281,20,282,4,32,
83,0,84,0,65,
0,84,0,69,0,
95,0,69,0,88,
0,73,0,84,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,86,1,
1,2,0,1,2370,
283,18,1,2370,284,
20,285,4,34,83,
0,84,0,65,0,
84,0,69,0,95,
0,69,0,78,0,
84,0,82,0,89,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,85,
1,1,2,0,1,
143,286,18,1,143,
147,2,0,1,1258,
287,18,1,1258,159,
2,0,1,1259,288,
18,1,1259,289,20,
290,4,22,80,0,
76,0,85,0,83,
0,95,0,69,0,
81,0,85,0,65,
0,76,0,83,0,
1,6,1,1,2,
0,1,2374,291,18,
1,2374,292,20,293,
4,24,79,0,78,
0,95,0,82,0,
69,0,90,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,81,1,1,
2,0,1,2375,294,
18,1,2375,295,20,
296,4,32,79,0,
66,0,74,0,69,
0,67,0,84,0,
95,0,82,0,69,
0,90,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,80,1,1,2,
0,1,2376,297,18,
1,2376,298,20,299,
4,38,78,0,79,
0,84,0,95,0,
65,0,84,0,95,
0,84,0,65,0,
82,0,71,0,69,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,79,1,1,2,
0,1,2377,300,18,
1,2377,301,20,302,
4,46,78,0,79,
0,84,0,95,0,
65,0,84,0,95,
0,82,0,79,0,
84,0,95,0,84,
0,65,0,82,0,
71,0,69,0,84,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,78,
1,1,2,0,1,
2378,303,18,1,2378,
304,20,305,4,30,
78,0,79,0,95,
0,83,0,69,0,
78,0,83,0,79,
0,82,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,77,1,1,2,
0,1,1265,306,18,
1,1265,147,2,0,
1,2380,307,18,1,
2380,308,20,309,4,
32,77,0,79,0,
86,0,73,0,78,
0,71,0,95,0,
69,0,78,0,68,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,75,
1,1,2,0,1,
2307,310,18,1,2307,
311,20,312,4,26,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,1,108,1,2,
2,0,1,2382,313,
18,1,2382,314,20,
315,4,24,76,0,
73,0,83,0,84,
0,69,0,78,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,73,1,
1,2,0,1,2383,
316,18,1,2383,317,
20,318,4,36,76,
0,73,0,78,0,
75,0,95,0,77,
0,69,0,83,0,
83,0,65,0,71,
0,69,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,72,1,1,2,
0,1,2384,319,18,
1,2384,320,20,321,
4,52,76,0,65,
0,78,0,68,0,
95,0,67,0,79,
0,76,0,76,0,
73,0,83,0,73,
0,79,0,78,0,
95,0,83,0,84,
0,65,0,82,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
71,1,1,2,0,
1,151,322,18,1,
151,323,20,324,4,
26,69,0,81,0,
85,0,65,0,76,
0,83,0,95,0,
69,0,81,0,85,
0,65,0,76,0,
83,0,1,29,1,
1,2,0,1,2386,
325,18,1,2386,326,
20,327,4,40,76,
0,65,0,78,0,
68,0,95,0,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
69,1,1,2,0,
1,1830,328,18,1,
1830,254,2,0,1,
1831,329,18,1,1831,
330,20,331,4,10,
87,0,72,0,73,
0,76,0,69,0,
1,45,1,1,2,
0,1,1832,332,18,
1,1832,135,2,0,
1,2390,333,18,1,
2390,334,20,335,4,
26,67,0,79,0,
78,0,84,0,82,
0,79,0,76,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,65,1,
1,2,0,1,157,
336,18,1,157,147,
2,0,1,2392,337,
18,1,2392,338,20,
339,4,38,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,69,0,
78,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,63,1,1,
2,0,1,2393,340,
18,1,2393,341,20,
342,4,30,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,69,0,
86,0,69,0,78,
0,84,0,1,62,
1,1,2,0,1,
166,343,18,1,166,
344,20,345,4,20,
76,0,69,0,70,
0,84,0,95,0,
65,0,78,0,71,
0,76,0,69,0,
1,25,1,1,2,
0,1,1838,346,18,
1,1838,147,2,0,
1,2396,347,18,1,
2396,348,20,349,4,
30,65,0,84,0,
95,0,84,0,65,
0,82,0,71,0,
69,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,59,1,1,
2,0,1,2397,350,
18,1,2397,351,20,
352,4,38,65,0,
84,0,95,0,82,
0,79,0,84,0,
95,0,84,0,65,
0,82,0,71,0,
69,0,84,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,58,1,1,
2,0,1,2398,353,
18,1,2398,354,20,
355,4,10,69,0,
118,0,101,0,110,
0,116,0,1,106,
1,2,2,0,1,
2399,356,18,1,2399,
135,2,0,1,172,
357,18,1,172,147,
2,0,1,1294,358,
18,1,1294,159,2,
0,1,1295,359,18,
1,1295,360,20,361,
4,12,69,0,81,
0,85,0,65,0,
76,0,83,0,1,
15,1,1,2,0,
1,182,362,18,1,
182,363,20,364,4,
22,82,0,73,0,
71,0,72,0,84,
0,95,0,65,0,
78,0,71,0,76,
0,69,0,1,26,
1,1,2,0,1,
2412,365,18,1,2412,
213,2,0,1,1857,
366,18,1,1857,153,
2,0,1,1858,367,
18,1,1858,186,2,
0,1,188,368,18,
1,188,147,2,0,
1,1187,369,18,1,
1187,370,20,371,4,
22,83,0,84,0,
65,0,82,0,95,
0,69,0,81,0,
85,0,65,0,76,
0,83,0,1,8,
1,1,2,0,1,
1869,372,18,1,1869,
159,2,0,1,1870,
373,18,1,1870,153,
2,0,1,1871,374,
18,1,1871,186,2,
0,1,1873,375,18,
1,1873,330,2,0,
1,1874,376,18,1,
1874,135,2,0,1,
205,377,18,1,205,
147,2,0,1,199,
378,18,1,199,379,
20,380,4,10,67,
0,65,0,82,0,
69,0,84,0,1,
35,1,1,2,0,
1,1880,381,18,1,
1880,147,2,0,1,
2365,382,18,1,2365,
383,20,384,4,34,
84,0,79,0,85,
0,67,0,72,0,
95,0,83,0,84,
0,65,0,82,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
89,1,1,2,0,
1,1330,385,18,1,
1330,159,2,0,1,
217,386,18,1,217,
387,20,388,4,12,
83,0,84,0,82,
0,79,0,75,0,
69,0,1,34,1,
1,2,0,1,1333,
389,18,1,1333,162,
2,0,1,2372,390,
18,1,2372,391,20,
392,4,52,82,0,
85,0,78,0,95,
0,84,0,73,0,
77,0,69,0,95,
0,80,0,69,0,
82,0,77,0,73,
0,83,0,83,0,
73,0,79,0,78,
0,83,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,83,1,1,2,
0,1,2373,393,18,
1,2373,394,20,395,
4,34,82,0,69,
0,77,0,79,0,
84,0,69,0,95,
0,68,0,65,0,
84,0,65,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,82,1,1,
2,0,1,2450,396,
18,1,2450,251,2,
0,1,223,397,18,
1,223,147,2,0,
1,2452,398,18,1,
2452,399,20,400,4,
26,68,0,69,0,
70,0,65,0,85,
0,76,0,84,0,
95,0,83,0,84,
0,65,0,84,0,
69,0,1,47,1,
1,2,0,1,1339,
401,18,1,1339,147,
2,0,1,2379,402,
18,1,2379,403,20,
404,4,36,77,0,
79,0,86,0,73,
0,78,0,71,0,
95,0,83,0,84,
0,65,0,82,0,
84,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
76,1,1,2,0,
1,1899,405,18,1,
1899,153,2,0,1,
1301,406,18,1,1301,
147,2,0,1,2385,
407,18,1,2385,408,
20,409,4,48,76,
0,65,0,78,0,
68,0,95,0,67,
0,79,0,76,0,
76,0,73,0,83,
0,73,0,79,0,
78,0,95,0,69,
0,78,0,68,0,
95,0,69,0,86,
0,69,0,78,0,
84,0,1,70,1,
1,2,0,1,2604,
410,18,1,2604,411,
20,412,4,50,71,
0,108,0,111,0,
98,0,97,0,108,
0,86,0,97,0,
114,0,105,0,97,
0,98,0,108,0,
101,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,1,
97,1,2,2,0,
1,2387,413,18,1,
2387,414,20,415,4,
38,72,0,84,0,
84,0,80,0,95,
0,82,0,69,0,
83,0,80,0,79,
0,78,0,83,0,
69,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
68,1,1,2,0,
1,236,416,18,1,
236,417,20,418,4,
6,65,0,77,0,
80,0,1,33,1,
1,2,0,1,2389,
419,18,1,2389,420,
20,421,4,32,68,
0,65,0,84,0,
65,0,83,0,69,
0,82,0,86,0,
69,0,82,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,66,1,1,
2,0,1,2391,422,
18,1,2391,423,20,
424,4,42,67,0,
79,0,76,0,76,
0,73,0,83,0,
73,0,79,0,78,
0,95,0,83,0,
84,0,65,0,82,
0,84,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,64,1,1,2,
0,1,242,425,18,
1,242,147,2,0,
1,2395,426,18,1,
2395,427,20,428,4,
24,65,0,84,0,
84,0,65,0,67,
0,72,0,95,0,
69,0,86,0,69,
0,78,0,84,0,
1,60,1,1,2,
0,1,1368,429,18,
1,1368,159,2,0,
1,1369,430,18,1,
1369,238,2,0,1,
256,431,18,1,256,
432,20,433,4,14,
80,0,69,0,82,
0,67,0,69,0,
78,0,84,0,1,
22,1,1,2,0,
1,2408,434,18,1,
2408,140,2,0,1,
1929,435,18,1,1929,
254,2,0,1,1930,
436,18,1,1930,437,
20,438,4,4,73,
0,70,0,1,42,
1,1,2,0,1,
1931,439,18,1,1931,
135,2,0,1,1375,
440,18,1,1375,147,
2,0,1,262,441,
18,1,262,147,2,
0,1,2414,442,18,
1,2414,443,20,444,
4,18,83,0,116,
0,97,0,116,0,
101,0,66,0,111,
0,100,0,121,0,
1,101,1,2,2,
0,1,1937,445,18,
1,1937,147,2,0,
1,827,446,18,1,
827,147,2,0,1,
1773,447,18,1,1773,
153,2,0,1,2352,
448,18,1,2352,254,
2,0,1,277,449,
18,1,277,450,20,
451,4,10,83,0,
76,0,65,0,83,
0,72,0,1,21,
1,1,2,0,1,
2358,452,18,1,2358,
251,2,0,1,283,
453,18,1,283,147,
2,0,1,1956,454,
18,1,1956,153,2,
0,1,1404,455,18,
1,1404,159,2,0,
1,1405,456,18,1,
1405,370,2,0,1,
2371,457,18,1,2371,
458,20,459,4,24,
83,0,69,0,78,
0,83,0,79,0,
82,0,95,0,69,
0,86,0,69,0,
78,0,84,0,1,
84,1,1,2,0,
1,2524,460,18,1,
2524,251,2,0,1,
1411,461,18,1,1411,
147,2,0,1,2526,
462,18,1,2526,463,
20,464,4,12,83,
0,116,0,97,0,
116,0,101,0,115,
0,1,99,1,2,
2,0,1,299,465,
18,1,299,466,20,
467,4,8,83,0,
84,0,65,0,82,
0,1,20,1,1,
2,0,1,2451,468,
18,1,2451,469,20,
470,4,20,83,0,
116,0,97,0,116,
0,101,0,69,0,
118,0,101,0,110,
0,116,0,1,102,
1,2,2,0,1,
2530,471,18,1,2530,
472,20,473,4,10,
83,0,116,0,97,
0,116,0,101,0,
1,100,1,2,2,
0,1,2453,474,18,
1,2453,156,2,0,
1,2532,475,18,1,
2532,135,2,0,1,
305,476,18,1,305,
147,2,0,1,2388,
477,18,1,2388,478,
20,479,4,22,69,
0,77,0,65,0,
73,0,76,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,67,1,1,
2,0,1,2541,480,
18,1,2541,140,2,
0,1,2543,481,18,
1,2543,153,2,0,
1,1987,482,18,1,
1987,254,2,0,1,
1988,483,18,1,1988,
484,20,485,4,8,
69,0,76,0,83,
0,69,0,1,43,
1,1,2,0,1,
2394,486,18,1,2394,
487,20,488,4,26,
67,0,72,0,65,
0,78,0,71,0,
69,0,68,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,61,1,1,
2,0,1,2547,489,
18,1,2547,150,2,
0,1,2548,490,18,
1,2548,360,2,0,
1,322,491,18,1,
322,222,2,0,1,
883,492,18,1,883,
147,2,0,1,1441,
493,18,1,1441,235,
2,0,1,328,494,
18,1,328,147,2,
0,1,1447,495,18,
1,1447,147,2,0,
1,2410,496,18,1,
2410,153,2,0,1,
2488,497,18,1,2488,
443,2,0,1,2573,
498,18,1,2573,186,
2,0,1,346,499,
18,1,346,500,20,
501,4,8,80,0,
76,0,85,0,83,
0,1,18,1,1,
2,0,1,2019,502,
18,1,2019,254,2,
0,1,2020,503,18,
1,2020,264,2,0,
1,2021,504,18,1,
2021,399,2,0,1,
2022,505,18,1,2022,
132,2,0,1,352,
506,18,1,352,147,
2,0,1,2024,507,
18,1,2024,132,2,
0,1,2025,508,18,
1,2025,509,20,510,
4,4,65,0,84,
0,1,23,1,1,
2,0,1,2026,511,
18,1,2026,132,2,
0,1,2027,512,18,
1,2027,213,2,0,
1,2028,513,18,1,
2028,514,20,515,4,
14,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
1,119,1,2,2,
0,1,2029,516,18,
1,2029,517,20,518,
4,32,68,0,111,
0,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
118,1,2,2,0,
1,2030,519,18,1,
2030,520,20,521,4,
28,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
117,1,2,2,0,
1,2031,522,18,1,
2031,523,20,524,4,
22,73,0,102,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,116,
1,2,2,0,1,
2032,525,18,1,2032,
526,20,527,4,22,
83,0,116,0,97,
0,116,0,101,0,
67,0,104,0,97,
0,110,0,103,0,
101,0,1,115,1,
2,2,0,1,1476,
528,18,1,1476,159,
2,0,1,1477,529,
18,1,1477,289,2,
0,1,2035,530,18,
1,2035,186,2,0,
1,2036,531,18,1,
2036,532,20,533,4,
18,74,0,117,0,
109,0,112,0,76,
0,97,0,98,0,
101,0,108,0,1,
113,1,2,2,0,
1,2037,534,18,1,
2037,186,2,0,1,
2038,535,18,1,2038,
536,20,537,4,30,
82,0,101,0,116,
0,117,0,114,0,
110,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,112,1,2,2,
0,1,2039,538,18,
1,2039,186,2,0,
1,1483,539,18,1,
1483,147,2,0,1,
2041,540,18,1,2041,
186,2,0,1,371,
541,18,1,371,542,
20,543,4,24,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
67,0,97,0,108,
0,108,0,1,121,
1,2,2,0,1,
372,544,18,1,372,
176,2,0,1,373,
545,18,1,373,132,
2,0,1,374,546,
18,1,374,172,2,
0,1,375,547,18,
1,375,132,2,0,
1,376,548,18,1,
376,179,2,0,1,
377,549,18,1,377,
132,2,0,1,378,
550,18,1,378,172,
2,0,1,379,551,
18,1,379,132,2,
0,1,380,552,18,
1,380,553,20,554,
4,16,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,125,
1,2,2,0,1,
381,555,18,1,381,
344,2,0,1,2529,
556,18,1,2529,472,
2,0,1,2531,557,
18,1,2531,132,2,
0,1,942,558,18,
1,942,147,2,0,
1,387,559,18,1,
387,147,2,0,1,
1512,560,18,1,1512,
159,2,0,1,1513,
561,18,1,1513,360,
2,0,1,2071,562,
18,1,2071,159,2,
0,1,2072,563,18,
1,2072,153,2,0,
1,1519,564,18,1,
1519,147,2,0,1,
406,565,18,1,406,
143,2,0,1,2554,
566,18,1,2554,147,
2,0,1,412,567,
18,1,412,147,2,
0,1,2023,568,18,
1,2023,569,20,570,
4,8,74,0,85,
0,77,0,80,0,
1,49,1,1,2,
0,1,1440,571,18,
1,1440,159,2,0,
1,2033,572,18,1,
2033,186,2,0,1,
2034,573,18,1,2034,
574,20,575,4,26,
74,0,117,0,109,
0,112,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,1,114,1,2,
2,0,1,431,576,
18,1,431,143,2,
0,1,2103,577,18,
1,2103,484,2,0,
1,1548,578,18,1,
1548,159,2,0,1,
2042,579,18,1,2042,
186,2,0,1,437,
580,18,1,437,147,
2,0,1,2584,581,
18,1,2584,186,2,
0,1,1553,582,18,
1,1553,147,2,0,
1,1001,583,18,1,
1001,542,2,0,1,
1002,584,18,1,1002,
553,2,0,1,447,
585,18,1,447,363,
2,0,1,2596,586,
18,1,2596,463,2,
0,1,1010,587,18,
1,1010,147,2,0,
1,1011,588,18,1,
1011,153,2,0,1,
2449,589,18,1,2449,
469,2,0,1,2381,
590,18,1,2381,591,
20,592,4,22,77,
0,79,0,78,0,
69,0,89,0,95,
0,69,0,86,0,
69,0,78,0,84,
0,1,74,1,1,
2,0,1,1572,593,
18,1,1572,186,2,
0,1,459,594,18,
1,459,595,20,596,
4,24,76,0,69,
0,70,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
75,0,69,0,84,
0,1,27,1,1,
2,0,1,2605,597,
18,1,2605,598,20,
599,4,48,71,0,
108,0,111,0,98,
0,97,0,108,0,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,1,98,1,2,
2,0,1,461,600,
18,1,461,601,20,
602,4,24,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,1,122,1,
2,2,0,1,462,
603,18,1,462,143,
2,0,1,2608,604,
18,1,2608,605,23,
606,4,6,69,0,
79,0,70,0,1,
2,1,6,2,0,
1,464,607,18,1,
464,608,20,609,4,
16,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,1,123,1,
2,2,0,1,1583,
610,18,1,1583,611,
20,612,4,12,82,
0,69,0,84,0,
85,0,82,0,78,
0,1,50,1,1,
2,0,1,1589,613,
18,1,1589,147,2,
0,1,476,614,18,
1,476,615,20,616,
4,30,83,0,84,
0,82,0,73,0,
78,0,71,0,95,
0,67,0,79,0,
78,0,83,0,84,
0,65,0,78,0,
84,0,1,3,1,
1,2,0,1,477,
617,18,1,477,618,
20,619,4,28,70,
0,76,0,79,0,
65,0,84,0,95,
0,67,0,79,0,
78,0,83,0,84,
0,65,0,78,0,
84,0,1,94,1,
1,2,0,1,478,
620,18,1,478,621,
20,622,4,40,72,
0,69,0,88,0,
95,0,73,0,78,
0,84,0,69,0,
71,0,69,0,82,
0,95,0,67,0,
79,0,78,0,83,
0,84,0,65,0,
78,0,84,0,1,
93,1,1,2,0,
1,479,623,18,1,
479,624,20,625,4,
32,73,0,78,0,
84,0,69,0,71,
0,69,0,82,0,
95,0,67,0,79,
0,78,0,83,0,
84,0,65,0,78,
0,84,0,1,92,
1,1,2,0,1,
480,626,18,1,480,
627,20,628,4,26,
82,0,73,0,71,
0,72,0,84,0,
95,0,66,0,82,
0,65,0,67,0,
75,0,69,0,84,
0,1,28,1,1,
2,0,1,481,629,
18,1,481,608,2,
0,1,2603,630,18,
1,2603,598,2,0,
1,1046,631,18,1,
1046,147,2,0,1,
2102,632,18,1,2102,
254,2,0,1,2040,
633,18,1,2040,634,
20,635,4,20,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,1,
110,1,2,2,0,
1,1618,636,18,1,
1618,159,2,0,1,
1619,637,18,1,1619,
150,2,0,1,1620,
638,18,1,1620,360,
2,0,1,509,639,
18,1,509,143,2,
0,1,1626,640,18,
1,1626,147,2,0,
1,515,641,18,1,
515,147,2,0,1,
2585,642,18,1,2585,
643,20,644,4,34,
71,0,108,0,111,
0,98,0,97,0,
108,0,68,0,101,
0,102,0,105,0,
110,0,105,0,116,
0,105,0,111,0,
110,0,115,0,1,
96,1,2,2,0,
1,2194,645,18,1,
2194,159,2,0,1,
2195,646,18,1,2195,
153,2,0,1,525,
647,18,1,525,363,
2,0,1,2133,648,
18,1,2133,254,2,
0,1,1092,649,18,
1,1092,601,2,0,
1,1094,650,18,1,
1094,153,2,0,1,
1655,651,18,1,1655,
186,2,0,1,1656,
652,18,1,1656,653,
20,654,4,6,70,
0,79,0,82,0,
1,46,1,1,2,
0,1,1657,655,18,
1,1657,135,2,0,
1,2606,656,18,1,
2606,411,2,0,1,
2607,104,1,1663,657,
18,1,1663,147,2,
0,1,2224,658,18,
1,2224,254,2,0,
1,1111,659,18,1,
1111,172,2,0,1,
1112,660,18,1,1112,
132,2,0,661,5,
0,662,5,318,1,
2,663,19,606,1,
2,664,5,6,1,
2530,665,17,666,15,
667,4,14,37,0,
83,0,116,0,97,
0,116,0,101,0,
115,0,1,-1,1,
5,668,20,669,4,
16,83,0,116,0,
97,0,116,0,101,
0,115,0,95,0,
49,0,1,150,1,
3,1,2,1,1,
670,22,1,11,1,
2596,671,17,672,15,
673,4,30,37,0,
76,0,83,0,76,
0,80,0,114,0,
111,0,103,0,114,
0,97,0,109,0,
82,0,111,0,111,
0,116,0,1,-1,
1,5,674,20,675,
4,32,76,0,83,
0,76,0,80,0,
114,0,111,0,103,
0,114,0,97,0,
109,0,82,0,111,
0,111,0,116,0,
95,0,49,0,1,
140,1,3,1,3,
1,2,676,22,1,
1,1,2524,677,17,
678,15,679,4,12,
37,0,83,0,116,
0,97,0,116,0,
101,0,1,-1,1,
5,680,20,681,4,
14,83,0,116,0,
97,0,116,0,101,
0,95,0,49,0,
1,152,1,3,1,
5,1,4,682,22,
1,13,1,2526,683,
17,684,15,673,1,
-1,1,5,685,20,
686,4,32,76,0,
83,0,76,0,80,
0,114,0,111,0,
103,0,114,0,97,
0,109,0,82,0,
111,0,111,0,116,
0,95,0,50,0,
1,141,1,3,1,
2,1,1,687,22,
1,2,1,2450,688,
17,689,15,679,1,
-1,1,5,690,20,
691,4,14,83,0,
116,0,97,0,116,
0,101,0,95,0,
50,0,1,153,1,
3,1,6,1,5,
692,22,1,14,1,
2529,693,17,694,15,
667,1,-1,1,5,
695,20,696,4,16,
83,0,116,0,97,
0,116,0,101,0,
115,0,95,0,50,
0,1,151,1,3,
1,3,1,2,697,
22,1,12,1,3,
698,19,616,1,3,
699,5,91,1,1259,
700,16,0,614,1,
256,701,16,0,614,
1,2195,702,16,0,
614,1,1513,703,16,
0,614,1,2019,704,
17,705,15,706,4,
24,37,0,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,707,
20,708,4,26,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,181,1,3,1,
8,1,7,709,22,
1,44,1,1773,710,
16,0,614,1,2027,
711,17,712,15,713,
4,20,37,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,714,20,715,4,
24,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,50,0,
1,175,1,3,1,
2,1,1,716,22,
1,38,1,2028,717,
17,718,15,713,1,
-1,1,5,719,20,
720,4,24,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
49,0,1,174,1,
3,1,2,1,1,
721,22,1,37,1,
2029,722,17,723,15,
713,1,-1,1,5,
724,20,725,4,24,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,48,0,1,
173,1,3,1,2,
1,1,726,22,1,
36,1,2030,727,17,
728,15,713,1,-1,
1,5,729,20,730,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,57,0,1,
172,1,3,1,2,
1,1,731,22,1,
35,1,2031,732,17,
733,15,713,1,-1,
1,5,734,20,735,
4,22,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,56,0,1,
171,1,3,1,2,
1,1,736,22,1,
34,1,509,737,16,
0,614,1,2033,738,
17,739,15,713,1,
-1,1,5,740,20,
741,4,22,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,55,0,
1,170,1,3,1,
3,1,2,742,22,
1,33,1,277,743,
16,0,614,1,2035,
744,17,745,15,713,
1,-1,1,5,746,
20,747,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,54,
0,1,169,1,3,
1,3,1,2,748,
22,1,32,1,2037,
749,17,750,15,713,
1,-1,1,5,751,
20,752,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,53,
0,1,168,1,3,
1,3,1,2,753,
22,1,31,1,2039,
754,17,755,15,713,
1,-1,1,5,756,
20,757,4,22,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,52,
0,1,167,1,3,
1,3,1,2,758,
22,1,30,1,32,
759,16,0,614,1,
2041,760,17,761,15,
713,1,-1,1,5,
762,20,763,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,165,1,
3,1,3,1,2,
764,22,1,28,1,
2042,765,17,766,15,
713,1,-1,1,5,
254,1,1,1,1,
767,22,1,26,1,
2548,768,16,0,614,
1,1295,769,16,0,
614,1,41,770,16,
0,614,1,43,771,
16,0,614,1,1802,
772,16,0,614,1,
2307,773,16,0,614,
1,52,774,16,0,
614,1,299,775,16,
0,614,1,62,776,
16,0,614,1,2072,
777,16,0,614,1,
1572,778,17,779,15,
713,1,-1,1,5,
780,20,781,4,22,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
51,0,1,166,1,
3,1,3,1,2,
782,22,1,29,1,
71,783,16,0,614,
1,1956,784,16,0,
614,1,1832,785,16,
0,614,1,76,786,
16,0,614,1,1583,
787,16,0,614,1,
1333,788,16,0,614,
1,79,789,16,0,
614,1,322,790,16,
0,614,1,85,791,
16,0,614,1,89,
792,16,0,614,1,
2352,793,17,794,15,
795,4,28,37,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,1,-1,1,5,
796,20,797,4,30,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,76,0,
105,0,115,0,116,
0,95,0,50,0,
1,163,1,3,1,
3,1,2,798,22,
1,25,1,2353,799,
17,800,15,801,4,
36,37,0,67,0,
111,0,109,0,112,
0,111,0,117,0,
110,0,100,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,802,20,803,4,
38,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
161,1,3,1,4,
1,3,804,22,1,
23,1,346,805,16,
0,614,1,2356,806,
17,807,15,795,1,
-1,1,5,808,20,
809,4,30,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,49,0,1,162,
1,3,1,2,1,
1,810,22,1,24,
1,2358,811,17,812,
15,801,1,-1,1,
5,813,20,814,4,
38,67,0,111,0,
109,0,112,0,111,
0,117,0,110,0,
100,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
160,1,3,1,3,
1,2,815,22,1,
22,1,1858,816,17,
817,15,818,4,34,
37,0,68,0,111,
0,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,819,20,
820,4,36,68,0,
111,0,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
186,1,3,1,8,
1,7,821,22,1,
49,1,97,822,16,
0,614,1,102,823,
16,0,614,1,1115,
824,16,0,614,1,
112,825,16,0,614,
1,525,826,16,0,
614,1,1871,827,17,
828,15,818,1,-1,
1,5,829,20,830,
4,36,68,0,111,
0,87,0,104,0,
105,0,108,0,101,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,187,
1,3,1,8,1,
7,831,22,1,50,
1,1874,832,16,0,
614,1,124,833,16,
0,614,1,2133,834,
17,835,15,706,1,
-1,1,5,836,20,
837,4,26,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,52,0,1,
183,1,3,1,8,
1,7,838,22,1,
46,1,381,839,16,
0,614,1,137,840,
16,0,614,1,1899,
841,16,0,614,1,
1151,842,16,0,614,
1,1655,843,17,844,
15,713,1,-1,1,
5,845,20,846,4,
22,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,164,
1,3,1,3,1,
2,847,22,1,27,
1,1405,848,16,0,
614,1,151,849,16,
0,614,1,406,850,
16,0,614,1,1369,
851,16,0,614,1,
1800,852,17,853,15,
854,4,16,37,0,
70,0,111,0,114,
0,76,0,111,0,
111,0,112,0,1,
-1,1,5,855,20,
856,4,18,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,95,0,49,
0,1,188,1,3,
1,10,1,9,857,
22,1,51,1,2102,
858,17,859,15,706,
1,-1,1,5,860,
20,861,4,26,73,
0,102,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,51,0,
1,182,1,3,1,
6,1,5,862,22,
1,45,1,2103,863,
16,0,614,1,166,
864,16,0,614,1,
1929,865,17,866,15,
867,4,30,37,0,
87,0,104,0,105,
0,108,0,101,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,868,20,869,
4,32,87,0,104,
0,105,0,108,0,
101,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
184,1,3,1,6,
1,5,870,22,1,
47,1,1931,871,16,
0,614,1,431,872,
16,0,614,1,182,
873,16,0,614,1,
1187,874,16,0,614,
1,1441,875,16,0,
614,1,1693,876,16,
0,614,1,447,877,
16,0,614,1,199,
878,16,0,614,1,
1657,879,16,0,614,
1,459,880,16,0,
614,1,462,881,16,
0,614,1,2224,882,
17,883,15,867,1,
-1,1,5,884,20,
885,4,32,87,0,
104,0,105,0,108,
0,101,0,83,0,
116,0,97,0,116,
0,101,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,185,1,3,1,
6,1,5,886,22,
1,48,1,217,887,
16,0,614,1,1620,
888,16,0,614,1,
1223,889,16,0,614,
1,1477,890,16,0,
614,1,1729,891,16,
0,614,1,1987,892,
17,893,15,706,1,
-1,1,5,894,20,
895,4,26,73,0,
102,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
180,1,3,1,6,
1,5,896,22,1,
43,1,1988,897,16,
0,614,1,236,898,
16,0,614,1,1754,
899,16,0,614,1,
4,900,19,180,1,
4,901,5,96,1,
1259,902,16,0,548,
1,256,903,16,0,
548,1,2195,904,16,
0,548,1,1513,905,
16,0,548,1,2019,
704,1,1773,906,16,
0,548,1,2027,711,
1,2028,717,1,2029,
722,1,2030,727,1,
2031,732,1,509,907,
16,0,548,1,2033,
738,1,277,908,16,
0,548,1,2035,744,
1,2037,749,1,2039,
754,1,32,909,16,
0,548,1,2041,760,
1,2042,765,1,2548,
910,16,0,548,1,
40,911,16,0,182,
1,41,912,16,0,
548,1,43,913,16,
0,548,1,44,914,
16,0,182,1,1802,
915,16,0,548,1,
47,916,16,0,178,
1,2307,917,16,0,
548,1,52,918,16,
0,548,1,299,919,
16,0,548,1,63,
920,16,0,197,1,
2072,921,16,0,548,
1,66,922,16,0,
195,1,322,923,16,
0,548,1,1956,924,
16,0,548,1,71,
925,16,0,548,1,
76,926,16,0,548,
1,1583,927,16,0,
548,1,1333,928,16,
0,548,1,79,929,
16,0,548,1,1295,
930,16,0,548,1,
85,931,16,0,548,
1,89,932,16,0,
548,1,2352,793,1,
2353,799,1,346,933,
16,0,548,1,2356,
806,1,2358,811,1,
1858,816,1,97,934,
16,0,548,1,102,
935,16,0,548,1,
1112,936,16,0,178,
1,1115,937,16,0,
548,1,112,938,16,
0,548,1,525,939,
16,0,548,1,1871,
827,1,1874,940,16,
0,548,1,124,941,
16,0,548,1,2133,
834,1,381,942,16,
0,548,1,1832,943,
16,0,548,1,137,
944,16,0,548,1,
1899,945,16,0,548,
1,1151,946,16,0,
548,1,1655,843,1,
1405,947,16,0,548,
1,151,948,16,0,
548,1,406,949,16,
0,548,1,1369,950,
16,0,548,1,1800,
852,1,2102,858,1,
2103,951,16,0,548,
1,166,952,16,0,
548,1,1572,778,1,
1929,865,1,1931,953,
16,0,548,1,431,
954,16,0,548,1,
182,955,16,0,548,
1,1187,956,16,0,
548,1,1441,957,16,
0,548,1,1693,958,
16,0,548,1,447,
959,16,0,548,1,
199,960,16,0,548,
1,1657,961,16,0,
548,1,459,962,16,
0,548,1,462,963,
16,0,548,1,2224,
882,1,217,964,16,
0,548,1,1620,965,
16,0,548,1,1223,
966,16,0,548,1,
1477,967,16,0,548,
1,1729,968,16,0,
548,1,1987,892,1,
1988,969,16,0,548,
1,236,970,16,0,
548,1,1754,971,16,
0,548,1,5,972,
19,177,1,5,973,
5,96,1,1259,974,
16,0,544,1,256,
975,16,0,544,1,
2195,976,16,0,544,
1,1513,977,16,0,
544,1,2019,704,1,
1773,978,16,0,544,
1,2027,711,1,2028,
717,1,2029,722,1,
2030,727,1,2031,732,
1,509,979,16,0,
544,1,2033,738,1,
277,980,16,0,544,
1,2035,744,1,2037,
749,1,2039,754,1,
32,981,16,0,544,
1,2041,760,1,2042,
765,1,2548,982,16,
0,544,1,40,983,
16,0,181,1,41,
984,16,0,544,1,
43,985,16,0,544,
1,44,986,16,0,
181,1,1802,987,16,
0,544,1,47,988,
16,0,175,1,2307,
989,16,0,544,1,
52,990,16,0,544,
1,299,991,16,0,
544,1,63,992,16,
0,196,1,2072,993,
16,0,544,1,66,
994,16,0,194,1,
322,995,16,0,544,
1,1956,996,16,0,
544,1,71,997,16,
0,544,1,76,998,
16,0,544,1,1583,
999,16,0,544,1,
1333,1000,16,0,544,
1,79,1001,16,0,
544,1,1295,1002,16,
0,544,1,85,1003,
16,0,544,1,89,
1004,16,0,544,1,
2352,793,1,2353,799,
1,346,1005,16,0,
544,1,2356,806,1,
2358,811,1,1858,816,
1,97,1006,16,0,
544,1,102,1007,16,
0,544,1,1112,1008,
16,0,175,1,1115,
1009,16,0,544,1,
112,1010,16,0,544,
1,525,1011,16,0,
544,1,1871,827,1,
1874,1012,16,0,544,
1,124,1013,16,0,
544,1,2133,834,1,
381,1014,16,0,544,
1,1832,1015,16,0,
544,1,137,1016,16,
0,544,1,1899,1017,
16,0,544,1,1151,
1018,16,0,544,1,
1655,843,1,1405,1019,
16,0,544,1,151,
1020,16,0,544,1,
406,1021,16,0,544,
1,1369,1022,16,0,
544,1,1800,852,1,
2102,858,1,2103,1023,
16,0,544,1,166,
1024,16,0,544,1,
1572,778,1,1929,865,
1,1931,1025,16,0,
544,1,431,1026,16,
0,544,1,182,1027,
16,0,544,1,1187,
1028,16,0,544,1,
1441,1029,16,0,544,
1,1693,1030,16,0,
544,1,447,1031,16,
0,544,1,199,1032,
16,0,544,1,1657,
1033,16,0,544,1,
459,1034,16,0,544,
1,462,1035,16,0,
544,1,2224,882,1,
217,1036,16,0,544,
1,1620,1037,16,0,
544,1,1223,1038,16,
0,544,1,1477,1039,
16,0,544,1,1729,
1040,16,0,544,1,
1987,892,1,1988,1041,
16,0,544,1,236,
1042,16,0,544,1,
1754,1043,16,0,544,
1,6,1044,19,290,
1,6,1045,5,2,
1,1112,1046,16,0,
288,1,40,1047,16,
0,529,1,7,1048,
19,236,1,7,1049,
5,2,1,1112,1050,
16,0,234,1,40,
1051,16,0,493,1,
8,1052,19,371,1,
8,1053,5,2,1,
1112,1054,16,0,369,
1,40,1055,16,0,
456,1,9,1056,19,
239,1,9,1057,5,
2,1,1112,1058,16,
0,237,1,40,1059,
16,0,430,1,10,
1060,19,163,1,10,
1061,5,2,1,1112,
1062,16,0,161,1,
40,1063,16,0,389,
1,11,1064,19,187,
1,11,1065,5,140,
1,1258,1066,17,1067,
15,1068,4,34,37,
0,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1069,20,1070,
4,38,83,0,105,
0,109,0,112,0,
108,0,101,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,49,0,
1,215,1,3,1,
6,1,5,1071,22,
1,78,1,1512,1072,
17,1073,15,1068,1,
-1,1,5,1074,20,
1075,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,52,
0,1,208,1,3,
1,4,1,3,1076,
22,1,71,1,1011,
1077,17,1078,15,1079,
4,44,37,0,80,
0,97,0,114,0,
101,0,110,0,116,
0,104,0,101,0,
115,0,105,0,115,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1080,20,1081,4,46,
80,0,97,0,114,
0,101,0,110,0,
116,0,104,0,101,
0,115,0,105,0,
115,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,1,261,1,3,
1,4,1,3,1082,
22,1,124,1,9,
1083,17,1084,15,1085,
4,24,37,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,1,-1,1,5,
1086,20,1087,4,26,
68,0,101,0,99,
0,108,0,97,0,
114,0,97,0,116,
0,105,0,111,0,
110,0,95,0,49,
0,1,159,1,3,
1,3,1,2,1088,
22,1,21,1,1265,
1089,17,1090,15,1068,
1,-1,1,5,1091,
20,1092,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,56,0,
1,202,1,3,1,
6,1,5,1093,22,
1,65,1,262,1094,
17,1095,15,1096,4,
34,37,0,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1097,
20,1098,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,53,0,
1,244,1,3,1,
4,1,3,1099,22,
1,107,1,2021,1100,
17,1101,15,1102,4,
24,37,0,83,0,
116,0,97,0,116,
0,101,0,67,0,
104,0,97,0,110,
0,103,0,101,0,
1,-1,1,5,1103,
20,1104,4,26,83,
0,116,0,97,0,
116,0,101,0,67,
0,104,0,97,0,
110,0,103,0,101,
0,95,0,50,0,
1,179,1,3,1,
3,1,2,1105,22,
1,42,1,2022,1106,
17,1107,15,1102,1,
-1,1,5,1108,20,
1109,4,26,83,0,
116,0,97,0,116,
0,101,0,67,0,
104,0,97,0,110,
0,103,0,101,0,
95,0,49,0,1,
178,1,3,1,3,
1,2,1110,22,1,
41,1,1773,1111,16,
0,579,1,2026,1112,
17,1113,15,1114,4,
20,37,0,74,0,
117,0,109,0,112,
0,76,0,97,0,
98,0,101,0,108,
0,1,-1,1,5,
1115,20,1116,4,22,
74,0,117,0,109,
0,112,0,76,0,
97,0,98,0,101,
0,108,0,95,0,
49,0,1,176,1,
3,1,3,1,2,
1117,22,1,39,1,
19,1118,17,1084,1,
2,1088,1,2028,717,
1,2029,722,1,2030,
727,1,2031,732,1,
2032,1119,16,0,572,
1,2033,738,1,2034,
1120,16,0,530,1,
2035,744,1,2036,1121,
16,0,534,1,2037,
749,1,2038,1122,16,
0,538,1,2039,754,
1,32,1123,16,0,
579,1,2041,760,1,
2042,765,1,2547,1124,
16,0,581,1,1294,
1125,17,1126,15,1068,
1,-1,1,5,1127,
20,1128,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
48,0,1,214,1,
3,1,6,1,5,
1129,22,1,77,1,
40,1130,17,1131,15,
1132,4,32,37,0,
73,0,100,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1133,
20,1134,4,34,73,
0,100,0,101,0,
110,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,49,0,1,229,
1,3,1,2,1,
1,1135,22,1,92,
1,1548,1136,17,1137,
15,1068,1,-1,1,
5,1138,20,1139,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,51,0,1,
207,1,3,1,4,
1,3,1140,22,1,
70,1,283,1141,17,
1142,15,1096,1,-1,
1,5,1143,20,1144,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,52,0,1,243,
1,3,1,4,1,
3,1145,22,1,106,
1,1800,852,1,44,
1146,17,1131,1,1,
1135,1,1802,1147,16,
0,579,1,1301,1148,
17,1149,15,1068,1,
-1,1,5,1150,20,
1151,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,55,0,1,
201,1,3,1,6,
1,5,1152,22,1,
64,1,47,1153,17,
1154,15,1155,4,38,
37,0,73,0,100,
0,101,0,110,0,
116,0,68,0,111,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1156,20,1157,
4,40,73,0,100,
0,101,0,110,0,
116,0,68,0,111,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,230,1,
3,1,4,1,3,
1158,22,1,93,1,
2307,1159,16,0,579,
1,49,1160,17,1161,
15,1162,4,58,37,
0,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1163,20,1164,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,51,
0,1,233,1,3,
1,5,1,4,1165,
22,1,96,1,50,
1166,17,1167,15,1162,
1,-1,1,5,1168,
20,1169,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,50,0,1,
232,1,3,1,3,
1,2,1170,22,1,
95,1,48,1171,17,
1172,15,1162,1,-1,
1,5,1173,20,1174,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
52,0,1,234,1,
3,1,5,1,4,
1175,22,1,97,1,
51,1176,17,1177,15,
1162,1,-1,1,5,
1178,20,1179,4,60,
73,0,110,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,114,
0,101,0,109,0,
101,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,231,1,3,1,
3,1,2,1180,22,
1,94,1,525,1181,
17,1182,15,1183,4,
34,37,0,82,0,
111,0,116,0,97,
0,116,0,105,0,
111,0,110,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,-1,1,5,1184,
20,1185,4,36,82,
0,111,0,116,0,
97,0,116,0,105,
0,111,0,110,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,49,0,
1,227,1,3,1,
10,1,9,1186,22,
1,90,1,1519,1187,
17,1188,15,1068,1,
-1,1,5,1189,20,
1190,4,36,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
195,1,3,1,4,
1,3,1191,22,1,
58,1,63,1192,17,
1193,15,1194,4,38,
37,0,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,-1,
1,5,1195,20,1196,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
50,0,1,263,1,
3,1,5,1,4,
1197,22,1,126,1,
2072,1198,16,0,579,
1,305,1199,17,1200,
15,1096,1,-1,1,
5,1201,20,1202,4,
36,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
51,0,1,242,1,
3,1,4,1,3,
1203,22,1,105,1,
66,1204,17,1205,15,
1194,1,-1,1,5,
1206,20,1207,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,51,0,
1,264,1,3,1,
7,1,6,1208,22,
1,127,1,67,1209,
17,1210,15,1194,1,
-1,1,5,1211,20,
1212,4,40,84,0,
121,0,112,0,101,
0,99,0,97,0,
115,0,116,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,55,0,1,268,
1,3,1,8,1,
7,1213,22,1,131,
1,68,1214,17,1215,
15,1194,1,-1,1,
5,1216,20,1217,4,
40,84,0,121,0,
112,0,101,0,99,
0,97,0,115,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,53,
0,1,266,1,3,
1,8,1,7,1218,
22,1,129,1,69,
1219,17,1220,15,1194,
1,-1,1,5,1221,
20,1222,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,54,0,1,
267,1,3,1,6,
1,5,1223,22,1,
130,1,70,1224,17,
1225,15,1194,1,-1,
1,5,1226,20,1227,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
52,0,1,265,1,
3,1,6,1,5,
1228,22,1,128,1,
74,1229,17,1230,15,
1194,1,-1,1,5,
1231,20,1232,4,40,
84,0,121,0,112,
0,101,0,99,0,
97,0,115,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,57,0,
1,270,1,3,1,
7,1,6,1233,22,
1,133,1,1330,1234,
17,1235,15,1068,1,
-1,1,5,1236,20,
1237,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,57,
0,1,213,1,3,
1,6,1,5,1238,
22,1,76,1,2019,
704,1,328,1239,17,
1240,15,1096,1,-1,
1,5,1241,20,1242,
4,36,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,241,
1,3,1,4,1,
3,1243,22,1,104,
1,2133,834,1,2024,
1244,17,1245,15,1246,
4,28,37,0,74,
0,117,0,109,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
1,-1,1,5,1247,
20,1248,4,30,74,
0,117,0,109,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
177,1,3,1,3,
1,2,1249,22,1,
40,1,82,1250,17,
1251,15,1252,4,32,
37,0,85,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,-1,1,
5,1253,20,1254,4,
34,85,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,51,0,
1,260,1,3,1,
3,1,2,1255,22,
1,123,1,1589,1256,
17,1257,15,1258,4,
32,37,0,82,0,
101,0,116,0,117,
0,114,0,110,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,1,-1,
1,5,1259,20,1260,
4,34,82,0,101,
0,116,0,117,0,
114,0,110,0,83,
0,116,0,97,0,
116,0,101,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,1,219,1,3,
1,3,1,2,1261,
22,1,82,1,1339,
1262,17,1263,15,1068,
1,-1,1,5,1264,
20,1265,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,54,0,
1,200,1,3,1,
4,1,3,1266,22,
1,63,1,1094,1267,
17,1268,15,1269,4,
26,37,0,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,1,-1,1,
5,1270,20,1271,4,
28,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
95,0,49,0,1,
271,1,3,1,5,
1,4,1272,22,1,
134,1,2278,1273,17,
1274,15,1275,4,34,
37,0,70,0,111,
0,114,0,76,0,
111,0,111,0,112,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,1276,20,
1277,4,36,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,50,0,1,
190,1,3,1,2,
1,1,1278,22,1,
53,1,2352,793,1,
2353,799,1,2103,1279,
16,0,579,1,2356,
806,1,2358,811,1,
1857,1280,16,0,367,
1,1858,816,1,93,
1281,17,1282,15,1252,
1,-1,1,5,1283,
20,1284,4,34,85,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,95,
0,50,0,1,259,
1,3,1,3,1,
2,1285,22,1,122,
1,107,1286,17,1287,
15,1252,1,-1,1,
5,1288,20,1289,4,
34,85,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,258,1,3,1,
3,1,2,1290,22,
1,121,1,1112,1291,
17,1154,1,3,1158,
1,1046,1292,17,1293,
15,1096,1,-1,1,
5,1294,20,1295,4,
38,66,0,105,0,
110,0,97,0,114,
0,121,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,56,0,1,
257,1,3,1,4,
1,3,1296,22,1,
120,1,1618,1297,17,
1298,15,1299,4,22,
37,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,1,-1,1,
5,1300,20,1301,4,
24,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,50,0,
1,194,1,3,1,
2,1,1,1302,22,
1,57,1,1870,1303,
16,0,374,1,352,
1304,17,1305,15,1096,
1,-1,1,5,1306,
20,1307,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,240,1,3,1,
4,1,3,1308,22,
1,103,1,1121,1309,
17,1310,15,1068,1,
-1,1,5,1311,20,
1312,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,50,
0,1,206,1,3,
1,6,1,5,1313,
22,1,69,1,118,
1314,17,1315,15,1096,
1,-1,1,5,1316,
20,1317,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
52,0,1,253,1,
3,1,4,1,3,
1318,22,1,116,1,
1375,1319,17,1320,15,
1068,1,-1,1,5,
1321,20,1322,4,36,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,53,
0,1,199,1,3,
1,4,1,3,1323,
22,1,62,1,373,
1324,17,1325,15,1162,
1,-1,1,5,1326,
20,1327,4,60,73,
0,110,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,54,0,1,
236,1,3,1,3,
1,2,1328,22,1,
99,1,375,1329,17,
1330,15,1162,1,-1,
1,5,1331,20,1332,
4,60,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
56,0,1,238,1,
3,1,5,1,4,
1333,22,1,101,1,
2554,1334,16,0,498,
1,377,1335,17,1336,
15,1162,1,-1,1,
5,1337,20,1338,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,53,
0,1,235,1,3,
1,3,1,2,1339,
22,1,98,1,827,
1340,17,1341,15,1096,
1,-1,1,5,1342,
20,1343,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
53,0,1,254,1,
3,1,4,1,3,
1344,22,1,117,1,
380,1345,17,1346,15,
1347,4,38,37,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,1,-1,1,5,
1348,20,1349,4,40,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
1,228,1,3,1,
2,1,1,1350,22,
1,91,1,883,1351,
17,1352,15,1096,1,
-1,1,5,1353,20,
1354,4,38,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,49,0,54,
0,1,255,1,3,
1,4,1,3,1355,
22,1,118,1,1583,
1356,17,1357,15,1258,
1,-1,1,5,1358,
20,1359,4,34,82,
0,101,0,116,0,
117,0,114,0,110,
0,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,50,0,1,220,
1,3,1,2,1,
1,1360,22,1,83,
1,371,1361,17,1362,
15,1363,4,46,37,
0,70,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,67,0,97,
0,108,0,108,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,-1,1,5,1364,
20,1365,4,48,70,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
67,0,97,0,108,
0,108,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,239,1,
3,1,2,1,1,
1366,22,1,102,1,
130,1367,17,1368,15,
1096,1,-1,1,5,
1369,20,1370,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,51,0,1,252,
1,3,1,4,1,
3,1371,22,1,115,
1,379,1372,17,1373,
15,1162,1,-1,1,
5,1374,20,1375,4,
60,73,0,110,0,
99,0,114,0,101,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
114,0,101,0,109,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,55,
0,1,237,1,3,
1,5,1,4,1376,
22,1,100,1,1899,
1377,16,0,579,1,
143,1378,17,1379,15,
1096,1,-1,1,5,
1380,20,1381,4,38,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,49,
0,50,0,1,251,
1,3,1,4,1,
3,1382,22,1,114,
1,1150,1383,17,1384,
15,1068,1,-1,1,
5,1385,20,1386,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,52,0,1,
218,1,3,1,6,
1,5,1387,22,1,
81,1,1553,1388,16,
0,593,1,1404,1389,
17,1390,15,1068,1,
-1,1,5,1391,20,
1392,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,55,
0,1,211,1,3,
1,4,1,3,1393,
22,1,74,1,1157,
1394,17,1395,15,1068,
1,-1,1,5,1396,
20,1397,4,38,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,49,0,
49,0,1,205,1,
3,1,6,1,5,
1398,22,1,68,1,
1411,1399,17,1400,15,
1068,1,-1,1,5,
1401,20,1402,4,36,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,52,
0,1,198,1,3,
1,4,1,3,1403,
22,1,61,1,157,
1404,17,1405,15,1096,
1,-1,1,5,1406,
20,1407,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
49,0,1,250,1,
3,1,4,1,3,
1408,22,1,113,1,
2102,858,1,2040,1409,
16,0,540,1,1619,
1410,16,0,651,1,
1572,778,1,1929,865,
1,1871,827,1,172,
1411,17,1412,15,1096,
1,-1,1,5,1413,
20,1414,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
48,0,1,249,1,
3,1,4,1,3,
1415,22,1,112,1,
1186,1416,17,1417,15,
1068,1,-1,1,5,
1418,20,1419,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,50,
0,51,0,1,217,
1,3,1,6,1,
5,1420,22,1,80,
1,1440,1421,17,1422,
15,1068,1,-1,1,
5,1423,20,1424,4,
38,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
49,0,54,0,1,
210,1,3,1,4,
1,3,1425,22,1,
73,1,1692,1426,16,
0,185,1,2195,1427,
16,0,579,1,188,
1428,17,1429,15,1096,
1,-1,1,5,1430,
20,1431,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,57,0,
1,248,1,3,1,
4,1,3,1432,22,
1,111,1,1193,1433,
17,1434,15,1068,1,
-1,1,5,1435,20,
1436,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,49,0,48,
0,1,204,1,3,
1,6,1,5,1437,
22,1,67,1,1447,
1438,17,1439,15,1068,
1,-1,1,5,1440,
20,1441,4,36,83,
0,105,0,109,0,
112,0,108,0,101,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,109,0,
101,0,110,0,116,
0,95,0,51,0,
1,197,1,3,1,
4,1,3,1442,22,
1,60,1,1699,1443,
17,1444,15,1275,1,
-1,1,5,1445,20,
1446,4,36,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,51,0,1,
191,1,3,1,4,
1,3,1447,22,1,
54,1,447,1448,17,
1449,15,1450,4,30,
37,0,86,0,101,
0,99,0,116,0,
111,0,114,0,67,
0,111,0,110,0,
115,0,116,0,97,
0,110,0,116,0,
1,-1,1,5,1451,
20,1452,4,32,86,
0,101,0,99,0,
116,0,111,0,114,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,49,
0,1,226,1,3,
1,8,1,7,1453,
22,1,89,1,1956,
1454,16,0,579,1,
1368,1455,17,1456,15,
1068,1,-1,1,5,
1457,20,1458,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,56,0,1,212,
1,3,1,4,1,
3,1459,22,1,75,
1,1655,843,1,205,
1460,17,1461,15,1096,
1,-1,1,5,1462,
20,1463,4,36,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,56,0,
1,247,1,3,1,
4,1,3,1464,22,
1,110,1,1663,1465,
17,1466,15,1275,1,
-1,1,5,1467,20,
1468,4,36,70,0,
111,0,114,0,76,
0,111,0,111,0,
112,0,83,0,116,
0,97,0,116,0,
101,0,109,0,101,
0,110,0,116,0,
95,0,49,0,1,
189,1,3,1,2,
1,1,1469,22,1,
52,1,2027,711,1,
2224,882,1,1222,1470,
17,1471,15,1068,1,
-1,1,5,1472,20,
1473,4,38,83,0,
105,0,109,0,112,
0,108,0,101,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,109,0,101,
0,110,0,116,0,
95,0,50,0,50,
0,1,216,1,3,
1,6,1,5,1474,
22,1,79,1,942,
1475,17,1476,15,1096,
1,-1,1,5,1477,
20,1478,4,38,66,
0,105,0,110,0,
97,0,114,0,121,
0,69,0,120,0,
112,0,114,0,101,
0,115,0,115,0,
105,0,111,0,110,
0,95,0,49,0,
55,0,1,256,1,
3,1,4,1,3,
1479,22,1,119,1,
1476,1480,17,1481,15,
1068,1,-1,1,5,
1482,20,1483,4,38,
83,0,105,0,109,
0,112,0,108,0,
101,0,65,0,115,
0,115,0,105,0,
103,0,110,0,109,
0,101,0,110,0,
116,0,95,0,49,
0,53,0,1,209,
1,3,1,4,1,
3,1484,22,1,72,
1,1728,1485,17,1486,
15,1275,1,-1,1,
5,1487,20,1488,4,
36,70,0,111,0,
114,0,76,0,111,
0,111,0,112,0,
83,0,116,0,97,
0,116,0,101,0,
109,0,101,0,110,
0,116,0,95,0,
52,0,1,192,1,
3,1,4,1,3,
1489,22,1,55,1,
223,1490,17,1491,15,
1096,1,-1,1,5,
1492,20,1493,4,36,
66,0,105,0,110,
0,97,0,114,0,
121,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,95,0,55,
0,1,246,1,3,
1,4,1,3,1494,
22,1,109,1,1626,
1495,17,1496,15,1299,
1,-1,1,5,1497,
20,1498,4,24,65,
0,115,0,115,0,
105,0,103,0,110,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,193,
1,3,1,4,1,
3,1499,22,1,56,
1,1229,1500,17,1501,
15,1068,1,-1,1,
5,1502,20,1503,4,
36,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
57,0,1,203,1,
3,1,6,1,5,
1504,22,1,66,1,
477,1505,17,1506,15,
1507,4,18,37,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,-1,1,5,
1508,20,1509,4,20,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,51,0,
1,223,1,3,1,
2,1,1,1510,22,
1,86,1,478,1511,
17,1512,15,1507,1,
-1,1,5,1513,20,
1514,4,20,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,95,
0,50,0,1,222,
1,3,1,2,1,
1,1515,22,1,85,
1,1483,1516,17,1517,
15,1068,1,-1,1,
5,1518,20,1519,4,
36,83,0,105,0,
109,0,112,0,108,
0,101,0,65,0,
115,0,115,0,105,
0,103,0,110,0,
109,0,101,0,110,
0,116,0,95,0,
50,0,1,196,1,
3,1,4,1,3,
1520,22,1,59,1,
1735,1521,16,0,211,
1,1987,892,1,1988,
1522,16,0,579,1,
476,1523,17,1524,15,
1507,1,-1,1,5,
1525,20,1526,4,20,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,95,0,52,0,
1,224,1,3,1,
2,1,1,1527,22,
1,87,1,242,1528,
17,1529,15,1096,1,
-1,1,5,1530,20,
1531,4,36,66,0,
105,0,110,0,97,
0,114,0,121,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,54,0,1,
245,1,3,1,4,
1,3,1532,22,1,
108,1,479,1533,17,
1534,15,1507,1,-1,
1,5,1535,20,1536,
4,20,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,95,0,
49,0,1,221,1,
3,1,2,1,1,
1537,22,1,84,1,
480,1538,17,1539,15,
1540,4,26,37,0,
76,0,105,0,115,
0,116,0,67,0,
111,0,110,0,115,
0,116,0,97,0,
110,0,116,0,1,
-1,1,5,1541,20,
1542,4,28,76,0,
105,0,115,0,116,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,95,0,49,
0,1,225,1,3,
1,4,1,3,1543,
22,1,88,1,1001,
1544,17,1545,15,1194,
1,-1,1,5,1546,
20,1547,4,40,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
95,0,56,0,1,
269,1,3,1,5,
1,4,1548,22,1,
132,1,1002,1549,17,
1550,15,1194,1,-1,
1,5,1551,20,1552,
4,40,84,0,121,
0,112,0,101,0,
99,0,97,0,115,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,95,0,
49,0,1,262,1,
3,1,5,1,4,
1553,22,1,125,1,
12,1554,19,157,1,
12,1555,5,41,1,
2072,1556,16,0,155,
1,1858,816,1,2410,
1557,16,0,155,1,
2195,1558,16,0,155,
1,2307,1559,16,0,
155,1,1655,843,1,
1987,892,1,1988,1560,
16,0,155,1,1773,
1561,16,0,155,1,
31,1562,16,0,155,
1,32,1563,16,0,
155,1,2356,806,1,
2543,1564,16,0,155,
1,2224,882,1,1899,
1565,16,0,155,1,
2452,1566,16,0,474,
1,1800,852,1,2019,
704,1,1802,1567,16,
0,155,1,2133,834,
1,2352,793,1,2353,
799,1,2027,711,1,
2028,717,1,2029,722,
1,2030,727,1,2358,
811,1,2033,738,1,
2035,744,1,2363,1568,
16,0,267,1,2037,
749,1,1929,865,1,
2039,754,1,1871,827,
1,2041,760,1,2042,
765,1,2031,732,1,
1572,778,1,2102,858,
1,2103,1569,16,0,
155,1,1956,1570,16,
0,155,1,13,1571,
19,252,1,13,1572,
5,33,1,1858,816,
1,2412,1573,17,1574,
15,1575,4,22,37,
0,83,0,116,0,
97,0,116,0,101,
0,69,0,118,0,
101,0,110,0,116,
0,1,-1,1,5,
1576,20,1577,4,24,
83,0,116,0,97,
0,116,0,101,0,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,1,
156,1,3,1,6,
1,5,1578,22,1,
17,1,2414,1579,16,
0,396,1,2307,1580,
16,0,250,1,1655,
843,1,2029,722,1,
1987,892,1,2102,858,
1,32,1581,16,0,
452,1,2224,882,1,
2031,732,1,2449,1582,
17,1583,15,1584,4,
20,37,0,83,0,
116,0,97,0,116,
0,101,0,66,0,
111,0,100,0,121,
0,1,-1,1,5,
1585,20,1586,4,22,
83,0,116,0,97,
0,116,0,101,0,
66,0,111,0,100,
0,121,0,95,0,
50,0,1,155,1,
3,1,3,1,2,
1587,22,1,16,1,
2451,1588,17,1589,15,
1584,1,-1,1,5,
1590,20,1591,4,22,
83,0,116,0,97,
0,116,0,101,0,
66,0,111,0,100,
0,121,0,95,0,
49,0,1,154,1,
3,1,2,1,1,
1592,22,1,15,1,
1800,852,1,2019,704,
1,2133,834,1,2352,
793,1,2353,799,1,
2027,711,1,2028,717,
1,2356,806,1,2030,
727,1,2358,811,1,
2033,738,1,2035,744,
1,2037,749,1,1929,
865,1,2039,754,1,
1871,827,1,2041,760,
1,2042,765,1,2488,
1593,16,0,460,1,
1572,778,1,14,1594,
19,144,1,14,1595,
5,103,1,1258,1066,
1,1512,1072,1,1011,
1077,1,9,1083,1,
10,1596,17,1597,15,
1598,4,48,37,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,1,-1,1,5,
140,1,0,1,0,
1599,22,1,18,1,
262,1094,1,1663,1465,
1,1519,1187,1,1771,
1600,16,0,145,1,
1193,1433,1,19,1118,
1,20,1601,16,0,
142,1,2532,1602,17,
1603,15,1598,1,-1,
1,5,140,1,0,
1,0,1599,1,477,
1505,1,30,1604,17,
1605,15,1598,1,-1,
1,5,1606,20,1607,
4,50,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
76,0,105,0,115,
0,116,0,95,0,
50,0,1,158,1,
3,1,4,1,3,
1608,22,1,20,1,
2541,1609,16,0,142,
1,283,1141,1,1294,
1125,1,40,1130,1,
41,1610,17,1611,15,
1612,4,26,37,0,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,1,
-1,1,5,601,1,
0,1,0,1613,22,
1,135,1,42,1614,
17,1615,15,1616,4,
38,37,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,1,
-1,1,5,1617,20,
1618,4,40,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,1,274,
1,3,1,2,1,
1,1619,22,1,138,
1,44,1146,1,1301,
1148,1,47,1153,1,
48,1171,1,49,1160,
1,50,1166,1,1265,
1089,1,305,1199,1,
51,1176,1,525,1181,
1,63,1192,1,66,
1204,1,67,1209,1,
68,1214,1,69,1219,
1,70,1224,1,74,
1229,1,1330,1234,1,
1046,1292,1,328,1239,
1,82,1250,1,1339,
1262,1,1092,1620,16,
0,603,1,1094,1267,
1,2278,1273,1,93,
1281,1,352,1304,1,
2361,1621,17,1622,15,
1598,1,-1,1,5,
1623,20,1624,4,50,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,68,0,101,0,
99,0,108,0,97,
0,114,0,97,0,
116,0,105,0,111,
0,110,0,76,0,
105,0,115,0,116,
0,95,0,49,0,
1,157,1,3,1,
2,1,1,1625,22,
1,19,1,107,1286,
1,1112,1291,1,1368,
1455,1,1121,1309,1,
118,1314,1,1375,1319,
1,373,1324,1,375,
1329,1,377,1335,1,
379,1372,1,380,1345,
1,883,1351,1,371,
1361,1,130,1367,1,
2399,1626,17,1627,15,
1598,1,-1,1,5,
140,1,0,1,0,
1599,1,1548,1136,1,
143,1378,1,1150,1383,
1,1404,1389,1,387,
1628,16,0,565,1,
1157,1394,1,827,1340,
1,1411,1399,1,157,
1404,1,412,1629,16,
0,576,1,172,1411,
1,1186,1416,1,1440,
1421,1,1692,1630,16,
0,145,1,188,1428,
1,942,1475,1,1447,
1438,1,1699,1443,1,
447,1448,1,437,1631,
16,0,639,1,205,
1460,1,459,1632,17,
1633,15,1612,1,-1,
1,5,601,1,0,
1,0,1613,1,461,
1634,16,0,603,1,
464,1635,17,1636,15,
1612,1,-1,1,5,
1637,20,1638,4,28,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,50,0,1,273,
1,3,1,4,1,
3,1639,22,1,137,
1,1222,1470,1,1476,
1480,1,1728,1485,1,
223,1490,1,1229,1500,
1,2408,1640,16,0,
142,1,478,1511,1,
1483,1516,1,480,1538,
1,481,1641,17,1642,
15,1612,1,-1,1,
5,1643,20,1644,4,
28,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,76,0,105,
0,115,0,116,0,
95,0,49,0,1,
272,1,3,1,2,
1,1,1645,22,1,
136,1,476,1523,1,
242,1528,1,479,1533,
1,1001,1544,1,1002,
1549,1,15,1646,19,
361,1,15,1647,5,
6,1,1112,1648,16,
0,359,1,1619,1649,
16,0,638,1,2547,
1650,16,0,490,1,
40,1651,16,0,561,
1,19,1118,1,9,
1083,1,16,1652,19,
136,1,16,1653,5,
134,1,1259,1654,16,
0,183,1,256,1655,
16,0,183,1,2195,
1656,16,0,183,1,
1513,1657,16,0,183,
1,9,1658,16,0,
134,1,2133,834,1,
1956,1659,16,0,183,
1,2370,1660,17,1661,
15,1662,4,12,37,
0,69,0,118,0,
101,0,110,0,116,
0,1,-1,1,5,
1663,20,1664,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,56,
0,1,309,1,3,
1,2,1,1,1665,
22,1,173,1,2531,
1666,16,0,475,1,
1773,1667,16,0,183,
1,2027,711,1,2028,
717,1,2029,722,1,
2030,727,1,2031,732,
1,509,1668,16,0,
183,1,2033,738,1,
277,1669,16,0,183,
1,2035,744,1,2037,
749,1,2039,754,1,
32,1670,16,0,183,
1,2041,760,1,2042,
765,1,2548,1671,16,
0,183,1,40,1672,
16,0,165,1,41,
1673,16,0,183,1,
43,1674,16,0,183,
1,44,1675,16,0,
165,1,1802,1676,16,
0,183,1,2307,1677,
16,0,183,1,52,
1678,16,0,183,1,
299,1679,16,0,183,
1,62,1680,16,0,
198,1,63,1681,16,
0,165,1,2072,1682,
16,0,183,1,1572,
778,1,71,1683,16,
0,183,1,1831,1684,
16,0,332,1,1832,
1685,16,0,183,1,
76,1686,16,0,183,
1,1583,1687,16,0,
183,1,1333,1688,16,
0,183,1,79,1689,
16,0,183,1,1295,
1690,16,0,183,1,
322,1691,16,0,183,
1,85,1692,16,0,
183,1,89,1693,16,
0,183,1,2352,793,
1,2353,799,1,346,
1694,16,0,183,1,
2356,806,1,2358,811,
1,1800,852,1,97,
1695,16,0,183,1,
2365,1696,17,1697,15,
1662,1,-1,1,5,
1698,20,1699,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,51,0,51,
0,1,314,1,3,
1,2,1,1,1700,
22,1,178,1,2366,
1701,17,1702,15,1662,
1,-1,1,5,1703,
20,1704,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,51,0,50,0,
1,313,1,3,1,
2,1,1,1705,22,
1,177,1,2367,1706,
17,1707,15,1662,1,
-1,1,5,1708,20,
1709,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
51,0,49,0,1,
312,1,3,1,2,
1,1,1710,22,1,
176,1,2368,1711,17,
1712,15,1662,1,-1,
1,5,1713,20,1714,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,51,
0,48,0,1,311,
1,3,1,2,1,
1,1715,22,1,175,
1,2369,1716,17,1717,
15,1662,1,-1,1,
5,1718,20,1719,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,50,0,
57,0,1,310,1,
3,1,2,1,1,
1720,22,1,174,1,
1115,1721,16,0,183,
1,112,1722,16,0,
183,1,2372,1723,17,
1724,15,1662,1,-1,
1,5,1725,20,1726,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,50,
0,54,0,1,307,
1,3,1,2,1,
1,1727,22,1,171,
1,1871,827,1,2374,
1728,17,1729,15,1662,
1,-1,1,5,1730,
20,1731,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,52,0,
1,305,1,3,1,
2,1,1,1732,22,
1,169,1,1873,1733,
16,0,376,1,1874,
1734,16,0,183,1,
2377,1735,17,1736,15,
1662,1,-1,1,5,
1737,20,1738,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,49,
0,1,302,1,3,
1,2,1,1,1739,
22,1,166,1,2378,
1740,17,1741,15,1662,
1,-1,1,5,1742,
20,1743,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,48,0,
1,301,1,3,1,
2,1,1,1744,22,
1,165,1,2379,1745,
17,1746,15,1662,1,
-1,1,5,1747,20,
1748,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,57,0,1,
300,1,3,1,2,
1,1,1749,22,1,
164,1,2380,1750,17,
1751,15,1662,1,-1,
1,5,1752,20,1753,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,56,0,1,299,
1,3,1,2,1,
1,1754,22,1,163,
1,102,1755,16,0,
183,1,2382,1756,17,
1757,15,1662,1,-1,
1,5,1758,20,1759,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,54,0,1,297,
1,3,1,2,1,
1,1760,22,1,161,
1,124,1761,16,0,
183,1,2384,1762,17,
1763,15,1662,1,-1,
1,5,1764,20,1765,
4,16,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,52,0,1,295,
1,3,1,2,1,
1,1766,22,1,159,
1,2385,1767,17,1768,
15,1662,1,-1,1,
5,1769,20,1770,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,49,0,
51,0,1,294,1,
3,1,2,1,1,
1771,22,1,158,1,
2386,1772,17,1773,15,
1662,1,-1,1,5,
1774,20,1775,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,49,0,50,
0,1,293,1,3,
1,2,1,1,1776,
22,1,157,1,2387,
1777,17,1778,15,1662,
1,-1,1,5,1779,
20,1780,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,49,0,49,0,
1,292,1,3,1,
2,1,1,1781,22,
1,156,1,2388,1782,
17,1783,15,1662,1,
-1,1,5,1784,20,
1785,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,48,0,1,
291,1,3,1,2,
1,1,1786,22,1,
155,1,2389,1787,17,
1788,15,1662,1,-1,
1,5,1789,20,1790,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,57,
0,1,290,1,3,
1,2,1,1,1791,
22,1,154,1,2390,
1792,17,1793,15,1662,
1,-1,1,5,1794,
20,1795,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,56,0,1,289,
1,3,1,2,1,
1,1796,22,1,153,
1,2391,1797,17,1798,
15,1662,1,-1,1,
5,1799,20,1800,4,
14,69,0,118,0,
101,0,110,0,116,
0,95,0,55,0,
1,288,1,3,1,
2,1,1,1801,22,
1,152,1,2392,1802,
17,1803,15,1662,1,
-1,1,5,1804,20,
1805,4,14,69,0,
118,0,101,0,110,
0,116,0,95,0,
54,0,1,287,1,
3,1,2,1,1,
1806,22,1,151,1,
2393,1807,17,1808,15,
1662,1,-1,1,5,
1809,20,1810,4,14,
69,0,118,0,101,
0,110,0,116,0,
95,0,53,0,1,
286,1,3,1,2,
1,1,1811,22,1,
150,1,2394,1812,17,
1813,15,1662,1,-1,
1,5,1814,20,1815,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,52,
0,1,285,1,3,
1,2,1,1,1816,
22,1,149,1,2395,
1817,17,1818,15,1662,
1,-1,1,5,1819,
20,1820,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,51,0,1,284,
1,3,1,2,1,
1,1821,22,1,148,
1,137,1822,16,0,
183,1,2397,1823,17,
1824,15,1662,1,-1,
1,5,1825,20,1826,
4,14,69,0,118,
0,101,0,110,0,
116,0,95,0,49,
0,1,282,1,3,
1,2,1,1,1827,
22,1,146,1,2398,
1828,16,0,356,1,
2019,704,1,1899,1829,
16,0,183,1,381,
1830,16,0,183,1,
1151,1831,16,0,183,
1,525,1832,16,0,
183,1,1405,1833,16,
0,183,1,151,1834,
16,0,183,1,406,
1835,16,0,183,1,
1369,1836,16,0,183,
1,1858,816,1,2103,
1837,16,0,183,1,
166,1838,16,0,183,
1,1929,865,1,1930,
1839,16,0,439,1,
1931,1840,16,0,183,
1,431,1841,16,0,
183,1,182,1842,16,
0,183,1,1187,1843,
16,0,183,1,1441,
1844,16,0,183,1,
1693,1845,16,0,183,
1,2371,1846,17,1847,
15,1662,1,-1,1,
5,1848,20,1849,4,
16,69,0,118,0,
101,0,110,0,116,
0,95,0,50,0,
55,0,1,308,1,
3,1,2,1,1,
1850,22,1,172,1,
2373,1851,17,1852,15,
1662,1,-1,1,5,
1853,20,1854,4,16,
69,0,118,0,101,
0,110,0,116,0,
95,0,50,0,53,
0,1,306,1,3,
1,2,1,1,1855,
22,1,170,1,2375,
1856,17,1857,15,1662,
1,-1,1,5,1858,
20,1859,4,16,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,51,0,
1,304,1,3,1,
2,1,1,1860,22,
1,168,1,2376,1861,
17,1862,15,1662,1,
-1,1,5,1863,20,
1864,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
50,0,50,0,1,
303,1,3,1,2,
1,1,1865,22,1,
167,1,447,1866,16,
0,183,1,2381,1867,
17,1868,15,1662,1,
-1,1,5,1869,20,
1870,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,55,0,1,
298,1,3,1,2,
1,1,1871,22,1,
162,1,199,1872,16,
0,183,1,2383,1873,
17,1874,15,1662,1,
-1,1,5,1875,20,
1876,4,16,69,0,
118,0,101,0,110,
0,116,0,95,0,
49,0,53,0,1,
296,1,3,1,2,
1,1,1877,22,1,
160,1,1655,843,1,
1656,1878,16,0,655,
1,1657,1879,16,0,
183,1,459,1880,16,
0,183,1,462,1881,
16,0,183,1,2396,
1882,17,1883,15,1662,
1,-1,1,5,1884,
20,1885,4,14,69,
0,118,0,101,0,
110,0,116,0,95,
0,50,0,1,283,
1,3,1,2,1,
1,1886,22,1,147,
1,2224,882,1,217,
1887,16,0,183,1,
1620,1888,16,0,183,
1,1223,1889,16,0,
183,1,1477,1890,16,
0,183,1,1729,1891,
16,0,183,1,2102,
858,1,1987,892,1,
1988,1892,16,0,183,
1,236,1893,16,0,
183,1,1754,1894,16,
0,183,1,17,1895,
19,154,1,17,1896,
5,114,1,1,1897,
17,1898,15,1899,4,
18,37,0,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,1,
-1,1,5,1900,20,
1901,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,55,0,1,281,
1,3,1,2,1,
1,1902,22,1,145,
1,2,1903,17,1904,
15,1899,1,-1,1,
5,1905,20,1906,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,54,
0,1,280,1,3,
1,2,1,1,1907,
22,1,144,1,3,
1908,17,1909,15,1899,
1,-1,1,5,1910,
20,1911,4,20,84,
0,121,0,112,0,
101,0,110,0,97,
0,109,0,101,0,
95,0,53,0,1,
279,1,3,1,2,
1,1,1912,22,1,
143,1,4,1913,17,
1914,15,1899,1,-1,
1,5,1915,20,1916,
4,20,84,0,121,
0,112,0,101,0,
110,0,97,0,109,
0,101,0,95,0,
52,0,1,278,1,
3,1,2,1,1,
1917,22,1,142,1,
5,1918,17,1919,15,
1899,1,-1,1,5,
1920,20,1921,4,20,
84,0,121,0,112,
0,101,0,110,0,
97,0,109,0,101,
0,95,0,51,0,
1,277,1,3,1,
2,1,1,1922,22,
1,141,1,6,1923,
17,1924,15,1899,1,
-1,1,5,1925,20,
1926,4,20,84,0,
121,0,112,0,101,
0,110,0,97,0,
109,0,101,0,95,
0,50,0,1,276,
1,3,1,2,1,
1,1927,22,1,140,
1,7,1928,17,1929,
15,1899,1,-1,1,
5,1930,20,1931,4,
20,84,0,121,0,
112,0,101,0,110,
0,97,0,109,0,
101,0,95,0,49,
0,1,275,1,3,
1,2,1,1,1932,
22,1,139,1,9,
1083,1,10,1596,1,
262,1094,1,1519,1187,
1,1771,1933,16,0,
447,1,19,1118,1,
20,1934,16,0,152,
1,2532,1602,1,477,
1505,1,30,1604,1,
2541,1935,16,0,481,
1,283,1141,1,1294,
1125,1,40,1130,1,
41,1610,1,42,1614,
1,44,1146,1,1301,
1148,1,47,1153,1,
48,1171,1,49,1160,
1,50,1166,1,1265,
1089,1,305,1199,1,
1512,1072,1,51,1176,
1,525,1181,1,61,
1936,16,0,189,1,
63,1192,1,66,1204,
1,67,1209,1,68,
1214,1,69,1219,1,
70,1224,1,1010,1937,
16,0,588,1,73,
1938,16,0,201,1,
74,1229,1,1330,1234,
1,1046,1292,1,328,
1239,1,1838,1939,16,
0,366,1,82,1250,
1,1339,1262,1,1258,
1066,1,1092,1940,16,
0,650,1,1094,1267,
1,2278,1273,1,93,
1281,1,352,1304,1,
2361,1621,1,1011,1077,
1,107,1286,1,1112,
1291,1,1869,1941,16,
0,373,1,1368,1455,
1,1121,1309,1,118,
1314,1,1375,1319,1,
373,1324,1,1880,1942,
16,0,405,1,375,
1329,1,377,1335,1,
827,1340,1,380,1345,
1,883,1351,1,371,
1361,1,130,1367,1,
2399,1626,1,379,1372,
1,1548,1136,1,143,
1378,1,1150,1383,1,
1404,1389,1,1157,1394,
1,1411,1399,1,157,
1404,1,172,1411,1,
1937,1943,16,0,454,
1,1186,1416,1,1440,
1421,1,2194,1944,16,
0,646,1,188,1428,
1,1193,1433,1,1447,
1438,1,1699,1443,1,
2071,1945,16,0,563,
1,447,1448,1,205,
1460,1,459,1632,1,
1663,1465,1,464,1635,
1,1222,1470,1,942,
1475,1,1476,1480,1,
1728,1485,1,223,1490,
1,1229,1500,1,2408,
1946,16,0,496,1,
478,1511,1,1483,1516,
1,480,1538,1,481,
1641,1,476,1523,1,
242,1528,1,479,1533,
1,1001,1544,1,1002,
1549,1,18,1947,19,
501,1,18,1948,5,
82,1,1010,1949,16,
0,499,1,1011,1077,
1,1265,1950,16,0,
499,1,262,1094,1,
1519,1951,16,0,499,
1,1193,1952,16,0,
499,1,525,1181,1,
1483,1953,16,0,499,
1,515,1954,16,0,
499,1,283,1141,1,
1735,1955,16,0,499,
1,40,1130,1,42,
1956,16,0,499,1,
2554,1957,16,0,499,
1,1301,1958,16,0,
499,1,1553,1959,16,
0,499,1,48,1171,
1,49,1160,1,44,
1146,1,51,1176,1,
47,1153,1,305,1199,
1,50,1166,1,63,
1192,1,66,1204,1,
67,1209,1,68,1214,
1,69,1219,1,70,
1224,1,73,1960,16,
0,499,1,74,1229,
1,1046,1961,16,0,
499,1,328,1239,1,
1838,1962,16,0,499,
1,82,1963,16,0,
499,1,1589,1964,16,
0,499,1,1339,1965,
16,0,499,1,1094,
1267,1,93,1281,1,
352,1304,1,107,1966,
16,0,499,1,1112,
1291,1,1121,1967,16,
0,499,1,118,1968,
16,0,499,1,1375,
1969,16,0,499,1,
373,1324,1,1880,1970,
16,0,499,1,375,
1329,1,377,1335,1,
379,1372,1,380,1345,
1,883,1971,16,0,
499,1,371,1361,1,
130,1972,16,0,499,
1,143,1973,16,0,
499,1,387,1974,16,
0,499,1,1157,1975,
16,0,499,1,827,
1976,16,0,499,1,
1411,1977,16,0,499,
1,1663,1978,16,0,
499,1,412,1979,16,
0,499,1,157,1980,
16,0,499,1,172,
1981,16,0,499,1,
1937,1982,16,0,499,
1,437,1983,16,0,
499,1,188,1984,16,
0,499,1,942,1985,
16,0,499,1,1447,
1986,16,0,499,1,
1699,1987,16,0,499,
1,447,1448,1,205,
1988,16,0,499,1,
223,1989,16,0,499,
1,1626,1990,16,0,
499,1,1229,1991,16,
0,499,1,477,1505,
1,478,1511,1,479,
1533,1,480,1538,1,
476,1523,1,242,1992,
16,0,499,1,1001,
1544,1,1002,1549,1,
19,1993,19,223,1,
19,1994,5,170,1,
1259,1995,16,0,221,
1,256,1996,16,0,
221,1,1010,1997,16,
0,491,1,1513,1998,
16,0,221,1,1265,
1999,16,0,491,1,
262,1094,1,480,1538,
1,1519,2000,16,0,
491,1,1773,2001,16,
0,221,1,2027,711,
1,2028,717,1,2029,
722,1,2030,727,1,
2031,732,1,509,2002,
16,0,221,1,2033,
738,1,277,2003,16,
0,221,1,2035,744,
1,1729,2004,16,0,
221,1,2037,749,1,
1001,1544,1,2039,754,
1,32,2005,16,0,
221,1,2041,760,1,
2042,765,1,2548,2006,
16,0,221,1,40,
1130,1,41,2007,16,
0,221,1,42,2008,
16,0,491,1,43,
2009,16,0,221,1,
44,1146,1,1802,2010,
16,0,221,1,1301,
2011,16,0,491,1,
47,1153,1,2307,2012,
16,0,221,1,49,
1160,1,50,1166,1,
48,1171,1,52,2013,
16,0,221,1,51,
1176,1,299,2014,16,
0,221,1,283,1141,
1,63,1192,1,2072,
2015,16,0,221,1,
305,1199,1,66,1204,
1,67,1209,1,68,
1214,1,69,1219,1,
70,1224,1,71,2016,
16,0,221,1,73,
2017,16,0,491,1,
74,1229,1,1832,2018,
16,0,221,1,76,
2019,16,0,221,1,
328,1239,1,1333,2020,
16,0,221,1,79,
2021,16,0,221,1,
1838,2022,16,0,491,
1,82,2023,16,0,
491,1,322,2024,16,
0,221,1,1339,2025,
16,0,491,1,85,
2026,16,0,221,1,
89,2027,16,0,221,
1,1094,1267,1,93,
1281,1,2353,799,1,
346,2028,16,0,221,
1,2356,806,1,2358,
811,1,1858,816,1,
97,2029,16,0,221,
1,515,2030,16,0,
491,1,1011,1077,1,
102,2031,16,0,221,
1,1112,1291,1,1046,
2032,16,0,491,1,
1115,2033,16,0,221,
1,112,2034,16,0,
221,1,525,2035,16,
0,221,1,1871,827,
1,1121,2036,16,0,
491,1,118,2037,16,
0,491,1,1375,2038,
16,0,491,1,1572,
778,1,107,2039,16,
0,491,1,1880,2040,
16,0,491,1,124,
2041,16,0,221,1,
2554,2042,16,0,491,
1,377,1335,1,352,
1304,1,827,2043,16,
0,491,1,380,1345,
1,130,2044,16,0,
491,1,371,1361,1,
1589,2045,16,0,491,
1,373,1324,1,387,
2046,16,0,491,1,
137,2047,16,0,221,
1,2019,704,1,1899,
2048,16,0,221,1,
143,2049,16,0,491,
1,2195,2050,16,0,
221,1,1151,2051,16,
0,221,1,1655,843,
1,1405,2052,16,0,
221,1,151,2053,16,
0,221,1,1157,2054,
16,0,491,1,379,
1372,1,406,2055,16,
0,221,1,1411,2056,
16,0,491,1,157,
2057,16,0,491,1,
1369,2058,16,0,221,
1,1800,852,1,412,
2059,16,0,491,1,
2103,2060,16,0,221,
1,375,1329,1,166,
2061,16,0,221,1,
2352,793,1,381,2062,
16,0,221,1,172,
2063,16,0,491,1,
1931,2064,16,0,221,
1,1874,2065,16,0,
221,1,2102,858,1,
1583,2066,16,0,221,
1,1937,2067,16,0,
491,1,1626,2068,16,
0,491,1,182,2069,
16,0,221,1,1187,
2070,16,0,221,1,
1441,2071,16,0,221,
1,1693,2072,16,0,
221,1,188,2073,16,
0,491,1,1193,2074,
16,0,491,1,1447,
2075,16,0,491,1,
1699,2076,16,0,491,
1,431,2077,16,0,
221,1,447,2078,16,
0,221,1,1553,2079,
16,0,491,1,199,
2080,16,0,221,1,
1956,2081,16,0,221,
1,437,2082,16,0,
491,1,1657,2083,16,
0,221,1,205,2084,
16,0,491,1,1295,
2085,16,0,221,1,
1663,2086,16,0,491,
1,462,2087,16,0,
221,1,2133,834,1,
2224,882,1,217,2088,
16,0,221,1,1620,
2089,16,0,221,1,
1223,2090,16,0,221,
1,942,2091,16,0,
491,1,1477,2092,16,
0,221,1,223,2093,
16,0,491,1,459,
2094,16,0,221,1,
1229,2095,16,0,491,
1,477,1505,1,478,
1511,1,1483,2096,16,
0,491,1,1735,2097,
16,0,491,1,1987,
892,1,1988,2098,16,
0,221,1,1929,865,
1,236,2099,16,0,
221,1,476,1523,1,
242,2100,16,0,491,
1,479,1533,1,883,
2101,16,0,491,1,
1754,2102,16,0,221,
1,1002,1549,1,20,
2103,19,467,1,20,
2104,5,82,1,1010,
2105,16,0,465,1,
1011,1077,1,1265,2106,
16,0,465,1,262,
1094,1,1519,2107,16,
0,465,1,1193,2108,
16,0,465,1,525,
1181,1,1483,2109,16,
0,465,1,515,2110,
16,0,465,1,283,
1141,1,1735,2111,16,
0,465,1,40,1130,
1,42,2112,16,0,
465,1,2554,2113,16,
0,465,1,1301,2114,
16,0,465,1,1553,
2115,16,0,465,1,
48,1171,1,49,1160,
1,44,1146,1,51,
1176,1,47,1153,1,
305,1199,1,50,1166,
1,63,1192,1,66,
1204,1,67,1209,1,
68,1214,1,69,1219,
1,70,1224,1,73,
2116,16,0,465,1,
74,1229,1,1046,2117,
16,0,465,1,328,
2118,16,0,465,1,
1838,2119,16,0,465,
1,82,2120,16,0,
465,1,1589,2121,16,
0,465,1,1339,2122,
16,0,465,1,1094,
1267,1,93,1281,1,
352,2123,16,0,465,
1,107,2124,16,0,
465,1,1112,1291,1,
1121,2125,16,0,465,
1,118,2126,16,0,
465,1,1375,2127,16,
0,465,1,373,1324,
1,1880,2128,16,0,
465,1,375,1329,1,
377,1335,1,379,1372,
1,380,1345,1,883,
2129,16,0,465,1,
371,1361,1,130,2130,
16,0,465,1,143,
2131,16,0,465,1,
387,2132,16,0,465,
1,1157,2133,16,0,
465,1,827,2134,16,
0,465,1,1411,2135,
16,0,465,1,1663,
2136,16,0,465,1,
412,2137,16,0,465,
1,157,2138,16,0,
465,1,172,2139,16,
0,465,1,1937,2140,
16,0,465,1,437,
2141,16,0,465,1,
188,2142,16,0,465,
1,942,2143,16,0,
465,1,1447,2144,16,
0,465,1,1699,2145,
16,0,465,1,447,
1448,1,205,2146,16,
0,465,1,223,2147,
16,0,465,1,1626,
2148,16,0,465,1,
1229,2149,16,0,465,
1,477,1505,1,478,
1511,1,479,1533,1,
480,1538,1,476,1523,
1,242,2150,16,0,
465,1,1001,1544,1,
1002,1549,1,21,2151,
19,451,1,21,2152,
5,82,1,1010,2153,
16,0,449,1,1011,
1077,1,1265,2154,16,
0,449,1,262,1094,
1,1519,2155,16,0,
449,1,1193,2156,16,
0,449,1,525,1181,
1,1483,2157,16,0,
449,1,515,2158,16,
0,449,1,283,1141,
1,1735,2159,16,0,
449,1,40,1130,1,
42,2160,16,0,449,
1,2554,2161,16,0,
449,1,1301,2162,16,
0,449,1,1553,2163,
16,0,449,1,48,
1171,1,49,1160,1,
44,1146,1,51,1176,
1,47,1153,1,305,
1199,1,50,1166,1,
63,1192,1,66,1204,
1,67,1209,1,68,
1214,1,69,1219,1,
70,1224,1,73,2164,
16,0,449,1,74,
1229,1,1046,2165,16,
0,449,1,328,2166,
16,0,449,1,1838,
2167,16,0,449,1,
82,2168,16,0,449,
1,1589,2169,16,0,
449,1,1339,2170,16,
0,449,1,1094,1267,
1,93,1281,1,352,
2171,16,0,449,1,
107,2172,16,0,449,
1,1112,1291,1,1121,
2173,16,0,449,1,
118,2174,16,0,449,
1,1375,2175,16,0,
449,1,373,1324,1,
1880,2176,16,0,449,
1,375,1329,1,377,
1335,1,379,1372,1,
380,1345,1,883,2177,
16,0,449,1,371,
1361,1,130,2178,16,
0,449,1,143,2179,
16,0,449,1,387,
2180,16,0,449,1,
1157,2181,16,0,449,
1,827,2182,16,0,
449,1,1411,2183,16,
0,449,1,1663,2184,
16,0,449,1,412,
2185,16,0,449,1,
157,2186,16,0,449,
1,172,2187,16,0,
449,1,1937,2188,16,
0,449,1,437,2189,
16,0,449,1,188,
2190,16,0,449,1,
942,2191,16,0,449,
1,1447,2192,16,0,
449,1,1699,2193,16,
0,449,1,447,1448,
1,205,2194,16,0,
449,1,223,2195,16,
0,449,1,1626,2196,
16,0,449,1,1229,
2197,16,0,449,1,
477,1505,1,478,1511,
1,479,1533,1,480,
1538,1,476,1523,1,
242,2198,16,0,449,
1,1001,1544,1,1002,
1549,1,22,2199,19,
433,1,22,2200,5,
82,1,1010,2201,16,
0,431,1,1011,1077,
1,1265,2202,16,0,
431,1,262,1094,1,
1519,2203,16,0,431,
1,1193,2204,16,0,
431,1,525,1181,1,
1483,2205,16,0,431,
1,515,2206,16,0,
431,1,283,1141,1,
1735,2207,16,0,431,
1,40,1130,1,42,
2208,16,0,431,1,
2554,2209,16,0,431,
1,1301,2210,16,0,
431,1,1553,2211,16,
0,431,1,48,1171,
1,49,1160,1,44,
1146,1,51,1176,1,
47,1153,1,305,1199,
1,50,1166,1,63,
1192,1,66,1204,1,
67,1209,1,68,1214,
1,69,1219,1,70,
1224,1,73,2212,16,
0,431,1,74,1229,
1,1046,2213,16,0,
431,1,328,2214,16,
0,431,1,1838,2215,
16,0,431,1,82,
2216,16,0,431,1,
1589,2217,16,0,431,
1,1339,2218,16,0,
431,1,1094,1267,1,
93,1281,1,352,2219,
16,0,431,1,107,
2220,16,0,431,1,
1112,1291,1,1121,2221,
16,0,431,1,118,
2222,16,0,431,1,
1375,2223,16,0,431,
1,373,1324,1,1880,
2224,16,0,431,1,
375,1329,1,377,1335,
1,379,1372,1,380,
1345,1,883,2225,16,
0,431,1,371,1361,
1,130,2226,16,0,
431,1,143,2227,16,
0,431,1,387,2228,
16,0,431,1,1157,
2229,16,0,431,1,
827,2230,16,0,431,
1,1411,2231,16,0,
431,1,1663,2232,16,
0,431,1,412,2233,
16,0,431,1,157,
2234,16,0,431,1,
172,2235,16,0,431,
1,1937,2236,16,0,
431,1,437,2237,16,
0,431,1,188,2238,
16,0,431,1,942,
2239,16,0,431,1,
1447,2240,16,0,431,
1,1699,2241,16,0,
431,1,447,1448,1,
205,2242,16,0,431,
1,223,2243,16,0,
431,1,1626,2244,16,
0,431,1,1229,2245,
16,0,431,1,477,
1505,1,478,1511,1,
479,1533,1,480,1538,
1,476,1523,1,242,
2246,16,0,431,1,
1001,1544,1,1002,1549,
1,23,2247,19,510,
1,23,2248,5,36,
1,2072,2249,16,0,
508,1,1858,816,1,
2195,2250,16,0,508,
1,2307,2251,16,0,
508,1,1655,843,1,
2029,722,1,1987,892,
1,1988,2252,16,0,
508,1,1773,2253,16,
0,508,1,2102,858,
1,32,2254,16,0,
508,1,2224,882,1,
1899,2255,16,0,508,
1,1800,852,1,2019,
704,1,1802,2256,16,
0,508,1,2133,834,
1,2352,793,1,2353,
799,1,2027,711,1,
2028,717,1,2356,806,
1,2030,727,1,2358,
811,1,2033,738,1,
2035,744,1,2037,749,
1,1929,865,1,2039,
754,1,1871,827,1,
2041,760,1,2042,765,
1,2031,732,1,1572,
778,1,2103,2257,16,
0,508,1,1956,2258,
16,0,508,1,24,
2259,19,173,1,24,
2260,5,5,1,44,
2261,16,0,171,1,
377,2262,16,0,550,
1,40,2263,16,0,
659,1,63,2264,16,
0,192,1,373,2265,
16,0,546,1,25,
2266,19,345,1,25,
2267,5,171,1,1259,
2268,16,0,555,1,
256,2269,16,0,555,
1,1010,2270,16,0,
343,1,1513,2271,16,
0,555,1,1265,2272,
16,0,343,1,262,
1094,1,480,1538,1,
1519,2273,16,0,343,
1,1773,2274,16,0,
555,1,2027,711,1,
2028,717,1,2029,722,
1,2030,727,1,2031,
732,1,509,2275,16,
0,555,1,2033,738,
1,277,2276,16,0,
555,1,2035,744,1,
1729,2277,16,0,555,
1,2037,749,1,1001,
1544,1,2039,754,1,
32,2278,16,0,555,
1,2041,760,1,2042,
765,1,2548,2279,16,
0,555,1,40,1130,
1,41,2280,16,0,
555,1,42,2281,16,
0,343,1,43,2282,
16,0,555,1,44,
1146,1,1802,2283,16,
0,555,1,1301,2284,
16,0,343,1,47,
1153,1,2307,2285,16,
0,555,1,49,1160,
1,50,1166,1,48,
1171,1,52,2286,16,
0,555,1,51,1176,
1,299,2287,16,0,
555,1,62,2288,16,
0,555,1,63,1192,
1,2072,2289,16,0,
555,1,305,1199,1,
66,1204,1,67,1209,
1,68,1214,1,69,
1219,1,70,1224,1,
71,2290,16,0,555,
1,283,1141,1,73,
2291,16,0,343,1,
74,1229,1,1832,2292,
16,0,555,1,76,
2293,16,0,555,1,
328,1239,1,1333,2294,
16,0,555,1,79,
2295,16,0,555,1,
1838,2296,16,0,343,
1,82,2297,16,0,
343,1,322,2298,16,
0,555,1,1339,2299,
16,0,343,1,85,
2300,16,0,555,1,
89,2301,16,0,555,
1,1094,1267,1,93,
1281,1,2353,799,1,
346,2302,16,0,555,
1,2356,806,1,2358,
811,1,1858,816,1,
97,2303,16,0,555,
1,515,2304,16,0,
343,1,1011,1077,1,
102,2305,16,0,555,
1,1112,1291,1,1046,
1292,1,1115,2306,16,
0,555,1,112,2307,
16,0,555,1,525,
2308,16,0,555,1,
1871,827,1,1121,2309,
16,0,343,1,118,
1314,1,1375,2310,16,
0,343,1,1572,778,
1,107,2311,16,0,
343,1,1880,2312,16,
0,343,1,124,2313,
16,0,555,1,2554,
2314,16,0,343,1,
377,1335,1,352,1304,
1,827,2315,16,0,
343,1,380,1345,1,
130,1367,1,371,1361,
1,1589,2316,16,0,
343,1,373,1324,1,
387,2317,16,0,343,
1,137,2318,16,0,
555,1,2019,704,1,
1899,2319,16,0,555,
1,143,2320,16,0,
343,1,2195,2321,16,
0,555,1,1151,2322,
16,0,555,1,1655,
843,1,1405,2323,16,
0,555,1,151,2324,
16,0,555,1,1157,
2325,16,0,343,1,
379,1372,1,406,2326,
16,0,555,1,1411,
2327,16,0,343,1,
157,2328,16,0,343,
1,1369,2329,16,0,
555,1,1800,852,1,
412,2330,16,0,343,
1,2103,2331,16,0,
555,1,375,1329,1,
166,2332,16,0,555,
1,2352,793,1,381,
2333,16,0,555,1,
172,1411,1,1931,2334,
16,0,555,1,1874,
2335,16,0,555,1,
2102,858,1,1583,2336,
16,0,555,1,1937,
2337,16,0,343,1,
1626,2338,16,0,343,
1,182,2339,16,0,
555,1,1187,2340,16,
0,555,1,1441,2341,
16,0,555,1,1693,
2342,16,0,555,1,
188,1428,1,1193,2343,
16,0,343,1,1447,
2344,16,0,343,1,
1699,2345,16,0,343,
1,431,2346,16,0,
555,1,447,2347,16,
0,555,1,1553,2348,
16,0,343,1,199,
2349,16,0,555,1,
1956,2350,16,0,555,
1,437,2351,16,0,
343,1,1657,2352,16,
0,555,1,205,2353,
16,0,343,1,1295,
2354,16,0,555,1,
1663,2355,16,0,343,
1,462,2356,16,0,
555,1,2133,834,1,
2224,882,1,217,2357,
16,0,555,1,1620,
2358,16,0,555,1,
1223,2359,16,0,555,
1,942,1475,1,1477,
2360,16,0,555,1,
223,2361,16,0,343,
1,459,2362,16,0,
555,1,1229,2363,16,
0,343,1,477,1505,
1,478,1511,1,1483,
2364,16,0,343,1,
1735,2365,16,0,343,
1,1987,892,1,1988,
2366,16,0,555,1,
1929,865,1,236,2367,
16,0,555,1,476,
1523,1,242,2368,16,
0,343,1,479,1533,
1,883,2369,16,0,
343,1,1754,2370,16,
0,555,1,1002,1549,
1,26,2371,19,364,
1,26,2372,5,82,
1,1010,2373,16,0,
362,1,1011,1077,1,
1265,2374,16,0,362,
1,262,1094,1,1519,
2375,16,0,362,1,
1193,2376,16,0,362,
1,525,1181,1,1483,
2377,16,0,362,1,
515,2378,16,0,647,
1,283,1141,1,1735,
2379,16,0,362,1,
40,1130,1,42,2380,
16,0,362,1,2554,
2381,16,0,362,1,
1301,2382,16,0,362,
1,1553,2383,16,0,
362,1,48,1171,1,
49,1160,1,44,1146,
1,51,1176,1,47,
1153,1,305,1199,1,
50,1166,1,63,1192,
1,66,1204,1,67,
1209,1,68,1214,1,
69,1219,1,70,1224,
1,73,2384,16,0,
362,1,74,1229,1,
1046,1292,1,328,1239,
1,1838,2385,16,0,
362,1,82,2386,16,
0,362,1,1589,2387,
16,0,362,1,1339,
2388,16,0,362,1,
1094,1267,1,93,1281,
1,352,1304,1,107,
2389,16,0,362,1,
1112,1291,1,1121,2390,
16,0,362,1,118,
1314,1,1375,2391,16,
0,362,1,373,1324,
1,1880,2392,16,0,
362,1,375,1329,1,
377,1335,1,379,1372,
1,380,1345,1,883,
2393,16,0,362,1,
371,1361,1,130,1367,
1,143,2394,16,0,
362,1,387,2395,16,
0,362,1,1157,2396,
16,0,362,1,827,
2397,16,0,362,1,
1411,2398,16,0,362,
1,1663,2399,16,0,
362,1,412,2400,16,
0,362,1,157,2401,
16,0,362,1,172,
1411,1,1937,2402,16,
0,362,1,437,2403,
16,0,585,1,188,
1428,1,942,1475,1,
1447,2404,16,0,362,
1,1699,2405,16,0,
362,1,447,1448,1,
205,2406,16,0,362,
1,223,2407,16,0,
362,1,1626,2408,16,
0,362,1,1229,2409,
16,0,362,1,477,
1505,1,478,1511,1,
479,1533,1,480,1538,
1,476,1523,1,242,
2410,16,0,362,1,
1001,1544,1,1002,1549,
1,27,2411,19,596,
1,27,2412,5,91,
1,1259,2413,16,0,
594,1,256,2414,16,
0,594,1,2195,2415,
16,0,594,1,1513,
2416,16,0,594,1,
2019,704,1,1773,2417,
16,0,594,1,2027,
711,1,2028,717,1,
2029,722,1,2030,727,
1,2031,732,1,509,
2418,16,0,594,1,
2033,738,1,277,2419,
16,0,594,1,2035,
744,1,2037,749,1,
2039,754,1,32,2420,
16,0,594,1,2041,
760,1,2042,765,1,
2548,2421,16,0,594,
1,1295,2422,16,0,
594,1,41,2423,16,
0,594,1,43,2424,
16,0,594,1,1802,
2425,16,0,594,1,
2307,2426,16,0,594,
1,52,2427,16,0,
594,1,299,2428,16,
0,594,1,62,2429,
16,0,594,1,2072,
2430,16,0,594,1,
1572,778,1,71,2431,
16,0,594,1,1956,
2432,16,0,594,1,
1832,2433,16,0,594,
1,76,2434,16,0,
594,1,1583,2435,16,
0,594,1,1333,2436,
16,0,594,1,79,
2437,16,0,594,1,
322,2438,16,0,594,
1,85,2439,16,0,
594,1,89,2440,16,
0,594,1,2352,793,
1,2353,799,1,346,
2441,16,0,594,1,
2356,806,1,2358,811,
1,1858,816,1,97,
2442,16,0,594,1,
102,2443,16,0,594,
1,1115,2444,16,0,
594,1,112,2445,16,
0,594,1,525,2446,
16,0,594,1,1871,
827,1,1874,2447,16,
0,594,1,124,2448,
16,0,594,1,2133,
834,1,381,2449,16,
0,594,1,137,2450,
16,0,594,1,1899,
2451,16,0,594,1,
1151,2452,16,0,594,
1,1655,843,1,1405,
2453,16,0,594,1,
151,2454,16,0,594,
1,406,2455,16,0,
594,1,1369,2456,16,
0,594,1,1800,852,
1,2102,858,1,2103,
2457,16,0,594,1,
166,2458,16,0,594,
1,1929,865,1,1931,
2459,16,0,594,1,
431,2460,16,0,594,
1,182,2461,16,0,
594,1,1187,2462,16,
0,594,1,1441,2463,
16,0,594,1,1693,
2464,16,0,594,1,
447,2465,16,0,594,
1,199,2466,16,0,
594,1,1657,2467,16,
0,594,1,459,2468,
16,0,594,1,462,
2469,16,0,594,1,
2224,882,1,217,2470,
16,0,594,1,1620,
2471,16,0,594,1,
1223,2472,16,0,594,
1,1477,2473,16,0,
594,1,1729,2474,16,
0,594,1,1987,892,
1,1988,2475,16,0,
594,1,236,2476,16,
0,594,1,1754,2477,
16,0,594,1,28,
2478,19,628,1,28,
2479,5,59,1,328,
1239,1,1094,1267,1,
223,1490,1,118,1314,
1,883,1351,1,525,
1181,1,1001,1544,1,
130,1367,1,1112,1291,
1,459,1632,1,242,
1528,1,352,1304,1,
447,1448,1,464,1635,
1,1011,1077,1,143,
1378,1,40,1130,1,
41,1610,1,42,1614,
1,479,1533,1,44,
1146,1,481,1641,1,
373,1324,1,47,1153,
1,157,1404,1,49,
1160,1,50,1166,1,
48,1171,1,379,1372,
1,380,1345,1,51,
1176,1,476,1523,1,
371,1361,1,478,1511,
1,375,1329,1,172,
1411,1,262,1094,1,
283,1141,1,63,1192,
1,67,1209,1,68,
1214,1,69,1219,1,
66,1204,1,461,2480,
16,0,626,1,74,
1229,1,377,1335,1,
1002,1549,1,70,1224,
1,188,1428,1,82,
1250,1,305,1199,1,
477,1505,1,827,1340,
1,93,1281,1,480,
1538,1,205,1460,1,
1046,1292,1,942,1475,
1,107,1286,1,29,
2481,19,324,1,29,
2482,5,82,1,1010,
2483,16,0,322,1,
1011,1077,1,1265,2484,
16,0,322,1,262,
1094,1,1519,2485,16,
0,322,1,1193,2486,
16,0,322,1,525,
1181,1,1483,2487,16,
0,322,1,515,2488,
16,0,322,1,283,
1141,1,1735,2489,16,
0,322,1,40,1130,
1,42,2490,16,0,
322,1,2554,2491,16,
0,322,1,1301,2492,
16,0,322,1,1553,
2493,16,0,322,1,
48,1171,1,49,1160,
1,44,1146,1,51,
1176,1,47,1153,1,
305,1199,1,50,1166,
1,63,1192,1,66,
1204,1,67,1209,1,
68,1214,1,69,1219,
1,70,1224,1,73,
2494,16,0,322,1,
74,1229,1,1046,1292,
1,328,1239,1,1838,
2495,16,0,322,1,
82,2496,16,0,322,
1,1589,2497,16,0,
322,1,1339,2498,16,
0,322,1,1094,1267,
1,93,1281,1,352,
1304,1,107,2499,16,
0,322,1,1112,1291,
1,1121,2500,16,0,
322,1,118,1314,1,
1375,2501,16,0,322,
1,373,1324,1,1880,
2502,16,0,322,1,
375,1329,1,377,1335,
1,379,1372,1,380,
1345,1,883,2503,16,
0,322,1,371,1361,
1,130,1367,1,143,
1378,1,387,2504,16,
0,322,1,1157,2505,
16,0,322,1,827,
2506,16,0,322,1,
1411,2507,16,0,322,
1,1663,2508,16,0,
322,1,412,2509,16,
0,322,1,157,1404,
1,172,1411,1,1937,
2510,16,0,322,1,
437,2511,16,0,322,
1,188,1428,1,942,
1475,1,1447,2512,16,
0,322,1,1699,2513,
16,0,322,1,447,
1448,1,205,2514,16,
0,322,1,223,2515,
16,0,322,1,1626,
2516,16,0,322,1,
1229,2517,16,0,322,
1,477,1505,1,478,
1511,1,479,1533,1,
480,1538,1,476,1523,
1,242,2518,16,0,
322,1,1001,1544,1,
1002,1549,1,30,2519,
19,270,1,30,2520,
5,82,1,1010,2521,
16,0,268,1,1011,
1077,1,1265,2522,16,
0,268,1,262,1094,
1,1519,2523,16,0,
268,1,1193,2524,16,
0,268,1,525,1181,
1,1483,2525,16,0,
268,1,515,2526,16,
0,268,1,283,1141,
1,1735,2527,16,0,
268,1,40,1130,1,
42,2528,16,0,268,
1,2554,2529,16,0,
268,1,1301,2530,16,
0,268,1,1553,2531,
16,0,268,1,48,
1171,1,49,1160,1,
44,1146,1,51,1176,
1,47,1153,1,305,
1199,1,50,1166,1,
63,1192,1,66,1204,
1,67,1209,1,68,
1214,1,69,1219,1,
70,1224,1,73,2532,
16,0,268,1,74,
1229,1,1046,1292,1,
328,1239,1,1838,2533,
16,0,268,1,82,
2534,16,0,268,1,
1589,2535,16,0,268,
1,1339,2536,16,0,
268,1,1094,1267,1,
93,1281,1,352,1304,
1,107,2537,16,0,
268,1,1112,1291,1,
1121,2538,16,0,268,
1,118,1314,1,1375,
2539,16,0,268,1,
373,1324,1,1880,2540,
16,0,268,1,375,
1329,1,377,1335,1,
379,1372,1,380,1345,
1,883,2541,16,0,
268,1,371,1361,1,
130,1367,1,143,1378,
1,387,2542,16,0,
268,1,1157,2543,16,
0,268,1,827,2544,
16,0,268,1,1411,
2545,16,0,268,1,
1663,2546,16,0,268,
1,412,2547,16,0,
268,1,157,1404,1,
172,1411,1,1937,2548,
16,0,268,1,437,
2549,16,0,268,1,
188,1428,1,942,1475,
1,1447,2550,16,0,
268,1,1699,2551,16,
0,268,1,447,1448,
1,205,2552,16,0,
268,1,223,2553,16,
0,268,1,1626,2554,
16,0,268,1,1229,
2555,16,0,268,1,
477,1505,1,478,1511,
1,479,1533,1,480,
1538,1,476,1523,1,
242,2556,16,0,268,
1,1001,1544,1,1002,
1549,1,31,2557,19,
249,1,31,2558,5,
82,1,1010,2559,16,
0,247,1,1011,1077,
1,1265,2560,16,0,
247,1,262,1094,1,
1519,2561,16,0,247,
1,1193,2562,16,0,
247,1,525,1181,1,
1483,2563,16,0,247,
1,515,2564,16,0,
247,1,283,1141,1,
1735,2565,16,0,247,
1,40,1130,1,42,
2566,16,0,247,1,
2554,2567,16,0,247,
1,1301,2568,16,0,
247,1,1553,2569,16,
0,247,1,48,1171,
1,49,1160,1,44,
1146,1,51,1176,1,
47,1153,1,305,1199,
1,50,1166,1,63,
1192,1,66,1204,1,
67,1209,1,68,1214,
1,69,1219,1,70,
1224,1,73,2570,16,
0,247,1,74,1229,
1,1046,1292,1,328,
1239,1,1838,2571,16,
0,247,1,82,2572,
16,0,247,1,1589,
2573,16,0,247,1,
1339,2574,16,0,247,
1,1094,1267,1,93,
1281,1,352,1304,1,
107,2575,16,0,247,
1,1112,1291,1,1121,
2576,16,0,247,1,
118,1314,1,1375,2577,
16,0,247,1,373,
1324,1,1880,2578,16,
0,247,1,375,1329,
1,377,1335,1,379,
1372,1,380,1345,1,
883,2579,16,0,247,
1,371,1361,1,130,
1367,1,143,2580,16,
0,247,1,387,2581,
16,0,247,1,1157,
2582,16,0,247,1,
827,2583,16,0,247,
1,1411,2584,16,0,
247,1,1663,2585,16,
0,247,1,412,2586,
16,0,247,1,157,
2587,16,0,247,1,
172,1411,1,1937,2588,
16,0,247,1,437,
2589,16,0,247,1,
188,1428,1,942,1475,
1,1447,2590,16,0,
247,1,1699,2591,16,
0,247,1,447,1448,
1,205,2592,16,0,
247,1,223,2593,16,
0,247,1,1626,2594,
16,0,247,1,1229,
2595,16,0,247,1,
477,1505,1,478,1511,
1,479,1533,1,480,
1538,1,476,1523,1,
242,2596,16,0,247,
1,1001,1544,1,1002,
1549,1,32,2597,19,
242,1,32,2598,5,
82,1,1010,2599,16,
0,240,1,1011,1077,
1,1265,2600,16,0,
240,1,262,1094,1,
1519,2601,16,0,240,
1,1193,2602,16,0,
240,1,525,1181,1,
1483,2603,16,0,240,
1,515,2604,16,0,
240,1,283,1141,1,
1735,2605,16,0,240,
1,40,1130,1,42,
2606,16,0,240,1,
2554,2607,16,0,240,
1,1301,2608,16,0,
240,1,1553,2609,16,
0,240,1,48,1171,
1,49,1160,1,44,
1146,1,51,1176,1,
47,1153,1,305,1199,
1,50,1166,1,63,
1192,1,66,1204,1,
67,1209,1,68,1214,
1,69,1219,1,70,
1224,1,73,2610,16,
0,240,1,74,1229,
1,1046,1292,1,328,
1239,1,1838,2611,16,
0,240,1,82,2612,
16,0,240,1,1589,
2613,16,0,240,1,
1339,2614,16,0,240,
1,1094,1267,1,93,
1281,1,352,1304,1,
107,2615,16,0,240,
1,1112,1291,1,1121,
2616,16,0,240,1,
118,1314,1,1375,2617,
16,0,240,1,373,
1324,1,1880,2618,16,
0,240,1,375,1329,
1,377,1335,1,379,
1372,1,380,1345,1,
883,2619,16,0,240,
1,371,1361,1,130,
1367,1,143,2620,16,
0,240,1,387,2621,
16,0,240,1,1157,
2622,16,0,240,1,
827,2623,16,0,240,
1,1411,2624,16,0,
240,1,1663,2625,16,
0,240,1,412,2626,
16,0,240,1,157,
2627,16,0,240,1,
172,1411,1,1937,2628,
16,0,240,1,437,
2629,16,0,240,1,
188,1428,1,942,1475,
1,1447,2630,16,0,
240,1,1699,2631,16,
0,240,1,447,1448,
1,205,2632,16,0,
240,1,223,2633,16,
0,240,1,1626,2634,
16,0,240,1,1229,
2635,16,0,240,1,
477,1505,1,478,1511,
1,479,1533,1,480,
1538,1,476,1523,1,
242,2636,16,0,240,
1,1001,1544,1,1002,
1549,1,33,2637,19,
418,1,33,2638,5,
82,1,1010,2639,16,
0,416,1,1011,1077,
1,1265,2640,16,0,
416,1,262,1094,1,
1519,2641,16,0,416,
1,1193,2642,16,0,
416,1,525,1181,1,
1483,2643,16,0,416,
1,515,2644,16,0,
416,1,283,1141,1,
1735,2645,16,0,416,
1,40,1130,1,42,
2646,16,0,416,1,
2554,2647,16,0,416,
1,1301,2648,16,0,
416,1,1553,2649,16,
0,416,1,48,1171,
1,49,1160,1,44,
1146,1,51,1176,1,
47,1153,1,305,1199,
1,50,1166,1,63,
1192,1,66,1204,1,
67,1209,1,68,1214,
1,69,1219,1,70,
1224,1,73,2650,16,
0,416,1,74,1229,
1,1046,1292,1,328,
1239,1,1838,2651,16,
0,416,1,82,2652,
16,0,416,1,1589,
2653,16,0,416,1,
1339,2654,16,0,416,
1,1094,1267,1,93,
1281,1,352,1304,1,
107,2655,16,0,416,
1,1112,1291,1,1121,
2656,16,0,416,1,
118,1314,1,1375,2657,
16,0,416,1,373,
1324,1,1880,2658,16,
0,416,1,375,1329,
1,377,1335,1,379,
1372,1,380,1345,1,
883,2659,16,0,416,
1,371,1361,1,130,
1367,1,143,1378,1,
387,2660,16,0,416,
1,1157,2661,16,0,
416,1,827,2662,16,
0,416,1,1411,2663,
16,0,416,1,1663,
2664,16,0,416,1,
412,2665,16,0,416,
1,157,1404,1,172,
1411,1,1937,2666,16,
0,416,1,437,2667,
16,0,416,1,188,
1428,1,942,1475,1,
1447,2668,16,0,416,
1,1699,2669,16,0,
416,1,447,1448,1,
205,2670,16,0,416,
1,223,2671,16,0,
416,1,1626,2672,16,
0,416,1,1229,2673,
16,0,416,1,477,
1505,1,478,1511,1,
479,1533,1,480,1538,
1,476,1523,1,242,
1528,1,1001,1544,1,
1002,1549,1,34,2674,
19,388,1,34,2675,
5,82,1,1010,2676,
16,0,386,1,1011,
1077,1,1265,2677,16,
0,386,1,262,1094,
1,1519,2678,16,0,
386,1,1193,2679,16,
0,386,1,525,1181,
1,1483,2680,16,0,
386,1,515,2681,16,
0,386,1,283,1141,
1,1735,2682,16,0,
386,1,40,1130,1,
42,2683,16,0,386,
1,2554,2684,16,0,
386,1,1301,2685,16,
0,386,1,1553,2686,
16,0,386,1,48,
1171,1,49,1160,1,
44,1146,1,51,1176,
1,47,1153,1,305,
1199,1,50,1166,1,
63,1192,1,66,1204,
1,67,1209,1,68,
1214,1,69,1219,1,
70,1224,1,73,2687,
16,0,386,1,74,
1229,1,1046,1292,1,
328,1239,1,1838,2688,
16,0,386,1,82,
2689,16,0,386,1,
1589,2690,16,0,386,
1,1339,2691,16,0,
386,1,1094,1267,1,
93,1281,1,352,1304,
1,107,2692,16,0,
386,1,1112,1291,1,
1121,2693,16,0,386,
1,118,1314,1,1375,
2694,16,0,386,1,
373,1324,1,1880,2695,
16,0,386,1,375,
1329,1,377,1335,1,
379,1372,1,380,1345,
1,883,2696,16,0,
386,1,371,1361,1,
130,1367,1,143,1378,
1,387,2697,16,0,
386,1,1157,2698,16,
0,386,1,827,2699,
16,0,386,1,1411,
2700,16,0,386,1,
1663,2701,16,0,386,
1,412,2702,16,0,
386,1,157,1404,1,
172,1411,1,1937,2703,
16,0,386,1,437,
2704,16,0,386,1,
188,1428,1,942,1475,
1,1447,2705,16,0,
386,1,1699,2706,16,
0,386,1,447,1448,
1,205,1460,1,223,
1490,1,1626,2707,16,
0,386,1,1229,2708,
16,0,386,1,477,
1505,1,478,1511,1,
479,1533,1,480,1538,
1,476,1523,1,242,
1528,1,1001,1544,1,
1002,1549,1,35,2709,
19,380,1,35,2710,
5,82,1,1010,2711,
16,0,378,1,1011,
1077,1,1265,2712,16,
0,378,1,262,1094,
1,1519,2713,16,0,
378,1,1193,2714,16,
0,378,1,525,1181,
1,1483,2715,16,0,
378,1,515,2716,16,
0,378,1,283,1141,
1,1735,2717,16,0,
378,1,40,1130,1,
42,2718,16,0,378,
1,2554,2719,16,0,
378,1,1301,2720,16,
0,378,1,1553,2721,
16,0,378,1,48,
1171,1,49,1160,1,
44,1146,1,51,1176,
1,47,1153,1,305,
1199,1,50,1166,1,
63,1192,1,66,1204,
1,67,1209,1,68,
1214,1,69,1219,1,
70,1224,1,73,2722,
16,0,378,1,74,
1229,1,1046,1292,1,
328,1239,1,1838,2723,
16,0,378,1,82,
2724,16,0,378,1,
1589,2725,16,0,378,
1,1339,2726,16,0,
378,1,1094,1267,1,
93,1281,1,352,1304,
1,107,2727,16,0,
378,1,1112,1291,1,
1121,2728,16,0,378,
1,118,1314,1,1375,
2729,16,0,378,1,
373,1324,1,1880,2730,
16,0,378,1,375,
1329,1,377,1335,1,
379,1372,1,380,1345,
1,883,2731,16,0,
378,1,371,1361,1,
130,1367,1,143,1378,
1,387,2732,16,0,
378,1,1157,2733,16,
0,378,1,827,2734,
16,0,378,1,1411,
2735,16,0,378,1,
1663,2736,16,0,378,
1,412,2737,16,0,
378,1,157,1404,1,
172,1411,1,1937,2738,
16,0,378,1,437,
2739,16,0,378,1,
188,1428,1,942,1475,
1,1447,2740,16,0,
378,1,1699,2741,16,
0,378,1,447,1448,
1,205,1460,1,223,
2742,16,0,378,1,
1626,2743,16,0,378,
1,1229,2744,16,0,
378,1,477,1505,1,
478,1511,1,479,1533,
1,480,1538,1,476,
1523,1,242,1528,1,
1001,1544,1,1002,1549,
1,36,2745,19,220,
1,36,2746,5,90,
1,1259,2747,16,0,
218,1,256,2748,16,
0,218,1,2195,2749,
16,0,218,1,1513,
2750,16,0,218,1,
2019,704,1,1773,2751,
16,0,218,1,2027,
711,1,2028,717,1,
2029,722,1,2030,727,
1,2031,732,1,509,
2752,16,0,218,1,
2033,738,1,277,2753,
16,0,218,1,2035,
744,1,2037,749,1,
2039,754,1,32,2754,
16,0,218,1,2041,
760,1,2042,765,1,
2548,2755,16,0,218,
1,1295,2756,16,0,
218,1,41,2757,16,
0,218,1,43,2758,
16,0,218,1,1802,
2759,16,0,218,1,
2307,2760,16,0,218,
1,52,2761,16,0,
218,1,299,2762,16,
0,218,1,2072,2763,
16,0,218,1,1572,
778,1,71,2764,16,
0,218,1,1956,2765,
16,0,218,1,1832,
2766,16,0,218,1,
76,2767,16,0,218,
1,1583,2768,16,0,
218,1,1333,2769,16,
0,218,1,79,2770,
16,0,218,1,322,
2771,16,0,218,1,
85,2772,16,0,218,
1,89,2773,16,0,
218,1,2352,793,1,
2353,799,1,346,2774,
16,0,218,1,2356,
806,1,2358,811,1,
1858,816,1,97,2775,
16,0,218,1,102,
2776,16,0,218,1,
1115,2777,16,0,218,
1,112,2778,16,0,
218,1,525,2779,16,
0,218,1,1871,827,
1,1874,2780,16,0,
218,1,124,2781,16,
0,218,1,2133,834,
1,381,2782,16,0,
218,1,137,2783,16,
0,218,1,1899,2784,
16,0,218,1,1151,
2785,16,0,218,1,
1655,843,1,1405,2786,
16,0,218,1,151,
2787,16,0,218,1,
406,2788,16,0,218,
1,1369,2789,16,0,
218,1,1800,852,1,
2102,858,1,2103,2790,
16,0,218,1,166,
2791,16,0,218,1,
1929,865,1,1931,2792,
16,0,218,1,431,
2793,16,0,218,1,
182,2794,16,0,218,
1,1187,2795,16,0,
218,1,1441,2796,16,
0,218,1,1693,2797,
16,0,218,1,447,
2798,16,0,218,1,
199,2799,16,0,218,
1,1657,2800,16,0,
218,1,459,2801,16,
0,218,1,462,2802,
16,0,218,1,2224,
882,1,217,2803,16,
0,218,1,1620,2804,
16,0,218,1,1223,
2805,16,0,218,1,
1477,2806,16,0,218,
1,1729,2807,16,0,
218,1,1987,892,1,
1988,2808,16,0,218,
1,236,2809,16,0,
218,1,1754,2810,16,
0,218,1,37,2811,
19,231,1,37,2812,
5,90,1,1259,2813,
16,0,229,1,256,
2814,16,0,229,1,
2195,2815,16,0,229,
1,1513,2816,16,0,
229,1,2019,704,1,
1773,2817,16,0,229,
1,2027,711,1,2028,
717,1,2029,722,1,
2030,727,1,2031,732,
1,509,2818,16,0,
229,1,2033,738,1,
277,2819,16,0,229,
1,2035,744,1,2037,
749,1,2039,754,1,
32,2820,16,0,229,
1,2041,760,1,2042,
765,1,2548,2821,16,
0,229,1,1295,2822,
16,0,229,1,41,
2823,16,0,229,1,
43,2824,16,0,229,
1,1802,2825,16,0,
229,1,2307,2826,16,
0,229,1,52,2827,
16,0,229,1,299,
2828,16,0,229,1,
2072,2829,16,0,229,
1,1572,778,1,71,
2830,16,0,229,1,
1956,2831,16,0,229,
1,1832,2832,16,0,
229,1,76,2833,16,
0,229,1,1583,2834,
16,0,229,1,1333,
2835,16,0,229,1,
79,2836,16,0,229,
1,322,2837,16,0,
229,1,85,2838,16,
0,229,1,89,2839,
16,0,229,1,2352,
793,1,2353,799,1,
346,2840,16,0,229,
1,2356,806,1,2358,
811,1,1858,816,1,
97,2841,16,0,229,
1,102,2842,16,0,
229,1,1115,2843,16,
0,229,1,112,2844,
16,0,229,1,525,
2845,16,0,229,1,
1871,827,1,1874,2846,
16,0,229,1,124,
2847,16,0,229,1,
2133,834,1,381,2848,
16,0,229,1,137,
2849,16,0,229,1,
1899,2850,16,0,229,
1,1151,2851,16,0,
229,1,1655,843,1,
1405,2852,16,0,229,
1,151,2853,16,0,
229,1,406,2854,16,
0,229,1,1369,2855,
16,0,229,1,1800,
852,1,2102,858,1,
2103,2856,16,0,229,
1,166,2857,16,0,
229,1,1929,865,1,
1931,2858,16,0,229,
1,431,2859,16,0,
229,1,182,2860,16,
0,229,1,1187,2861,
16,0,229,1,1441,
2862,16,0,229,1,
1693,2863,16,0,229,
1,447,2864,16,0,
229,1,199,2865,16,
0,229,1,1657,2866,
16,0,229,1,459,
2867,16,0,229,1,
462,2868,16,0,229,
1,2224,882,1,217,
2869,16,0,229,1,
1620,2870,16,0,229,
1,1223,2871,16,0,
229,1,1477,2872,16,
0,229,1,1729,2873,
16,0,229,1,1987,
892,1,1988,2874,16,
0,229,1,236,2875,
16,0,229,1,1754,
2876,16,0,229,1,
38,2877,19,227,1,
38,2878,5,82,1,
1010,2879,16,0,225,
1,1011,1077,1,1265,
2880,16,0,225,1,
262,1094,1,1519,2881,
16,0,225,1,1193,
2882,16,0,225,1,
525,1181,1,1483,2883,
16,0,225,1,515,
2884,16,0,225,1,
283,1141,1,1735,2885,
16,0,225,1,40,
1130,1,42,2886,16,
0,225,1,2554,2887,
16,0,225,1,1301,
2888,16,0,225,1,
1553,2889,16,0,225,
1,48,1171,1,49,
1160,1,44,1146,1,
51,1176,1,47,1153,
1,305,1199,1,50,
1166,1,63,1192,1,
66,1204,1,67,1209,
1,68,1214,1,69,
1219,1,70,1224,1,
73,2890,16,0,225,
1,74,1229,1,1046,
1292,1,328,1239,1,
1838,2891,16,0,225,
1,82,2892,16,0,
225,1,1589,2893,16,
0,225,1,1339,2894,
16,0,225,1,1094,
1267,1,93,1281,1,
352,1304,1,107,2895,
16,0,225,1,1112,
1291,1,1121,2896,16,
0,225,1,118,1314,
1,1375,2897,16,0,
225,1,373,1324,1,
1880,2898,16,0,225,
1,375,1329,1,377,
1335,1,379,1372,1,
380,1345,1,883,1351,
1,371,1361,1,130,
1367,1,143,1378,1,
387,2899,16,0,225,
1,1157,2900,16,0,
225,1,827,1340,1,
1411,2901,16,0,225,
1,1663,2902,16,0,
225,1,412,2903,16,
0,225,1,157,1404,
1,172,1411,1,1937,
2904,16,0,225,1,
437,2905,16,0,225,
1,188,1428,1,942,
1475,1,1447,2906,16,
0,225,1,1699,2907,
16,0,225,1,447,
1448,1,205,1460,1,
223,1490,1,1626,2908,
16,0,225,1,1229,
2909,16,0,225,1,
477,1505,1,478,1511,
1,479,1533,1,480,
1538,1,476,1523,1,
242,1528,1,1001,1544,
1,1002,1549,1,39,
2910,19,217,1,39,
2911,5,82,1,1010,
2912,16,0,215,1,
1011,1077,1,1265,2913,
16,0,215,1,262,
1094,1,1519,2914,16,
0,215,1,1193,2915,
16,0,215,1,525,
1181,1,1483,2916,16,
0,215,1,515,2917,
16,0,215,1,283,
1141,1,1735,2918,16,
0,215,1,40,1130,
1,42,2919,16,0,
215,1,2554,2920,16,
0,215,1,1301,2921,
16,0,215,1,1553,
2922,16,0,215,1,
48,1171,1,49,1160,
1,44,1146,1,51,
1176,1,47,1153,1,
305,1199,1,50,1166,
1,63,1192,1,66,
1204,1,67,1209,1,
68,1214,1,69,1219,
1,70,1224,1,73,
2923,16,0,215,1,
74,1229,1,1046,1292,
1,328,1239,1,1838,
2924,16,0,215,1,
82,2925,16,0,215,
1,1589,2926,16,0,
215,1,1339,2927,16,
0,215,1,1094,1267,
1,93,1281,1,352,
1304,1,107,2928,16,
0,215,1,1112,1291,
1,1121,2929,16,0,
215,1,118,1314,1,
1375,2930,16,0,215,
1,373,1324,1,1880,
2931,16,0,215,1,
375,1329,1,377,1335,
1,379,1372,1,380,
1345,1,883,1351,1,
371,1361,1,130,1367,
1,143,1378,1,387,
2932,16,0,215,1,
1157,2933,16,0,215,
1,827,1340,1,1411,
2934,16,0,215,1,
1663,2935,16,0,215,
1,412,2936,16,0,
215,1,157,1404,1,
172,1411,1,1937,2937,
16,0,215,1,437,
2938,16,0,215,1,
188,1428,1,942,1475,
1,1447,2939,16,0,
215,1,1699,2940,16,
0,215,1,447,1448,
1,205,1460,1,223,
1490,1,1626,2941,16,
0,215,1,1229,2942,
16,0,215,1,477,
1505,1,478,1511,1,
479,1533,1,480,1538,
1,476,1523,1,242,
1528,1,1001,1544,1,
1002,1549,1,40,2943,
19,207,1,40,2944,
5,82,1,1010,2945,
16,0,205,1,1011,
1077,1,1265,2946,16,
0,205,1,262,1094,
1,1519,2947,16,0,
205,1,1193,2948,16,
0,205,1,525,1181,
1,1483,2949,16,0,
205,1,515,2950,16,
0,205,1,283,1141,
1,1735,2951,16,0,
205,1,40,1130,1,
42,2952,16,0,205,
1,2554,2953,16,0,
205,1,1301,2954,16,
0,205,1,1553,2955,
16,0,205,1,48,
1171,1,49,1160,1,
44,1146,1,51,1176,
1,47,1153,1,305,
1199,1,50,1166,1,
63,1192,1,66,1204,
1,67,1209,1,68,
1214,1,69,1219,1,
70,1224,1,73,2956,
16,0,205,1,74,
1229,1,1046,1292,1,
328,1239,1,1838,2957,
16,0,205,1,82,
2958,16,0,205,1,
1589,2959,16,0,205,
1,1339,2960,16,0,
205,1,1094,1267,1,
93,1281,1,352,1304,
1,107,2961,16,0,
205,1,1112,1291,1,
1121,2962,16,0,205,
1,118,2963,16,0,
205,1,1375,2964,16,
0,205,1,373,1324,
1,1880,2965,16,0,
205,1,375,1329,1,
377,1335,1,379,1372,
1,380,1345,1,883,
2966,16,0,205,1,
371,1361,1,130,2967,
16,0,205,1,143,
2968,16,0,205,1,
387,2969,16,0,205,
1,1157,2970,16,0,
205,1,827,2971,16,
0,205,1,1411,2972,
16,0,205,1,1663,
2973,16,0,205,1,
412,2974,16,0,205,
1,157,2975,16,0,
205,1,172,2976,16,
0,205,1,1937,2977,
16,0,205,1,437,
2978,16,0,205,1,
188,2979,16,0,205,
1,942,1475,1,1447,
2980,16,0,205,1,
1699,2981,16,0,205,
1,447,1448,1,205,
2982,16,0,205,1,
223,2983,16,0,205,
1,1626,2984,16,0,
205,1,1229,2985,16,
0,205,1,477,1505,
1,478,1511,1,479,
1533,1,480,1538,1,
476,1523,1,242,2986,
16,0,205,1,1001,
1544,1,1002,1549,1,
41,2987,19,169,1,
41,2988,5,82,1,
1010,2989,16,0,167,
1,1011,1077,1,1265,
2990,16,0,167,1,
262,1094,1,1519,2991,
16,0,167,1,1193,
2992,16,0,167,1,
525,1181,1,1483,2993,
16,0,167,1,515,
2994,16,0,167,1,
283,1141,1,1735,2995,
16,0,167,1,40,
1130,1,42,2996,16,
0,167,1,2554,2997,
16,0,167,1,1301,
2998,16,0,167,1,
1553,2999,16,0,167,
1,48,1171,1,49,
1160,1,44,1146,1,
51,1176,1,47,1153,
1,305,1199,1,50,
1166,1,63,1192,1,
66,1204,1,67,1209,
1,68,1214,1,69,
1219,1,70,1224,1,
73,3000,16,0,167,
1,74,1229,1,1046,
1292,1,328,1239,1,
1838,3001,16,0,167,
1,82,3002,16,0,
167,1,1589,3003,16,
0,167,1,1339,3004,
16,0,167,1,1094,
1267,1,93,1281,1,
352,1304,1,107,3005,
16,0,167,1,1112,
1291,1,1121,3006,16,
0,167,1,118,3007,
16,0,167,1,1375,
3008,16,0,167,1,
373,1324,1,1880,3009,
16,0,167,1,375,
1329,1,377,1335,1,
379,1372,1,380,1345,
1,883,3010,16,0,
167,1,371,1361,1,
130,3011,16,0,167,
1,143,3012,16,0,
167,1,387,3013,16,
0,167,1,1157,3014,
16,0,167,1,827,
3015,16,0,167,1,
1411,3016,16,0,167,
1,1663,3017,16,0,
167,1,412,3018,16,
0,167,1,157,3019,
16,0,167,1,172,
3020,16,0,167,1,
1937,3021,16,0,167,
1,437,3022,16,0,
167,1,188,3023,16,
0,167,1,942,1475,
1,1447,3024,16,0,
167,1,1699,3025,16,
0,167,1,447,1448,
1,205,3026,16,0,
167,1,223,3027,16,
0,167,1,1626,3028,
16,0,167,1,1229,
3029,16,0,167,1,
477,1505,1,478,1511,
1,479,1533,1,480,
1538,1,476,1523,1,
242,3030,16,0,167,
1,1001,1544,1,1002,
1549,1,42,3031,19,
438,1,42,3032,5,
36,1,2072,3033,16,
0,436,1,1858,816,
1,2195,3034,16,0,
436,1,2307,3035,16,
0,436,1,1655,843,
1,2029,722,1,1987,
892,1,1988,3036,16,
0,436,1,1773,3037,
16,0,436,1,2102,
858,1,32,3038,16,
0,436,1,2224,882,
1,1899,3039,16,0,
436,1,1800,852,1,
2019,704,1,1802,3040,
16,0,436,1,2133,
834,1,2352,793,1,
2353,799,1,2027,711,
1,2028,717,1,2356,
806,1,2030,727,1,
2358,811,1,2033,738,
1,2035,744,1,2037,
749,1,1929,865,1,
2039,754,1,1871,827,
1,2041,760,1,2042,
765,1,2031,732,1,
1572,778,1,2103,3041,
16,0,436,1,1956,
3042,16,0,436,1,
43,3043,19,485,1,
43,3044,5,24,1,
2035,744,1,1655,843,
1,2037,749,1,2039,
754,1,1929,865,1,
2041,760,1,2042,765,
1,1858,816,1,2102,
3045,16,0,577,1,
2019,704,1,1572,778,
1,2133,834,1,1871,
827,1,2353,799,1,
1800,852,1,2224,882,
1,1987,3046,16,0,
483,1,2358,811,1,
2027,711,1,2028,717,
1,2029,722,1,2030,
727,1,2031,732,1,
2033,738,1,44,3047,
19,260,1,44,3048,
5,36,1,2072,3049,
16,0,258,1,1858,
816,1,2195,3050,16,
0,258,1,2307,3051,
16,0,258,1,1655,
843,1,2029,722,1,
1987,892,1,1988,3052,
16,0,258,1,1773,
3053,16,0,258,1,
2102,858,1,32,3054,
16,0,258,1,2224,
882,1,1899,3055,16,
0,258,1,1800,852,
1,2019,704,1,1802,
3056,16,0,258,1,
2133,834,1,2352,793,
1,2353,799,1,2027,
711,1,2028,717,1,
2356,806,1,2030,727,
1,2358,811,1,2033,
738,1,2035,744,1,
2037,749,1,1929,865,
1,2039,754,1,1871,
827,1,2041,760,1,
2042,765,1,2031,732,
1,1572,778,1,2103,
3057,16,0,258,1,
1956,3058,16,0,258,
1,45,3059,19,331,
1,45,3060,5,37,
1,2072,3061,16,0,
375,1,1858,816,1,
2195,3062,16,0,375,
1,2307,3063,16,0,
375,1,1655,843,1,
2029,722,1,2031,732,
1,1988,3064,16,0,
375,1,1773,3065,16,
0,375,1,2102,858,
1,32,3066,16,0,
375,1,2224,882,1,
1899,3067,16,0,375,
1,1800,852,1,2019,
704,1,1802,3068,16,
0,375,1,2133,834,
1,2352,793,1,2353,
799,1,2027,711,1,
2028,717,1,2356,806,
1,2030,727,1,2358,
811,1,2033,738,1,
2035,744,1,2037,749,
1,1929,865,1,2039,
754,1,1871,827,1,
2041,760,1,2042,765,
1,1830,3069,16,0,
329,1,1987,892,1,
1572,778,1,2103,3070,
16,0,375,1,1956,
3071,16,0,375,1,
46,3072,19,654,1,
46,3073,5,36,1,
2072,3074,16,0,652,
1,1858,816,1,2195,
3075,16,0,652,1,
2307,3076,16,0,652,
1,1655,843,1,2029,
722,1,1987,892,1,
1988,3077,16,0,652,
1,1773,3078,16,0,
652,1,2102,858,1,
32,3079,16,0,652,
1,2224,882,1,1899,
3080,16,0,652,1,
1800,852,1,2019,704,
1,1802,3081,16,0,
652,1,2133,834,1,
2352,793,1,2353,799,
1,2027,711,1,2028,
717,1,2356,806,1,
2030,727,1,2358,811,
1,2033,738,1,2035,
744,1,2037,749,1,
1929,865,1,2039,754,
1,1871,827,1,2041,
760,1,2042,765,1,
2031,732,1,1572,778,
1,2103,3082,16,0,
652,1,1956,3083,16,
0,652,1,47,3084,
19,400,1,47,3085,
5,19,1,0,3086,
16,0,398,1,2585,
3087,16,0,398,1,
2020,3088,16,0,504,
1,2524,677,1,2526,
3089,16,0,398,1,
2529,693,1,2604,3090,
17,3091,15,3092,4,
36,37,0,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,1,-1,1,
5,3093,20,3094,4,
38,71,0,108,0,
111,0,98,0,97,
0,108,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,115,0,
95,0,50,0,1,
143,1,3,1,3,
1,2,3095,22,1,
4,1,2605,3096,17,
3097,15,3092,1,-1,
1,5,3098,20,3099,
4,38,71,0,108,
0,111,0,98,0,
97,0,108,0,68,
0,101,0,102,0,
105,0,110,0,105,
0,116,0,105,0,
111,0,110,0,115,
0,95,0,51,0,
1,144,1,3,1,
2,1,1,3100,22,
1,5,1,2606,3101,
17,3102,15,3092,1,
-1,1,5,3103,20,
3104,4,38,71,0,
108,0,111,0,98,
0,97,0,108,0,
68,0,101,0,102,
0,105,0,110,0,
105,0,116,0,105,
0,111,0,110,0,
115,0,95,0,49,
0,1,142,1,3,
1,2,1,1,3105,
22,1,3,1,2596,
3106,16,0,398,1,
2450,688,1,2353,799,
1,2530,665,1,2603,
3107,17,3108,15,3092,
1,-1,1,5,3109,
20,3110,4,38,71,
0,108,0,111,0,
98,0,97,0,108,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,115,0,95,0,
52,0,1,145,1,
3,1,3,1,2,
3111,22,1,6,1,
2358,811,1,2545,3112,
17,3113,15,3114,4,
50,37,0,71,0,
108,0,111,0,98,
0,97,0,108,0,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,1,-1,1,5,
3115,20,3116,4,52,
71,0,108,0,111,
0,98,0,97,0,
108,0,70,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,68,0,
101,0,102,0,105,
0,110,0,105,0,
116,0,105,0,111,
0,110,0,95,0,
49,0,1,148,1,
3,1,6,1,5,
3117,22,1,9,1,
2573,3118,17,3119,15,
3120,4,52,37,0,
71,0,108,0,111,
0,98,0,97,0,
108,0,86,0,97,
0,114,0,105,0,
97,0,98,0,108,
0,101,0,68,0,
101,0,99,0,108,
0,97,0,114,0,
97,0,116,0,105,
0,111,0,110,0,
1,-1,1,5,3121,
20,3122,4,54,71,
0,108,0,111,0,
98,0,97,0,108,
0,86,0,97,0,
114,0,105,0,97,
0,98,0,108,0,
101,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,95,
0,50,0,1,147,
1,3,1,5,1,
4,3123,22,1,8,
1,2584,3124,17,3125,
15,3120,1,-1,1,
5,3126,20,3127,4,
54,71,0,108,0,
111,0,98,0,97,
0,108,0,86,0,
97,0,114,0,105,
0,97,0,98,0,
108,0,101,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,95,0,49,0,
1,146,1,3,1,
3,1,2,3128,22,
1,7,1,2360,3129,
17,3130,15,3114,1,
-1,1,5,3131,20,
3132,4,52,71,0,
108,0,111,0,98,
0,97,0,108,0,
70,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,68,0,101,0,
102,0,105,0,110,
0,105,0,116,0,
105,0,111,0,110,
0,95,0,50,0,
1,149,1,3,1,
7,1,6,3133,22,
1,10,1,48,3134,
19,265,1,48,3135,
5,52,1,0,3136,
16,0,263,1,2072,
3137,16,0,503,1,
1858,816,1,2195,3138,
16,0,503,1,2524,
677,1,2307,3139,16,
0,503,1,2526,3140,
16,0,263,1,1655,
843,1,2606,3101,1,
2028,717,1,2530,665,
1,1987,892,1,1988,
3141,16,0,503,1,
2033,738,1,1773,3142,
16,0,503,1,2102,
858,1,32,3143,16,
0,503,1,2545,3112,
1,1572,778,1,2224,
882,1,1899,3144,16,
0,503,1,2529,693,
1,2584,3124,1,2585,
3145,16,0,263,1,
2450,688,1,1800,852,
1,2019,704,1,1802,
3146,16,0,503,1,
2133,834,1,2352,793,
1,2353,799,1,2027,
711,1,2573,3118,1,
2356,806,1,2030,727,
1,2358,811,1,2360,
3129,1,2035,744,1,
2037,749,1,1929,865,
1,2039,754,1,1871,
827,1,2041,760,1,
2042,765,1,2029,722,
1,2596,3147,16,0,
263,1,2031,732,1,
2603,3107,1,2604,3090,
1,2605,3096,1,2103,
3148,16,0,503,1,
1956,3149,16,0,503,
1,49,3150,19,570,
1,49,3151,5,36,
1,2072,3152,16,0,
568,1,1858,816,1,
2195,3153,16,0,568,
1,2307,3154,16,0,
568,1,1655,843,1,
2029,722,1,1987,892,
1,1988,3155,16,0,
568,1,1773,3156,16,
0,568,1,2102,858,
1,32,3157,16,0,
568,1,2224,882,1,
1899,3158,16,0,568,
1,1800,852,1,2019,
704,1,1802,3159,16,
0,568,1,2133,834,
1,2352,793,1,2353,
799,1,2027,711,1,
2028,717,1,2356,806,
1,2030,727,1,2358,
811,1,2033,738,1,
2035,744,1,2037,749,
1,1929,865,1,2039,
754,1,1871,827,1,
2041,760,1,2042,765,
1,2031,732,1,1572,
778,1,2103,3160,16,
0,568,1,1956,3161,
16,0,568,1,50,
3162,19,612,1,50,
3163,5,36,1,2072,
3164,16,0,610,1,
1858,816,1,2195,3165,
16,0,610,1,2307,
3166,16,0,610,1,
1655,843,1,2029,722,
1,1987,892,1,1988,
3167,16,0,610,1,
1773,3168,16,0,610,
1,2102,858,1,32,
3169,16,0,610,1,
2224,882,1,1899,3170,
16,0,610,1,1800,
852,1,2019,704,1,
1802,3171,16,0,610,
1,2133,834,1,2352,
793,1,2353,799,1,
2027,711,1,2028,717,
1,2356,806,1,2030,
727,1,2358,811,1,
2033,738,1,2035,744,
1,2037,749,1,1929,
865,1,2039,754,1,
1871,827,1,2041,760,
1,2042,765,1,2031,
732,1,1572,778,1,
2103,3172,16,0,610,
1,1956,3173,16,0,
610,1,51,3174,19,
127,1,51,3175,5,
51,1,0,3176,16,
0,125,1,2399,3177,
16,0,125,1,1858,
816,1,10,3178,16,
0,125,1,2195,3179,
16,0,125,1,2307,
3180,16,0,125,1,
1655,843,1,21,3181,
16,0,125,1,2028,
717,1,2029,722,1,
2072,3182,16,0,125,
1,2532,3183,16,0,
125,1,1988,3184,16,
0,125,1,2033,738,
1,1773,3185,16,0,
125,1,2102,858,1,
32,3186,16,0,125,
1,2545,3112,1,1572,
778,1,2224,882,1,
1899,3187,16,0,125,
1,2606,3101,1,2584,
3124,1,2585,3188,16,
0,125,1,52,3189,
16,0,125,1,1800,
852,1,2019,704,1,
1802,3190,16,0,125,
1,2133,834,1,2352,
793,1,2353,799,1,
2027,711,1,2573,3118,
1,2356,806,1,2030,
727,1,2358,811,1,
2360,3129,1,2035,744,
1,2037,749,1,1929,
865,1,2039,754,1,
1871,827,1,2041,760,
1,2042,765,1,1987,
892,1,2031,732,1,
2603,3107,1,2604,3090,
1,2605,3096,1,2103,
3191,16,0,125,1,
1956,3192,16,0,125,
1,52,3193,19,124,
1,52,3194,5,51,
1,0,3195,16,0,
122,1,2399,3196,16,
0,122,1,1858,816,
1,10,3197,16,0,
122,1,2195,3198,16,
0,122,1,2307,3199,
16,0,122,1,1655,
843,1,21,3200,16,
0,122,1,2028,717,
1,2029,722,1,2072,
3201,16,0,122,1,
2532,3202,16,0,122,
1,1988,3203,16,0,
122,1,2033,738,1,
1773,3204,16,0,122,
1,2102,858,1,32,
3205,16,0,122,1,
2545,3112,1,1572,778,
1,2224,882,1,1899,
3206,16,0,122,1,
2606,3101,1,2584,3124,
1,2585,3207,16,0,
122,1,52,3208,16,
0,122,1,1800,852,
1,2019,704,1,1802,
3209,16,0,122,1,
2133,834,1,2352,793,
1,2353,799,1,2027,
711,1,2573,3118,1,
2356,806,1,2030,727,
1,2358,811,1,2360,
3129,1,2035,744,1,
2037,749,1,1929,865,
1,2039,754,1,1871,
827,1,2041,760,1,
2042,765,1,1987,892,
1,2031,732,1,2603,
3107,1,2604,3090,1,
2605,3096,1,2103,3210,
16,0,122,1,1956,
3211,16,0,122,1,
53,3212,19,121,1,
53,3213,5,51,1,
0,3214,16,0,119,
1,2399,3215,16,0,
119,1,1858,816,1,
10,3216,16,0,119,
1,2195,3217,16,0,
119,1,2307,3218,16,
0,119,1,1655,843,
1,21,3219,16,0,
119,1,2028,717,1,
2029,722,1,2072,3220,
16,0,119,1,2532,
3221,16,0,119,1,
1988,3222,16,0,119,
1,2033,738,1,1773,
3223,16,0,119,1,
2102,858,1,32,3224,
16,0,119,1,2545,
3112,1,1572,778,1,
2224,882,1,1899,3225,
16,0,119,1,2606,
3101,1,2584,3124,1,
2585,3226,16,0,119,
1,52,3227,16,0,
119,1,1800,852,1,
2019,704,1,1802,3228,
16,0,119,1,2133,
834,1,2352,793,1,
2353,799,1,2027,711,
1,2573,3118,1,2356,
806,1,2030,727,1,
2358,811,1,2360,3129,
1,2035,744,1,2037,
749,1,1929,865,1,
2039,754,1,1871,827,
1,2041,760,1,2042,
765,1,1987,892,1,
2031,732,1,2603,3107,
1,2604,3090,1,2605,
3096,1,2103,3229,16,
0,119,1,1956,3230,
16,0,119,1,54,
3231,19,118,1,54,
3232,5,51,1,0,
3233,16,0,116,1,
2399,3234,16,0,116,
1,1858,816,1,10,
3235,16,0,116,1,
2195,3236,16,0,116,
1,2307,3237,16,0,
116,1,1655,843,1,
21,3238,16,0,116,
1,2028,717,1,2029,
722,1,2072,3239,16,
0,116,1,2532,3240,
16,0,116,1,1988,
3241,16,0,116,1,
2033,738,1,1773,3242,
16,0,116,1,2102,
858,1,32,3243,16,
0,116,1,2545,3112,
1,1572,778,1,2224,
882,1,1899,3244,16,
0,116,1,2606,3101,
1,2584,3124,1,2585,
3245,16,0,116,1,
52,3246,16,0,116,
1,1800,852,1,2019,
704,1,1802,3247,16,
0,116,1,2133,834,
1,2352,793,1,2353,
799,1,2027,711,1,
2573,3118,1,2356,806,
1,2030,727,1,2358,
811,1,2360,3129,1,
2035,744,1,2037,749,
1,1929,865,1,2039,
754,1,1871,827,1,
2041,760,1,2042,765,
1,1987,892,1,2031,
732,1,2603,3107,1,
2604,3090,1,2605,3096,
1,2103,3248,16,0,
116,1,1956,3249,16,
0,116,1,55,3250,
19,115,1,55,3251,
5,51,1,0,3252,
16,0,113,1,2399,
3253,16,0,113,1,
1858,816,1,10,3254,
16,0,113,1,2195,
3255,16,0,113,1,
2307,3256,16,0,113,
1,1655,843,1,21,
3257,16,0,113,1,
2028,717,1,2029,722,
1,2072,3258,16,0,
113,1,2532,3259,16,
0,113,1,1988,3260,
16,0,113,1,2033,
738,1,1773,3261,16,
0,113,1,2102,858,
1,32,3262,16,0,
113,1,2545,3112,1,
1572,778,1,2224,882,
1,1899,3263,16,0,
113,1,2606,3101,1,
2584,3124,1,2585,3264,
16,0,113,1,52,
3265,16,0,113,1,
1800,852,1,2019,704,
1,1802,3266,16,0,
113,1,2133,834,1,
2352,793,1,2353,799,
1,2027,711,1,2573,
3118,1,2356,806,1,
2030,727,1,2358,811,
1,2360,3129,1,2035,
744,1,2037,749,1,
1929,865,1,2039,754,
1,1871,827,1,2041,
760,1,2042,765,1,
1987,892,1,2031,732,
1,2603,3107,1,2604,
3090,1,2605,3096,1,
2103,3267,16,0,113,
1,1956,3268,16,0,
113,1,56,3269,19,
112,1,56,3270,5,
51,1,0,3271,16,
0,110,1,2399,3272,
16,0,110,1,1858,
816,1,10,3273,16,
0,110,1,2195,3274,
16,0,110,1,2307,
3275,16,0,110,1,
1655,843,1,21,3276,
16,0,110,1,2028,
717,1,2029,722,1,
2072,3277,16,0,110,
1,2532,3278,16,0,
110,1,1988,3279,16,
0,110,1,2033,738,
1,1773,3280,16,0,
110,1,2102,858,1,
32,3281,16,0,110,
1,2545,3112,1,1572,
778,1,2224,882,1,
1899,3282,16,0,110,
1,2606,3101,1,2584,
3124,1,2585,3283,16,
0,110,1,52,3284,
16,0,110,1,1800,
852,1,2019,704,1,
1802,3285,16,0,110,
1,2133,834,1,2352,
793,1,2353,799,1,
2027,711,1,2573,3118,
1,2356,806,1,2030,
727,1,2358,811,1,
2360,3129,1,2035,744,
1,2037,749,1,1929,
865,1,2039,754,1,
1871,827,1,2041,760,
1,2042,765,1,1987,
892,1,2031,732,1,
2603,3107,1,2604,3090,
1,2605,3096,1,2103,
3286,16,0,110,1,
1956,3287,16,0,110,
1,57,3288,19,109,
1,57,3289,5,51,
1,0,3290,16,0,
107,1,2399,3291,16,
0,107,1,1858,816,
1,10,3292,16,0,
107,1,2195,3293,16,
0,107,1,2307,3294,
16,0,107,1,1655,
843,1,21,3295,16,
0,107,1,2028,717,
1,2029,722,1,2072,
3296,16,0,107,1,
2532,3297,16,0,107,
1,1988,3298,16,0,
107,1,2033,738,1,
1773,3299,16,0,107,
1,2102,858,1,32,
3300,16,0,107,1,
2545,3112,1,1572,778,
1,2224,882,1,1899,
3301,16,0,107,1,
2606,3101,1,2584,3124,
1,2585,3302,16,0,
107,1,52,3303,16,
0,107,1,1800,852,
1,2019,704,1,1802,
3304,16,0,107,1,
2133,834,1,2352,793,
1,2353,799,1,2027,
711,1,2573,3118,1,
2356,806,1,2030,727,
1,2358,811,1,2360,
3129,1,2035,744,1,
2037,749,1,1929,865,
1,2039,754,1,1871,
827,1,2041,760,1,
2042,765,1,1987,892,
1,2031,732,1,2603,
3107,1,2604,3090,1,
2605,3096,1,2103,3305,
16,0,107,1,1956,
3306,16,0,107,1,
58,3307,19,352,1,
58,3308,5,9,1,
2412,1573,1,2488,3309,
16,0,350,1,2453,
3310,16,0,350,1,
2449,1582,1,2414,3311,
16,0,350,1,2451,
1588,1,2353,799,1,
2358,811,1,2364,3312,
16,0,350,1,59,
3313,19,349,1,59,
3314,5,9,1,2412,
1573,1,2488,3315,16,
0,347,1,2453,3316,
16,0,347,1,2449,
1582,1,2414,3317,16,
0,347,1,2451,1588,
1,2353,799,1,2358,
811,1,2364,3318,16,
0,347,1,60,3319,
19,428,1,60,3320,
5,9,1,2412,1573,
1,2488,3321,16,0,
426,1,2453,3322,16,
0,426,1,2449,1582,
1,2414,3323,16,0,
426,1,2451,1588,1,
2353,799,1,2358,811,
1,2364,3324,16,0,
426,1,61,3325,19,
488,1,61,3326,5,
9,1,2412,1573,1,
2488,3327,16,0,486,
1,2453,3328,16,0,
486,1,2449,1582,1,
2414,3329,16,0,486,
1,2451,1588,1,2353,
799,1,2358,811,1,
2364,3330,16,0,486,
1,62,3331,19,342,
1,62,3332,5,9,
1,2412,1573,1,2488,
3333,16,0,340,1,
2453,3334,16,0,340,
1,2449,1582,1,2414,
3335,16,0,340,1,
2451,1588,1,2353,799,
1,2358,811,1,2364,
3336,16,0,340,1,
63,3337,19,339,1,
63,3338,5,9,1,
2412,1573,1,2488,3339,
16,0,337,1,2453,
3340,16,0,337,1,
2449,1582,1,2414,3341,
16,0,337,1,2451,
1588,1,2353,799,1,
2358,811,1,2364,3342,
16,0,337,1,64,
3343,19,424,1,64,
3344,5,9,1,2412,
1573,1,2488,3345,16,
0,422,1,2453,3346,
16,0,422,1,2449,
1582,1,2414,3347,16,
0,422,1,2451,1588,
1,2353,799,1,2358,
811,1,2364,3348,16,
0,422,1,65,3349,
19,335,1,65,3350,
5,9,1,2412,1573,
1,2488,3351,16,0,
333,1,2453,3352,16,
0,333,1,2449,1582,
1,2414,3353,16,0,
333,1,2451,1588,1,
2353,799,1,2358,811,
1,2364,3354,16,0,
333,1,66,3355,19,
421,1,66,3356,5,
9,1,2412,1573,1,
2488,3357,16,0,419,
1,2453,3358,16,0,
419,1,2449,1582,1,
2414,3359,16,0,419,
1,2451,1588,1,2353,
799,1,2358,811,1,
2364,3360,16,0,419,
1,67,3361,19,479,
1,67,3362,5,9,
1,2412,1573,1,2488,
3363,16,0,477,1,
2453,3364,16,0,477,
1,2449,1582,1,2414,
3365,16,0,477,1,
2451,1588,1,2353,799,
1,2358,811,1,2364,
3366,16,0,477,1,
68,3367,19,415,1,
68,3368,5,9,1,
2412,1573,1,2488,3369,
16,0,413,1,2453,
3370,16,0,413,1,
2449,1582,1,2414,3371,
16,0,413,1,2451,
1588,1,2353,799,1,
2358,811,1,2364,3372,
16,0,413,1,69,
3373,19,327,1,69,
3374,5,9,1,2412,
1573,1,2488,3375,16,
0,325,1,2453,3376,
16,0,325,1,2449,
1582,1,2414,3377,16,
0,325,1,2451,1588,
1,2353,799,1,2358,
811,1,2364,3378,16,
0,325,1,70,3379,
19,409,1,70,3380,
5,9,1,2412,1573,
1,2488,3381,16,0,
407,1,2453,3382,16,
0,407,1,2449,1582,
1,2414,3383,16,0,
407,1,2451,1588,1,
2353,799,1,2358,811,
1,2364,3384,16,0,
407,1,71,3385,19,
321,1,71,3386,5,
9,1,2412,1573,1,
2488,3387,16,0,319,
1,2453,3388,16,0,
319,1,2449,1582,1,
2414,3389,16,0,319,
1,2451,1588,1,2353,
799,1,2358,811,1,
2364,3390,16,0,319,
1,72,3391,19,318,
1,72,3392,5,9,
1,2412,1573,1,2488,
3393,16,0,316,1,
2453,3394,16,0,316,
1,2449,1582,1,2414,
3395,16,0,316,1,
2451,1588,1,2353,799,
1,2358,811,1,2364,
3396,16,0,316,1,
73,3397,19,315,1,
73,3398,5,9,1,
2412,1573,1,2488,3399,
16,0,313,1,2453,
3400,16,0,313,1,
2449,1582,1,2414,3401,
16,0,313,1,2451,
1588,1,2353,799,1,
2358,811,1,2364,3402,
16,0,313,1,74,
3403,19,592,1,74,
3404,5,9,1,2412,
1573,1,2488,3405,16,
0,590,1,2453,3406,
16,0,590,1,2449,
1582,1,2414,3407,16,
0,590,1,2451,1588,
1,2353,799,1,2358,
811,1,2364,3408,16,
0,590,1,75,3409,
19,309,1,75,3410,
5,9,1,2412,1573,
1,2488,3411,16,0,
307,1,2453,3412,16,
0,307,1,2449,1582,
1,2414,3413,16,0,
307,1,2451,1588,1,
2353,799,1,2358,811,
1,2364,3414,16,0,
307,1,76,3415,19,
404,1,76,3416,5,
9,1,2412,1573,1,
2488,3417,16,0,402,
1,2453,3418,16,0,
402,1,2449,1582,1,
2414,3419,16,0,402,
1,2451,1588,1,2353,
799,1,2358,811,1,
2364,3420,16,0,402,
1,77,3421,19,305,
1,77,3422,5,9,
1,2412,1573,1,2488,
3423,16,0,303,1,
2453,3424,16,0,303,
1,2449,1582,1,2414,
3425,16,0,303,1,
2451,1588,1,2353,799,
1,2358,811,1,2364,
3426,16,0,303,1,
78,3427,19,302,1,
78,3428,5,9,1,
2412,1573,1,2488,3429,
16,0,300,1,2453,
3430,16,0,300,1,
2449,1582,1,2414,3431,
16,0,300,1,2451,
1588,1,2353,799,1,
2358,811,1,2364,3432,
16,0,300,1,79,
3433,19,299,1,79,
3434,5,9,1,2412,
1573,1,2488,3435,16,
0,297,1,2453,3436,
16,0,297,1,2449,
1582,1,2414,3437,16,
0,297,1,2451,1588,
1,2353,799,1,2358,
811,1,2364,3438,16,
0,297,1,80,3439,
19,296,1,80,3440,
5,9,1,2412,1573,
1,2488,3441,16,0,
294,1,2453,3442,16,
0,294,1,2449,1582,
1,2414,3443,16,0,
294,1,2451,1588,1,
2353,799,1,2358,811,
1,2364,3444,16,0,
294,1,81,3445,19,
293,1,81,3446,5,
9,1,2412,1573,1,
2488,3447,16,0,291,
1,2453,3448,16,0,
291,1,2449,1582,1,
2414,3449,16,0,291,
1,2451,1588,1,2353,
799,1,2358,811,1,
2364,3450,16,0,291,
1,82,3451,19,395,
1,82,3452,5,9,
1,2412,1573,1,2488,
3453,16,0,393,1,
2453,3454,16,0,393,
1,2449,1582,1,2414,
3455,16,0,393,1,
2451,1588,1,2353,799,
1,2358,811,1,2364,
3456,16,0,393,1,
83,3457,19,392,1,
83,3458,5,9,1,
2412,1573,1,2488,3459,
16,0,390,1,2453,
3460,16,0,390,1,
2449,1582,1,2414,3461,
16,0,390,1,2451,
1588,1,2353,799,1,
2358,811,1,2364,3462,
16,0,390,1,84,
3463,19,459,1,84,
3464,5,9,1,2412,
1573,1,2488,3465,16,
0,457,1,2453,3466,
16,0,457,1,2449,
1582,1,2414,3467,16,
0,457,1,2451,1588,
1,2353,799,1,2358,
811,1,2364,3468,16,
0,457,1,85,3469,
19,285,1,85,3470,
5,9,1,2412,1573,
1,2488,3471,16,0,
283,1,2453,3472,16,
0,283,1,2449,1582,
1,2414,3473,16,0,
283,1,2451,1588,1,
2353,799,1,2358,811,
1,2364,3474,16,0,
283,1,86,3475,19,
282,1,86,3476,5,
9,1,2412,1573,1,
2488,3477,16,0,280,
1,2453,3478,16,0,
280,1,2449,1582,1,
2414,3479,16,0,280,
1,2451,1588,1,2353,
799,1,2358,811,1,
2364,3480,16,0,280,
1,87,3481,19,279,
1,87,3482,5,9,
1,2412,1573,1,2488,
3483,16,0,277,1,
2453,3484,16,0,277,
1,2449,1582,1,2414,
3485,16,0,277,1,
2451,1588,1,2353,799,
1,2358,811,1,2364,
3486,16,0,277,1,
88,3487,19,276,1,
88,3488,5,9,1,
2412,1573,1,2488,3489,
16,0,274,1,2453,
3490,16,0,274,1,
2449,1582,1,2414,3491,
16,0,274,1,2451,
1588,1,2353,799,1,
2358,811,1,2364,3492,
16,0,274,1,89,
3493,19,384,1,89,
3494,5,9,1,2412,
1573,1,2488,3495,16,
0,382,1,2453,3496,
16,0,382,1,2449,
1582,1,2414,3497,16,
0,382,1,2451,1588,
1,2353,799,1,2358,
811,1,2364,3498,16,
0,382,1,90,3499,
19,273,1,90,3500,
5,9,1,2412,1573,
1,2488,3501,16,0,
271,1,2453,3502,16,
0,271,1,2449,1582,
1,2414,3503,16,0,
271,1,2451,1588,1,
2353,799,1,2358,811,
1,2364,3504,16,0,
271,1,91,3505,19,
133,1,91,3506,5,
121,1,0,3507,16,
0,557,1,1,1897,
1,2,1903,1,3,
1908,1,4,1913,1,
5,1918,1,6,1923,
1,7,1928,1,8,
3508,16,0,131,1,
2019,704,1,2020,3509,
16,0,505,1,256,
3510,16,0,170,1,
1773,3511,16,0,164,
1,2025,3512,16,0,
511,1,18,3513,16,
0,138,1,2027,711,
1,2028,717,1,2029,
722,1,2030,727,1,
2031,732,1,509,3514,
16,0,170,1,2033,
738,1,277,3515,16,
0,170,1,2035,744,
1,2037,749,1,2039,
754,1,32,3516,16,
0,164,1,2041,760,
1,2042,765,1,2545,
3112,1,2548,3517,16,
0,170,1,1295,3518,
16,0,164,1,41,
3519,16,0,170,1,
43,3520,16,0,170,
1,1802,3521,16,0,
164,1,46,3522,16,
0,174,1,299,3523,
16,0,170,1,52,
3524,16,0,170,1,
1513,3525,16,0,164,
1,525,3526,16,0,
170,1,62,3527,16,
0,190,1,2573,3118,
1,2072,3528,16,0,
164,1,65,3529,16,
0,193,1,1572,778,
1,71,3530,16,0,
170,1,1956,3531,16,
0,164,1,1832,3532,
16,0,164,1,76,
3533,16,0,170,1,
1583,3534,16,0,170,
1,1333,3535,16,0,
164,1,79,3536,16,
0,170,1,2023,3537,
16,0,507,1,322,
3538,16,0,170,1,
85,3539,16,0,170,
1,1259,3540,16,0,
164,1,89,3541,16,
0,170,1,2603,3107,
1,2352,793,1,2604,
3090,1,346,3542,16,
0,170,1,2606,3101,
1,2356,806,1,2358,
811,1,1858,816,1,
97,3543,16,0,170,
1,2362,3544,16,0,
266,1,102,3545,16,
0,170,1,1115,3546,
16,0,164,1,112,
3547,16,0,170,1,
1871,827,1,1874,3548,
16,0,164,1,372,
3549,16,0,545,1,
2307,3550,16,0,164,
1,374,3551,16,0,
547,1,124,3552,16,
0,170,1,376,3553,
16,0,549,1,378,
3554,16,0,551,1,
381,3555,16,0,170,
1,137,3556,16,0,
170,1,1899,3557,16,
0,164,1,1111,3558,
16,0,660,1,2195,
3559,16,0,164,1,
1151,3560,16,0,164,
1,1655,843,1,1405,
3561,16,0,164,1,
151,3562,16,0,170,
1,406,3563,16,0,
170,1,2584,3124,1,
2585,3564,16,0,557,
1,1369,3565,16,0,
164,1,1800,852,1,
2102,858,1,2103,3566,
16,0,164,1,166,
3567,16,0,170,1,
2353,799,1,1929,865,
1,1931,3568,16,0,
164,1,2360,3129,1,
2605,3096,1,431,3569,
16,0,170,1,182,
3570,16,0,170,1,
1187,3571,16,0,164,
1,1441,3572,16,0,
164,1,1693,3573,16,
0,164,1,2133,834,
1,447,3574,16,0,
170,1,199,3575,16,
0,170,1,1657,3576,
16,0,164,1,459,
3577,16,0,170,1,
462,3578,16,0,170,
1,2224,882,1,217,
3579,16,0,170,1,
1620,3580,16,0,170,
1,1223,3581,16,0,
164,1,1477,3582,16,
0,164,1,1729,3583,
16,0,170,1,1987,
892,1,1988,3584,16,
0,164,1,236,3585,
16,0,170,1,1754,
3586,16,0,164,1,
92,3587,19,625,1,
92,3588,5,91,1,
1259,3589,16,0,623,
1,256,3590,16,0,
623,1,2195,3591,16,
0,623,1,1513,3592,
16,0,623,1,2019,
704,1,1773,3593,16,
0,623,1,2027,711,
1,2028,717,1,2029,
722,1,2030,727,1,
2031,732,1,509,3594,
16,0,623,1,2033,
738,1,277,3595,16,
0,623,1,2035,744,
1,2037,749,1,2039,
754,1,32,3596,16,
0,623,1,2041,760,
1,2042,765,1,2548,
3597,16,0,623,1,
1295,3598,16,0,623,
1,41,3599,16,0,
623,1,43,3600,16,
0,623,1,1802,3601,
16,0,623,1,2307,
3602,16,0,623,1,
52,3603,16,0,623,
1,299,3604,16,0,
623,1,62,3605,16,
0,623,1,2072,3606,
16,0,623,1,1572,
778,1,71,3607,16,
0,623,1,1956,3608,
16,0,623,1,1832,
3609,16,0,623,1,
76,3610,16,0,623,
1,1583,3611,16,0,
623,1,1333,3612,16,
0,623,1,79,3613,
16,0,623,1,322,
3614,16,0,623,1,
85,3615,16,0,623,
1,89,3616,16,0,
623,1,2352,793,1,
2353,799,1,346,3617,
16,0,623,1,2356,
806,1,2358,811,1,
1858,816,1,97,3618,
16,0,623,1,102,
3619,16,0,623,1,
1115,3620,16,0,623,
1,112,3621,16,0,
623,1,525,3622,16,
0,623,1,1871,827,
1,1874,3623,16,0,
623,1,124,3624,16,
0,623,1,2133,834,
1,381,3625,16,0,
623,1,137,3626,16,
0,623,1,1899,3627,
16,0,623,1,1151,
3628,16,0,623,1,
1655,843,1,1405,3629,
16,0,623,1,151,
3630,16,0,623,1,
406,3631,16,0,623,
1,1369,3632,16,0,
623,1,1800,852,1,
2102,858,1,2103,3633,
16,0,623,1,166,
3634,16,0,623,1,
1929,865,1,1931,3635,
16,0,623,1,431,
3636,16,0,623,1,
182,3637,16,0,623,
1,1187,3638,16,0,
623,1,1441,3639,16,
0,623,1,1693,3640,
16,0,623,1,447,
3641,16,0,623,1,
199,3642,16,0,623,
1,1657,3643,16,0,
623,1,459,3644,16,
0,623,1,462,3645,
16,0,623,1,2224,
882,1,217,3646,16,
0,623,1,1620,3647,
16,0,623,1,1223,
3648,16,0,623,1,
1477,3649,16,0,623,
1,1729,3650,16,0,
623,1,1987,892,1,
1988,3651,16,0,623,
1,236,3652,16,0,
623,1,1754,3653,16,
0,623,1,93,3654,
19,622,1,93,3655,
5,91,1,1259,3656,
16,0,620,1,256,
3657,16,0,620,1,
2195,3658,16,0,620,
1,1513,3659,16,0,
620,1,2019,704,1,
1773,3660,16,0,620,
1,2027,711,1,2028,
717,1,2029,722,1,
2030,727,1,2031,732,
1,509,3661,16,0,
620,1,2033,738,1,
277,3662,16,0,620,
1,2035,744,1,2037,
749,1,2039,754,1,
32,3663,16,0,620,
1,2041,760,1,2042,
765,1,2548,3664,16,
0,620,1,1295,3665,
16,0,620,1,41,
3666,16,0,620,1,
43,3667,16,0,620,
1,1802,3668,16,0,
620,1,2307,3669,16,
0,620,1,52,3670,
16,0,620,1,299,
3671,16,0,620,1,
62,3672,16,0,620,
1,2072,3673,16,0,
620,1,1572,778,1,
71,3674,16,0,620,
1,1956,3675,16,0,
620,1,1832,3676,16,
0,620,1,76,3677,
16,0,620,1,1583,
3678,16,0,620,1,
1333,3679,16,0,620,
1,79,3680,16,0,
620,1,322,3681,16,
0,620,1,85,3682,
16,0,620,1,89,
3683,16,0,620,1,
2352,793,1,2353,799,
1,346,3684,16,0,
620,1,2356,806,1,
2358,811,1,1858,816,
1,97,3685,16,0,
620,1,102,3686,16,
0,620,1,1115,3687,
16,0,620,1,112,
3688,16,0,620,1,
525,3689,16,0,620,
1,1871,827,1,1874,
3690,16,0,620,1,
124,3691,16,0,620,
1,2133,834,1,381,
3692,16,0,620,1,
137,3693,16,0,620,
1,1899,3694,16,0,
620,1,1151,3695,16,
0,620,1,1655,843,
1,1405,3696,16,0,
620,1,151,3697,16,
0,620,1,406,3698,
16,0,620,1,1369,
3699,16,0,620,1,
1800,852,1,2102,858,
1,2103,3700,16,0,
620,1,166,3701,16,
0,620,1,1929,865,
1,1931,3702,16,0,
620,1,431,3703,16,
0,620,1,182,3704,
16,0,620,1,1187,
3705,16,0,620,1,
1441,3706,16,0,620,
1,1693,3707,16,0,
620,1,447,3708,16,
0,620,1,199,3709,
16,0,620,1,1657,
3710,16,0,620,1,
459,3711,16,0,620,
1,462,3712,16,0,
620,1,2224,882,1,
217,3713,16,0,620,
1,1620,3714,16,0,
620,1,1223,3715,16,
0,620,1,1477,3716,
16,0,620,1,1729,
3717,16,0,620,1,
1987,892,1,1988,3718,
16,0,620,1,236,
3719,16,0,620,1,
1754,3720,16,0,620,
1,94,3721,19,619,
1,94,3722,5,91,
1,1259,3723,16,0,
617,1,256,3724,16,
0,617,1,2195,3725,
16,0,617,1,1513,
3726,16,0,617,1,
2019,704,1,1773,3727,
16,0,617,1,2027,
711,1,2028,717,1,
2029,722,1,2030,727,
1,2031,732,1,509,
3728,16,0,617,1,
2033,738,1,277,3729,
16,0,617,1,2035,
744,1,2037,749,1,
2039,754,1,32,3730,
16,0,617,1,2041,
760,1,2042,765,1,
2548,3731,16,0,617,
1,1295,3732,16,0,
617,1,41,3733,16,
0,617,1,43,3734,
16,0,617,1,1802,
3735,16,0,617,1,
2307,3736,16,0,617,
1,52,3737,16,0,
617,1,299,3738,16,
0,617,1,62,3739,
16,0,617,1,2072,
3740,16,0,617,1,
1572,778,1,71,3741,
16,0,617,1,1956,
3742,16,0,617,1,
1832,3743,16,0,617,
1,76,3744,16,0,
617,1,1583,3745,16,
0,617,1,1333,3746,
16,0,617,1,79,
3747,16,0,617,1,
322,3748,16,0,617,
1,85,3749,16,0,
617,1,89,3750,16,
0,617,1,2352,793,
1,2353,799,1,346,
3751,16,0,617,1,
2356,806,1,2358,811,
1,1858,816,1,97,
3752,16,0,617,1,
102,3753,16,0,617,
1,1115,3754,16,0,
617,1,112,3755,16,
0,617,1,525,3756,
16,0,617,1,1871,
827,1,1874,3757,16,
0,617,1,124,3758,
16,0,617,1,2133,
834,1,381,3759,16,
0,617,1,137,3760,
16,0,617,1,1899,
3761,16,0,617,1,
1151,3762,16,0,617,
1,1655,843,1,1405,
3763,16,0,617,1,
151,3764,16,0,617,
1,406,3765,16,0,
617,1,1369,3766,16,
0,617,1,1800,852,
1,2102,858,1,2103,
3767,16,0,617,1,
166,3768,16,0,617,
1,1929,865,1,1931,
3769,16,0,617,1,
431,3770,16,0,617,
1,182,3771,16,0,
617,1,1187,3772,16,
0,617,1,1441,3773,
16,0,617,1,1693,
3774,16,0,617,1,
447,3775,16,0,617,
1,199,3776,16,0,
617,1,1657,3777,16,
0,617,1,459,3778,
16,0,617,1,462,
3779,16,0,617,1,
2224,882,1,217,3780,
16,0,617,1,1620,
3781,16,0,617,1,
1223,3782,16,0,617,
1,1477,3783,16,0,
617,1,1729,3784,16,
0,617,1,1987,892,
1,1988,3785,16,0,
617,1,236,3786,16,
0,617,1,1754,3787,
16,0,617,1,95,
3788,19,103,1,95,
3789,5,1,1,0,
3790,16,0,104,1,
96,3791,19,644,1,
96,3792,5,1,1,
0,3793,16,0,642,
1,97,3794,19,412,
1,97,3795,5,2,
1,0,3796,16,0,
656,1,2585,3797,16,
0,410,1,98,3798,
19,599,1,98,3799,
5,2,1,0,3800,
16,0,597,1,2585,
3801,16,0,630,1,
99,3802,19,464,1,
99,3803,5,2,1,
0,3804,16,0,462,
1,2585,3805,16,0,
586,1,100,3806,19,
473,1,100,3807,5,
4,1,0,3808,16,
0,471,1,2585,3809,
16,0,471,1,2596,
3810,16,0,556,1,
2526,3811,16,0,556,
1,101,3812,19,444,
1,101,3813,5,2,
1,2453,3814,16,0,
497,1,2364,3815,16,
0,442,1,102,3816,
19,470,1,102,3817,
5,4,1,2453,3818,
16,0,468,1,2488,
3819,16,0,589,1,
2414,3820,16,0,589,
1,2364,3821,16,0,
468,1,103,3822,19,
141,1,103,3823,5,
3,1,2399,3824,16,
0,434,1,2532,3825,
16,0,480,1,10,
3826,16,0,139,1,
104,3827,19,151,1,
104,3828,5,16,1,
0,3829,16,0,489,
1,2585,3830,16,0,
489,1,2195,3831,16,
0,637,1,10,3832,
16,0,262,1,1899,
3833,16,0,637,1,
2307,3834,16,0,637,
1,2532,3835,16,0,
262,1,21,3836,16,
0,149,1,1956,3837,
16,0,637,1,2103,
3838,16,0,637,1,
1802,3839,16,0,637,
1,1988,3840,16,0,
637,1,2072,3841,16,
0,637,1,2399,3842,
16,0,262,1,32,
3843,16,0,637,1,
1773,3844,16,0,637,
1,105,3845,19,130,
1,105,3846,5,17,
1,0,3847,16,0,
128,1,2585,3848,16,
0,128,1,2195,3849,
16,0,137,1,10,
3850,16,0,137,1,
1899,3851,16,0,137,
1,2307,3852,16,0,
137,1,52,3853,16,
0,188,1,2532,3854,
16,0,137,1,21,
3855,16,0,137,1,
1956,3856,16,0,137,
1,2103,3857,16,0,
137,1,1802,3858,16,
0,137,1,1988,3859,
16,0,137,1,2072,
3860,16,0,137,1,
2399,3861,16,0,137,
1,32,3862,16,0,
137,1,1773,3863,16,
0,137,1,106,3864,
19,355,1,106,3865,
5,4,1,2453,3866,
16,0,353,1,2488,
3867,16,0,353,1,
2414,3868,16,0,353,
1,2364,3869,16,0,
353,1,107,3870,19,
214,1,107,3871,5,
13,1,2072,3872,16,
0,512,1,2410,3873,
16,0,365,1,2195,
3874,16,0,512,1,
1899,3875,16,0,512,
1,2307,3876,16,0,
512,1,1988,3877,16,
0,512,1,2103,3878,
16,0,512,1,1802,
3879,16,0,512,1,
2543,3880,16,0,212,
1,31,3881,16,0,
261,1,1956,3882,16,
0,512,1,1773,3883,
16,0,512,1,32,
3884,16,0,512,1,
108,3885,19,312,1,
108,3886,5,1,1,
32,3887,16,0,310,
1,109,3888,19,255,
1,109,3889,5,10,
1,2072,3890,16,0,
632,1,2195,3891,16,
0,658,1,1899,3892,
16,0,435,1,2307,
3893,16,0,448,1,
1802,3894,16,0,328,
1,1988,3895,16,0,
502,1,2103,3896,16,
0,648,1,1956,3897,
16,0,482,1,1773,
3898,16,0,256,1,
32,3899,16,0,253,
1,110,3900,19,635,
1,110,3901,5,10,
1,2072,3902,16,0,
633,1,2195,3903,16,
0,633,1,1899,3904,
16,0,633,1,2307,
3905,16,0,633,1,
1802,3906,16,0,633,
1,1988,3907,16,0,
633,1,2103,3908,16,
0,633,1,1956,3909,
16,0,633,1,1773,
3910,16,0,633,1,
32,3911,16,0,633,
1,111,3912,19,160,
1,111,3913,5,28,
1,2072,3914,16,0,
636,1,1693,3915,16,
0,184,1,1754,3916,
16,0,246,1,2195,
3917,16,0,636,1,
2307,3918,16,0,636,
1,1874,3919,16,0,
645,1,1657,3920,16,
0,246,1,1223,3921,
16,0,287,1,1115,
3922,16,0,158,1,
1988,3923,16,0,636,
1,1773,3924,16,0,
636,1,2103,3925,16,
0,636,1,1405,3926,
16,0,571,1,32,
3927,16,0,636,1,
1513,3928,16,0,578,
1,1899,3929,16,0,
636,1,1802,3930,16,
0,636,1,1259,3931,
16,0,358,1,1151,
3932,16,0,199,1,
1333,3933,16,0,429,
1,1441,3934,16,0,
528,1,1931,3935,16,
0,562,1,1832,3936,
16,0,372,1,1295,
3937,16,0,385,1,
1187,3938,16,0,233,
1,1956,3939,16,0,
636,1,1369,3940,16,
0,455,1,1477,3941,
16,0,560,1,112,
3942,19,537,1,112,
3943,5,10,1,2072,
3944,16,0,535,1,
2195,3945,16,0,535,
1,1899,3946,16,0,
535,1,2307,3947,16,
0,535,1,1802,3948,
16,0,535,1,1988,
3949,16,0,535,1,
2103,3950,16,0,535,
1,1956,3951,16,0,
535,1,1773,3952,16,
0,535,1,32,3953,
16,0,535,1,113,
3954,19,533,1,113,
3955,5,10,1,2072,
3956,16,0,531,1,
2195,3957,16,0,531,
1,1899,3958,16,0,
531,1,2307,3959,16,
0,531,1,1802,3960,
16,0,531,1,1988,
3961,16,0,531,1,
2103,3962,16,0,531,
1,1956,3963,16,0,
531,1,1773,3964,16,
0,531,1,32,3965,
16,0,531,1,114,
3966,19,575,1,114,
3967,5,10,1,2072,
3968,16,0,573,1,
2195,3969,16,0,573,
1,1899,3970,16,0,
573,1,2307,3971,16,
0,573,1,1802,3972,
16,0,573,1,1988,
3973,16,0,573,1,
2103,3974,16,0,573,
1,1956,3975,16,0,
573,1,1773,3976,16,
0,573,1,32,3977,
16,0,573,1,115,
3978,19,527,1,115,
3979,5,10,1,2072,
3980,16,0,525,1,
2195,3981,16,0,525,
1,1899,3982,16,0,
525,1,2307,3983,16,
0,525,1,1802,3984,
16,0,525,1,1988,
3985,16,0,525,1,
2103,3986,16,0,525,
1,1956,3987,16,0,
525,1,1773,3988,16,
0,525,1,32,3989,
16,0,525,1,116,
3990,19,524,1,116,
3991,5,10,1,2072,
3992,16,0,522,1,
2195,3993,16,0,522,
1,1899,3994,16,0,
522,1,2307,3995,16,
0,522,1,1802,3996,
16,0,522,1,1988,
3997,16,0,522,1,
2103,3998,16,0,522,
1,1956,3999,16,0,
522,1,1773,4000,16,
0,522,1,32,4001,
16,0,522,1,117,
4002,19,521,1,117,
4003,5,10,1,2072,
4004,16,0,519,1,
2195,4005,16,0,519,
1,1899,4006,16,0,
519,1,2307,4007,16,
0,519,1,1802,4008,
16,0,519,1,1988,
4009,16,0,519,1,
2103,4010,16,0,519,
1,1956,4011,16,0,
519,1,1773,4012,16,
0,519,1,32,4013,
16,0,519,1,118,
4014,19,518,1,118,
4015,5,10,1,2072,
4016,16,0,516,1,
2195,4017,16,0,516,
1,1899,4018,16,0,
516,1,2307,4019,16,
0,516,1,1802,4020,
16,0,516,1,1988,
4021,16,0,516,1,
2103,4022,16,0,516,
1,1956,4023,16,0,
516,1,1773,4024,16,
0,516,1,32,4025,
16,0,516,1,119,
4026,19,515,1,119,
4027,5,10,1,2072,
4028,16,0,513,1,
2195,4029,16,0,513,
1,1899,4030,16,0,
513,1,2307,4031,16,
0,513,1,1802,4032,
16,0,513,1,1988,
4033,16,0,513,1,
2103,4034,16,0,513,
1,1956,4035,16,0,
513,1,1773,4036,16,
0,513,1,32,4037,
16,0,513,1,120,
4038,19,204,1,120,
4039,5,2,1,1754,
4040,16,0,228,1,
1657,4041,16,0,202,
1,121,4042,19,543,
1,121,4043,5,65,
1,2072,4044,16,0,
541,1,1693,4045,16,
0,541,1,112,4046,
16,0,541,1,2195,
4047,16,0,541,1,
1441,4048,16,0,541,
1,1754,4049,16,0,
541,1,447,4050,16,
0,541,1,2548,4051,
16,0,541,1,124,
4052,16,0,541,1,
525,4053,16,0,541,
1,2307,4054,16,0,
541,1,346,4055,16,
0,541,1,1874,4056,
16,0,541,1,1657,
4057,16,0,541,1,
459,4058,16,0,541,
1,1223,4059,16,0,
541,1,1115,4060,16,
0,541,1,1988,4061,
16,0,541,1,1187,
4062,16,0,541,1,
137,4063,16,0,541,
1,1773,4064,16,0,
541,1,32,4065,16,
0,541,1,1405,4066,
16,0,541,1,236,
4067,16,0,541,1,
1620,4068,16,0,541,
1,256,4069,16,0,
541,1,431,4070,16,
0,541,1,41,4071,
16,0,541,1,151,
4072,16,0,541,1,
43,4073,16,0,541,
1,1899,4074,16,0,
541,1,1477,4075,16,
0,541,1,1583,4076,
16,0,541,1,52,
4077,16,0,541,1,
381,4078,16,0,541,
1,166,4079,16,0,
541,1,1802,4080,16,
0,541,1,277,4081,
16,0,541,1,1259,
4082,16,0,541,1,
1151,4083,16,0,541,
1,62,4084,16,0,
583,1,1333,4085,16,
0,541,1,71,4086,
16,0,541,1,182,
4087,16,0,541,1,
1513,4088,16,0,541,
1,76,4089,16,0,
541,1,1931,4090,16,
0,541,1,79,4091,
16,0,541,1,299,
4092,16,0,541,1,
85,4093,16,0,541,
1,1832,4094,16,0,
541,1,89,4095,16,
0,541,1,199,4096,
16,0,541,1,406,
4097,16,0,541,1,
1729,4098,16,0,541,
1,1295,4099,16,0,
541,1,97,4100,16,
0,541,1,2103,4101,
16,0,541,1,102,
4102,16,0,541,1,
1956,4103,16,0,541,
1,322,4104,16,0,
541,1,1369,4105,16,
0,541,1,462,4106,
16,0,541,1,509,
4107,16,0,541,1,
217,4108,16,0,541,
1,122,4109,19,602,
1,122,4110,5,2,
1,459,4111,16,0,
600,1,41,4112,16,
0,649,1,123,4113,
19,609,1,123,4114,
5,3,1,462,4115,
16,0,607,1,459,
4116,16,0,629,1,
41,4117,16,0,629,
1,124,4118,19,4119,
4,36,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,65,0,114,
0,103,0,117,0,
109,0,101,0,110,
0,116,0,1,124,
4114,1,125,4120,19,
554,1,125,4121,5,
65,1,2072,4122,16,
0,552,1,1693,4123,
16,0,552,1,112,
4124,16,0,552,1,
2195,4125,16,0,552,
1,1441,4126,16,0,
552,1,1754,4127,16,
0,552,1,447,4128,
16,0,552,1,2548,
4129,16,0,552,1,
124,4130,16,0,552,
1,525,4131,16,0,
552,1,2307,4132,16,
0,552,1,346,4133,
16,0,552,1,1874,
4134,16,0,552,1,
1657,4135,16,0,552,
1,459,4136,16,0,
552,1,1223,4137,16,
0,552,1,1115,4138,
16,0,552,1,1988,
4139,16,0,552,1,
1187,4140,16,0,552,
1,137,4141,16,0,
552,1,1773,4142,16,
0,552,1,32,4143,
16,0,552,1,1405,
4144,16,0,552,1,
236,4145,16,0,552,
1,1620,4146,16,0,
552,1,256,4147,16,
0,552,1,431,4148,
16,0,552,1,41,
4149,16,0,552,1,
151,4150,16,0,552,
1,43,4151,16,0,
552,1,1899,4152,16,
0,552,1,1477,4153,
16,0,552,1,1583,
4154,16,0,552,1,
52,4155,16,0,552,
1,381,4156,16,0,
552,1,166,4157,16,
0,552,1,1802,4158,
16,0,552,1,277,
4159,16,0,552,1,
1259,4160,16,0,552,
1,1151,4161,16,0,
552,1,62,4162,16,
0,584,1,1333,4163,
16,0,552,1,71,
4164,16,0,552,1,
182,4165,16,0,552,
1,1513,4166,16,0,
552,1,76,4167,16,
0,552,1,1931,4168,
16,0,552,1,79,
4169,16,0,552,1,
299,4170,16,0,552,
1,85,4171,16,0,
552,1,1832,4172,16,
0,552,1,89,4173,
16,0,552,1,199,
4174,16,0,552,1,
406,4175,16,0,552,
1,1729,4176,16,0,
552,1,1295,4177,16,
0,552,1,97,4178,
16,0,552,1,2103,
4179,16,0,552,1,
102,4180,16,0,552,
1,1956,4181,16,0,
552,1,322,4182,16,
0,552,1,1369,4183,
16,0,552,1,462,
4184,16,0,552,1,
509,4185,16,0,552,
1,217,4186,16,0,
552,1,126,4187,19,
4188,4,28,86,0,
101,0,99,0,116,
0,111,0,114,0,
67,0,111,0,110,
0,115,0,116,0,
97,0,110,0,116,
0,1,126,4121,1,
127,4189,19,4190,4,
32,82,0,111,0,
116,0,97,0,116,
0,105,0,111,0,
110,0,67,0,111,
0,110,0,115,0,
116,0,97,0,110,
0,116,0,1,127,
4121,1,128,4191,19,
4192,4,24,76,0,
105,0,115,0,116,
0,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,1,128,4121,
1,129,4193,19,148,
1,129,4194,5,64,
1,2072,4195,16,0,
582,1,1693,4196,16,
0,146,1,112,4197,
16,0,244,1,2195,
4198,16,0,582,1,
1441,4199,16,0,495,
1,1754,4200,16,0,
657,1,447,4201,16,
0,368,1,2548,4202,
16,0,566,1,124,
4203,16,0,257,1,
525,4204,16,0,368,
1,2307,4205,16,0,
582,1,346,4206,16,
0,506,1,1874,4207,
16,0,381,1,1657,
4208,16,0,657,1,
459,4209,16,0,166,
1,1223,4210,16,0,
243,1,1115,4211,16,
0,209,1,1988,4212,
16,0,582,1,1187,
4213,16,0,208,1,
137,4214,16,0,286,
1,1773,4215,16,0,
582,1,32,4216,16,
0,582,1,1405,4217,
16,0,461,1,236,
4218,16,0,425,1,
1620,4219,16,0,640,
1,256,4220,16,0,
441,1,431,4221,16,
0,580,1,41,4222,
16,0,166,1,151,
4223,16,0,336,1,
43,4224,16,0,631,
1,1899,4225,16,0,
582,1,1477,4226,16,
0,539,1,1583,4227,
16,0,613,1,52,
4228,16,0,587,1,
381,4229,16,0,559,
1,166,4230,16,0,
357,1,1802,4231,16,
0,582,1,277,4232,
16,0,453,1,1259,
4233,16,0,306,1,
1151,4234,16,0,245,
1,1333,4235,16,0,
401,1,71,4236,16,
0,200,1,182,4237,
16,0,368,1,1513,
4238,16,0,564,1,
76,4239,16,0,558,
1,1931,4240,16,0,
445,1,79,4241,16,
0,210,1,299,4242,
16,0,476,1,85,
4243,16,0,492,1,
1832,4244,16,0,346,
1,89,4245,16,0,
224,1,199,4246,16,
0,377,1,406,4247,
16,0,567,1,1729,
4248,16,0,191,1,
1295,4249,16,0,406,
1,97,4250,16,0,
446,1,2103,4251,16,
0,582,1,102,4252,
16,0,232,1,1956,
4253,16,0,582,1,
322,4254,16,0,494,
1,1369,4255,16,0,
440,1,462,4256,16,
0,166,1,509,4257,
16,0,641,1,217,
4258,16,0,397,1,
130,4259,19,4260,4,
36,67,0,111,0,
110,0,115,0,116,
0,97,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,130,4194,
1,131,4261,19,4262,
4,30,73,0,100,
0,101,0,110,0,
116,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,131,4194,
1,132,4263,19,4264,
4,36,73,0,100,
0,101,0,110,0,
116,0,68,0,111,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,132,
4194,1,133,4265,19,
4266,4,44,70,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,67,
0,97,0,108,0,
108,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,133,4194,
1,134,4267,19,4268,
4,32,66,0,105,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
134,4194,1,135,4269,
19,4270,4,30,85,
0,110,0,97,0,
114,0,121,0,69,
0,120,0,112,0,
114,0,101,0,115,
0,115,0,105,0,
111,0,110,0,1,
135,4194,1,136,4271,
19,4272,4,36,84,
0,121,0,112,0,
101,0,99,0,97,
0,115,0,116,0,
69,0,120,0,112,
0,114,0,101,0,
115,0,115,0,105,
0,111,0,110,0,
1,136,4194,1,137,
4273,19,4274,4,42,
80,0,97,0,114,
0,101,0,110,0,
116,0,104,0,101,
0,115,0,105,0,
115,0,69,0,120,
0,112,0,114,0,
101,0,115,0,115,
0,105,0,111,0,
110,0,1,137,4194,
1,138,4275,19,4276,
4,56,73,0,110,
0,99,0,114,0,
101,0,109,0,101,
0,110,0,116,0,
68,0,101,0,99,
0,114,0,101,0,
109,0,101,0,110,
0,116,0,69,0,
120,0,112,0,114,
0,101,0,115,0,
115,0,105,0,111,
0,110,0,1,138,
4194,1,140,4277,19,
675,1,140,3789,1,
141,4278,19,686,1,
141,3789,1,142,4279,
19,3104,1,142,3792,
1,143,4280,19,3094,
1,143,3792,1,144,
4281,19,3099,1,144,
3792,1,145,4282,19,
3110,1,145,3792,1,
146,4283,19,3127,1,
146,3795,1,147,4284,
19,3122,1,147,3795,
1,148,4285,19,3116,
1,148,3799,1,149,
4286,19,3132,1,149,
3799,1,150,4287,19,
669,1,150,3803,1,
151,4288,19,696,1,
151,3803,1,152,4289,
19,681,1,152,3807,
1,153,4290,19,691,
1,153,3807,1,154,
4291,19,1591,1,154,
3813,1,155,4292,19,
1586,1,155,3813,1,
156,4293,19,1577,1,
156,3817,1,157,4294,
19,1624,1,157,3823,
1,158,4295,19,1607,
1,158,3823,1,159,
4296,19,1087,1,159,
3828,1,160,4297,19,
814,1,160,3871,1,
161,4298,19,803,1,
161,3871,1,162,4299,
19,809,1,162,3886,
1,163,4300,19,797,
1,163,3886,1,164,
4301,19,846,1,164,
3889,1,165,4302,19,
763,1,165,3889,1,
166,4303,19,781,1,
166,3889,1,167,4304,
19,757,1,167,3889,
1,168,4305,19,752,
1,168,3889,1,169,
4306,19,747,1,169,
3889,1,170,4307,19,
741,1,170,3889,1,
171,4308,19,735,1,
171,3889,1,172,4309,
19,730,1,172,3889,
1,173,4310,19,725,
1,173,3889,1,174,
4311,19,720,1,174,
3889,1,175,4312,19,
715,1,175,3889,1,
176,4313,19,1116,1,
176,3955,1,177,4314,
19,1248,1,177,3967,
1,178,4315,19,1109,
1,178,3979,1,179,
4316,19,1104,1,179,
3979,1,180,4317,19,
895,1,180,3991,1,
181,4318,19,708,1,
181,3991,1,182,4319,
19,861,1,182,3991,
1,183,4320,19,837,
1,183,3991,1,184,
4321,19,869,1,184,
4003,1,185,4322,19,
885,1,185,4003,1,
186,4323,19,820,1,
186,4015,1,187,4324,
19,830,1,187,4015,
1,188,4325,19,856,
1,188,4027,1,189,
4326,19,1468,1,189,
4039,1,190,4327,19,
1277,1,190,4039,1,
191,4328,19,1446,1,
191,4039,1,192,4329,
19,1488,1,192,4039,
1,193,4330,19,1498,
1,193,3901,1,194,
4331,19,1301,1,194,
3901,1,195,4332,19,
1190,1,195,3913,1,
196,4333,19,1519,1,
196,3913,1,197,4334,
19,1441,1,197,3913,
1,198,4335,19,1402,
1,198,3913,1,199,
4336,19,1322,1,199,
3913,1,200,4337,19,
1265,1,200,3913,1,
201,4338,19,1151,1,
201,3913,1,202,4339,
19,1092,1,202,3913,
1,203,4340,19,1503,
1,203,3913,1,204,
4341,19,1436,1,204,
3913,1,205,4342,19,
1397,1,205,3913,1,
206,4343,19,1312,1,
206,3913,1,207,4344,
19,1139,1,207,3913,
1,208,4345,19,1075,
1,208,3913,1,209,
4346,19,1483,1,209,
3913,1,210,4347,19,
1424,1,210,3913,1,
211,4348,19,1392,1,
211,3913,1,212,4349,
19,1458,1,212,3913,
1,213,4350,19,1237,
1,213,3913,1,214,
4351,19,1128,1,214,
3913,1,215,4352,19,
1070,1,215,3913,1,
216,4353,19,1473,1,
216,3913,1,217,4354,
19,1419,1,217,3913,
1,218,4355,19,1386,
1,218,3913,1,219,
4356,19,1260,1,219,
3943,1,220,4357,19,
1359,1,220,3943,1,
221,4358,19,1536,1,
221,4121,1,222,4359,
19,1514,1,222,4121,
1,223,4360,19,1509,
1,223,4121,1,224,
4361,19,1526,1,224,
4121,1,225,4362,19,
1542,1,225,4121,1,
226,4363,19,1452,1,
226,4121,1,227,4364,
19,1185,1,227,4121,
1,228,4365,19,1349,
1,228,4194,1,229,
4366,19,1134,1,229,
4194,1,230,4367,19,
1157,1,230,4194,1,
231,4368,19,1179,1,
231,4194,1,232,4369,
19,1169,1,232,4194,
1,233,4370,19,1164,
1,233,4194,1,234,
4371,19,1174,1,234,
4194,1,235,4372,19,
1338,1,235,4194,1,
236,4373,19,1327,1,
236,4194,1,237,4374,
19,1375,1,237,4194,
1,238,4375,19,1332,
1,238,4194,1,239,
4376,19,1365,1,239,
4194,1,240,4377,19,
1307,1,240,4194,1,
241,4378,19,1242,1,
241,4194,1,242,4379,
19,1202,1,242,4194,
1,243,4380,19,1144,
1,243,4194,1,244,
4381,19,1098,1,244,
4194,1,245,4382,19,
1531,1,245,4194,1,
246,4383,19,1493,1,
246,4194,1,247,4384,
19,1463,1,247,4194,
1,248,4385,19,1431,
1,248,4194,1,249,
4386,19,1414,1,249,
4194,1,250,4387,19,
1407,1,250,4194,1,
251,4388,19,1381,1,
251,4194,1,252,4389,
19,1370,1,252,4194,
1,253,4390,19,1317,
1,253,4194,1,254,
4391,19,1343,1,254,
4194,1,255,4392,19,
1354,1,255,4194,1,
256,4393,19,1478,1,
256,4194,1,257,4394,
19,1295,1,257,4194,
1,258,4395,19,1289,
1,258,4194,1,259,
4396,19,1284,1,259,
4194,1,260,4397,19,
1254,1,260,4194,1,
261,4398,19,1081,1,
261,4194,1,262,4399,
19,1552,1,262,4194,
1,263,4400,19,1196,
1,263,4194,1,264,
4401,19,1207,1,264,
4194,1,265,4402,19,
1227,1,265,4194,1,
266,4403,19,1217,1,
266,4194,1,267,4404,
19,1222,1,267,4194,
1,268,4405,19,1212,
1,268,4194,1,269,
4406,19,1547,1,269,
4194,1,270,4407,19,
1232,1,270,4194,1,
271,4408,19,1271,1,
271,4043,1,272,4409,
19,1644,1,272,4110,
1,273,4410,19,1638,
1,273,4110,1,274,
4411,19,1618,1,274,
4114,1,275,4412,19,
1931,1,275,3846,1,
276,4413,19,1926,1,
276,3846,1,277,4414,
19,1921,1,277,3846,
1,278,4415,19,1916,
1,278,3846,1,279,
4416,19,1911,1,279,
3846,1,280,4417,19,
1906,1,280,3846,1,
281,4418,19,1901,1,
281,3846,1,282,4419,
19,1826,1,282,3865,
1,283,4420,19,1885,
1,283,3865,1,284,
4421,19,1820,1,284,
3865,1,285,4422,19,
1815,1,285,3865,1,
286,4423,19,1810,1,
286,3865,1,287,4424,
19,1805,1,287,3865,
1,288,4425,19,1800,
1,288,3865,1,289,
4426,19,1795,1,289,
3865,1,290,4427,19,
1790,1,290,3865,1,
291,4428,19,1785,1,
291,3865,1,292,4429,
19,1780,1,292,3865,
1,293,4430,19,1775,
1,293,3865,1,294,
4431,19,1770,1,294,
3865,1,295,4432,19,
1765,1,295,3865,1,
296,4433,19,1876,1,
296,3865,1,297,4434,
19,1759,1,297,3865,
1,298,4435,19,1870,
1,298,3865,1,299,
4436,19,1753,1,299,
3865,1,300,4437,19,
1748,1,300,3865,1,
301,4438,19,1743,1,
301,3865,1,302,4439,
19,1738,1,302,3865,
1,303,4440,19,1864,
1,303,3865,1,304,
4441,19,1859,1,304,
3865,1,305,4442,19,
1731,1,305,3865,1,
306,4443,19,1854,1,
306,3865,1,307,4444,
19,1726,1,307,3865,
1,308,4445,19,1849,
1,308,3865,1,309,
4446,19,1664,1,309,
3865,1,310,4447,19,
1719,1,310,3865,1,
311,4448,19,1714,1,
311,3865,1,312,4449,
19,1709,1,312,3865,
1,313,4450,19,1704,
1,313,3865,1,314,
4451,19,1699,1,314,
3865,1,315,4452,19,
4453,4,50,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,68,
0,101,0,99,0,
108,0,97,0,114,
0,97,0,116,0,
105,0,111,0,110,
0,76,0,105,0,
115,0,116,0,95,
0,51,0,1,315,
3823,1,316,4454,19,
4455,4,28,65,0,
114,0,103,0,117,
0,109,0,101,0,
110,0,116,0,76,
0,105,0,115,0,
116,0,95,0,51,
0,1,316,4110,1,
317,4456,19,4457,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,52,
0,1,317,3823,1,
318,4458,19,4459,4,
50,65,0,114,0,
103,0,117,0,109,
0,101,0,110,0,
116,0,68,0,101,
0,99,0,108,0,
97,0,114,0,97,
0,116,0,105,0,
111,0,110,0,76,
0,105,0,115,0,
116,0,95,0,53,
0,1,318,3823,1,
319,4460,19,4461,4,
24,83,0,116,0,
97,0,116,0,101,
0,109,0,101,0,
110,0,116,0,95,
0,49,0,51,0,
1,319,3889,1,320,
4462,19,4463,4,28,
65,0,114,0,103,
0,117,0,109,0,
101,0,110,0,116,
0,76,0,105,0,
115,0,116,0,95,
0,52,0,1,320,
4110,2,0,0};
new Sfactory(this,"ExpressionArgument_1",new SCreator(ExpressionArgument_1_factory));
new Sfactory(this,"SimpleAssignment_8",new SCreator(SimpleAssignment_8_factory));
new Sfactory(this,"StatementList_1",new SCreator(StatementList_1_factory));
new Sfactory(this,"StateChange_1",new SCreator(StateChange_1_factory));
new Sfactory(this,"StateChange_2",new SCreator(StateChange_2_factory));
new Sfactory(this,"Declaration",new SCreator(Declaration_factory));
new Sfactory(this,"IdentExpression",new SCreator(IdentExpression_factory));
new Sfactory(this,"error",new SCreator(error_factory));
new Sfactory(this,"BinaryExpression_2",new SCreator(BinaryExpression_2_factory));
new Sfactory(this,"BinaryExpression_3",new SCreator(BinaryExpression_3_factory));
new Sfactory(this,"BinaryExpression_4",new SCreator(BinaryExpression_4_factory));
new Sfactory(this,"BinaryExpression_5",new SCreator(BinaryExpression_5_factory));
new Sfactory(this,"ReturnStatement_2",new SCreator(ReturnStatement_2_factory));
new Sfactory(this,"SimpleAssignment_19",new SCreator(SimpleAssignment_19_factory));
new Sfactory(this,"BinaryExpression_9",new SCreator(BinaryExpression_9_factory));
new Sfactory(this,"VectorConstant_1",new SCreator(VectorConstant_1_factory));
new Sfactory(this,"ParenthesisExpression",new SCreator(ParenthesisExpression_factory));
new Sfactory(this,"UnaryExpression",new SCreator(UnaryExpression_factory));
new Sfactory(this,"IdentDotExpression_1",new SCreator(IdentDotExpression_1_factory));
new Sfactory(this,"ArgumentList_4",new SCreator(ArgumentList_4_factory));
new Sfactory(this,"Typename",new SCreator(Typename_factory));
new Sfactory(this,"IfStatement_1",new SCreator(IfStatement_1_factory));
new Sfactory(this,"Assignment",new SCreator(Assignment_factory));
new Sfactory(this,"CompoundStatement_1",new SCreator(CompoundStatement_1_factory));
new Sfactory(this,"CompoundStatement_2",new SCreator(CompoundStatement_2_factory));
new Sfactory(this,"ReturnStatement_1",new SCreator(ReturnStatement_1_factory));
new Sfactory(this,"IdentDotExpression",new SCreator(IdentDotExpression_factory));
new Sfactory(this,"Argument",new SCreator(Argument_factory));
new Sfactory(this,"State_2",new SCreator(State_2_factory));
new Sfactory(this,"WhileStatement_1",new SCreator(WhileStatement_1_factory));
new Sfactory(this,"GlobalDefinitions_3",new SCreator(GlobalDefinitions_3_factory));
new Sfactory(this,"GlobalDefinitions_4",new SCreator(GlobalDefinitions_4_factory));
new Sfactory(this,"Event_1",new SCreator(Event_1_factory));
new Sfactory(this,"ListConstant",new SCreator(ListConstant_factory));
new Sfactory(this,"Event_3",new SCreator(Event_3_factory));
new Sfactory(this,"Event_4",new SCreator(Event_4_factory));
new Sfactory(this,"SimpleAssignment_5",new SCreator(SimpleAssignment_5_factory));
new Sfactory(this,"Typename_1",new SCreator(Typename_1_factory));
new Sfactory(this,"Typename_2",new SCreator(Typename_2_factory));
new Sfactory(this,"Typename_3",new SCreator(Typename_3_factory));
new Sfactory(this,"Typename_4",new SCreator(Typename_4_factory));
new Sfactory(this,"Typename_5",new SCreator(Typename_5_factory));
new Sfactory(this,"Typename_6",new SCreator(Typename_6_factory));
new Sfactory(this,"Typename_7",new SCreator(Typename_7_factory));
new Sfactory(this,"ArgumentDeclarationList",new SCreator(ArgumentDeclarationList_factory));
new Sfactory(this,"ConstantExpression",new SCreator(ConstantExpression_factory));
new Sfactory(this,"LSLProgramRoot_1",new SCreator(LSLProgramRoot_1_factory));
new Sfactory(this,"LSLProgramRoot_2",new SCreator(LSLProgramRoot_2_factory));
new Sfactory(this,"States_1",new SCreator(States_1_factory));
new Sfactory(this,"States_2",new SCreator(States_2_factory));
new Sfactory(this,"FunctionCallExpression_1",new SCreator(FunctionCallExpression_1_factory));
new Sfactory(this,"ForLoopStatement",new SCreator(ForLoopStatement_factory));
new Sfactory(this,"DoWhileStatement_1",new SCreator(DoWhileStatement_1_factory));
new Sfactory(this,"DoWhileStatement_2",new SCreator(DoWhileStatement_2_factory));
new Sfactory(this,"ForLoopStatement_4",new SCreator(ForLoopStatement_4_factory));
new Sfactory(this,"SimpleAssignment_11",new SCreator(SimpleAssignment_11_factory));
new Sfactory(this,"SimpleAssignment_12",new SCreator(SimpleAssignment_12_factory));
new Sfactory(this,"SimpleAssignment_13",new SCreator(SimpleAssignment_13_factory));
new Sfactory(this,"JumpLabel",new SCreator(JumpLabel_factory));
new Sfactory(this,"SimpleAssignment_15",new SCreator(SimpleAssignment_15_factory));
new Sfactory(this,"SimpleAssignment_17",new SCreator(SimpleAssignment_17_factory));
new Sfactory(this,"SimpleAssignment_18",new SCreator(SimpleAssignment_18_factory));
new Sfactory(this,"JumpStatement_1",new SCreator(JumpStatement_1_factory));
new Sfactory(this,"GlobalDefinitions",new SCreator(GlobalDefinitions_factory));
new Sfactory(this,"FunctionCall_1",new SCreator(FunctionCall_1_factory));
new Sfactory(this,"ArgumentList_3",new SCreator(ArgumentList_3_factory));
new Sfactory(this,"Assignment_2",new SCreator(Assignment_2_factory));
new Sfactory(this,"TypecastExpression_1",new SCreator(TypecastExpression_1_factory));
new Sfactory(this,"SimpleAssignment_21",new SCreator(SimpleAssignment_21_factory));
new Sfactory(this,"SimpleAssignment_22",new SCreator(SimpleAssignment_22_factory));
new Sfactory(this,"SimpleAssignment_23",new SCreator(SimpleAssignment_23_factory));
new Sfactory(this,"TypecastExpression_9",new SCreator(TypecastExpression_9_factory));
new Sfactory(this,"ArgumentDeclarationList_1",new SCreator(ArgumentDeclarationList_1_factory));
new Sfactory(this,"ArgumentDeclarationList_2",new SCreator(ArgumentDeclarationList_2_factory));
new Sfactory(this,"ArgumentDeclarationList_3",new SCreator(ArgumentDeclarationList_3_factory));
new Sfactory(this,"GlobalDefinitions_1",new SCreator(GlobalDefinitions_1_factory));
new Sfactory(this,"GlobalDefinitions_2",new SCreator(GlobalDefinitions_2_factory));
new Sfactory(this,"IncrementDecrementExpression",new SCreator(IncrementDecrementExpression_factory));
new Sfactory(this,"GlobalVariableDeclaration",new SCreator(GlobalVariableDeclaration_factory));
new Sfactory(this,"Event_11",new SCreator(Event_11_factory));
new Sfactory(this,"TypecastExpression_2",new SCreator(TypecastExpression_2_factory));
new Sfactory(this,"TypecastExpression_3",new SCreator(TypecastExpression_3_factory));
new Sfactory(this,"TypecastExpression_5",new SCreator(TypecastExpression_5_factory));
new Sfactory(this,"TypecastExpression_8",new SCreator(TypecastExpression_8_factory));
new Sfactory(this,"Constant_1",new SCreator(Constant_1_factory));
new Sfactory(this,"Expression",new SCreator(Expression_factory));
new Sfactory(this,"Constant_3",new SCreator(Constant_3_factory));
new Sfactory(this,"Constant_4",new SCreator(Constant_4_factory));
new Sfactory(this,"BinaryExpression_1",new SCreator(BinaryExpression_1_factory));
new Sfactory(this,"IfStatement_2",new SCreator(IfStatement_2_factory));
new Sfactory(this,"IfStatement_3",new SCreator(IfStatement_3_factory));
new Sfactory(this,"IfStatement_4",new SCreator(IfStatement_4_factory));
new Sfactory(this,"ReturnStatement",new SCreator(ReturnStatement_factory));
new Sfactory(this,"Event_2",new SCreator(Event_2_factory));
new Sfactory(this,"RotationConstant",new SCreator(RotationConstant_factory));
new Sfactory(this,"Statement_12",new SCreator(Statement_12_factory));
new Sfactory(this,"Statement_13",new SCreator(Statement_13_factory));
new Sfactory(this,"UnaryExpression_1",new SCreator(UnaryExpression_1_factory));
new Sfactory(this,"UnaryExpression_2",new SCreator(UnaryExpression_2_factory));
new Sfactory(this,"UnaryExpression_3",new SCreator(UnaryExpression_3_factory));
new Sfactory(this,"ArgumentList_1",new SCreator(ArgumentList_1_factory));
new Sfactory(this,"ArgumentList_2",new SCreator(ArgumentList_2_factory));
new Sfactory(this,"Constant",new SCreator(Constant_factory));
new Sfactory(this,"State",new SCreator(State_factory));
new Sfactory(this,"Event_13",new SCreator(Event_13_factory));
new Sfactory(this,"LSLProgramRoot",new SCreator(LSLProgramRoot_factory));
new Sfactory(this,"StateChange",new SCreator(StateChange_factory));
new Sfactory(this,"IncrementDecrementExpression_2",new SCreator(IncrementDecrementExpression_2_factory));
new Sfactory(this,"GlobalVariableDeclaration_1",new SCreator(GlobalVariableDeclaration_1_factory));
new Sfactory(this,"GlobalVariableDeclaration_2",new SCreator(GlobalVariableDeclaration_2_factory));
new Sfactory(this,"IncrementDecrementExpression_5",new SCreator(IncrementDecrementExpression_5_factory));
new Sfactory(this,"GlobalFunctionDefinition_2",new SCreator(GlobalFunctionDefinition_2_factory));
new Sfactory(this,"IncrementDecrementExpression_7",new SCreator(IncrementDecrementExpression_7_factory));
new Sfactory(this,"IncrementDecrementExpression_8",new SCreator(IncrementDecrementExpression_8_factory));
new Sfactory(this,"Assignment_1",new SCreator(Assignment_1_factory));
new Sfactory(this,"Event_21",new SCreator(Event_21_factory));
new Sfactory(this,"Event_22",new SCreator(Event_22_factory));
new Sfactory(this,"CompoundStatement",new SCreator(CompoundStatement_factory));
new Sfactory(this,"RotationConstant_1",new SCreator(RotationConstant_1_factory));
new Sfactory(this,"SimpleAssignment_3",new SCreator(SimpleAssignment_3_factory));
new Sfactory(this,"SimpleAssignment_4",new SCreator(SimpleAssignment_4_factory));
new Sfactory(this,"Statement_1",new SCreator(Statement_1_factory));
new Sfactory(this,"Statement_2",new SCreator(Statement_2_factory));
new Sfactory(this,"Statement_3",new SCreator(Statement_3_factory));
new Sfactory(this,"Statement_4",new SCreator(Statement_4_factory));
new Sfactory(this,"Statement_5",new SCreator(Statement_5_factory));
new Sfactory(this,"Statement_6",new SCreator(Statement_6_factory));
new Sfactory(this,"Statement_7",new SCreator(Statement_7_factory));
new Sfactory(this,"Statement_8",new SCreator(Statement_8_factory));
new Sfactory(this,"Statement_9",new SCreator(Statement_9_factory));
new Sfactory(this,"ExpressionArgument",new SCreator(ExpressionArgument_factory));
new Sfactory(this,"GlobalFunctionDefinition",new SCreator(GlobalFunctionDefinition_factory));
new Sfactory(this,"State_1",new SCreator(State_1_factory));
new Sfactory(this,"DoWhileStatement",new SCreator(DoWhileStatement_factory));
new Sfactory(this,"ParenthesisExpression_1",new SCreator(ParenthesisExpression_1_factory));
new Sfactory(this,"Event_5",new SCreator(Event_5_factory));
new Sfactory(this,"StateBody",new SCreator(StateBody_factory));
new Sfactory(this,"Event_7",new SCreator(Event_7_factory));
new Sfactory(this,"Event_8",new SCreator(Event_8_factory));
new Sfactory(this,"IncrementDecrementExpression_1",new SCreator(IncrementDecrementExpression_1_factory));
new Sfactory(this,"IncrementDecrementExpression_3",new SCreator(IncrementDecrementExpression_3_factory));
new Sfactory(this,"IncrementDecrementExpression_4",new SCreator(IncrementDecrementExpression_4_factory));
new Sfactory(this,"IncrementDecrementExpression_6",new SCreator(IncrementDecrementExpression_6_factory));
new Sfactory(this,"StateEvent",new SCreator(StateEvent_factory));
new Sfactory(this,"Event_20",new SCreator(Event_20_factory));
new Sfactory(this,"Event_23",new SCreator(Event_23_factory));
new Sfactory(this,"Event_24",new SCreator(Event_24_factory));
new Sfactory(this,"Event_26",new SCreator(Event_26_factory));
new Sfactory(this,"SimpleAssignment_10",new SCreator(SimpleAssignment_10_factory));
new Sfactory(this,"Event",new SCreator(Event_factory));
new Sfactory(this,"SimpleAssignment_14",new SCreator(SimpleAssignment_14_factory));
new Sfactory(this,"SimpleAssignment_16",new SCreator(SimpleAssignment_16_factory));
new Sfactory(this,"Statement_10",new SCreator(Statement_10_factory));
new Sfactory(this,"Statement_11",new SCreator(Statement_11_factory));
new Sfactory(this,"SimpleAssignment",new SCreator(SimpleAssignment_factory));
new Sfactory(this,"TypecastExpression",new SCreator(TypecastExpression_factory));
new Sfactory(this,"Event_15",new SCreator(Event_15_factory));
new Sfactory(this,"Event_16",new SCreator(Event_16_factory));
new Sfactory(this,"Event_32",new SCreator(Event_32_factory));
new Sfactory(this,"SimpleAssignment_20",new SCreator(SimpleAssignment_20_factory));
new Sfactory(this,"SimpleAssignment_24",new SCreator(SimpleAssignment_24_factory));
new Sfactory(this,"SimpleAssignment_1",new SCreator(SimpleAssignment_1_factory));
new Sfactory(this,"SimpleAssignment_2",new SCreator(SimpleAssignment_2_factory));
new Sfactory(this,"BinaryExpression",new SCreator(BinaryExpression_factory));
new Sfactory(this,"FunctionCallExpression",new SCreator(FunctionCallExpression_factory));
new Sfactory(this,"SimpleAssignment_6",new SCreator(SimpleAssignment_6_factory));
new Sfactory(this,"StateBody_1",new SCreator(StateBody_1_factory));
new Sfactory(this,"StatementList_2",new SCreator(StatementList_2_factory));
new Sfactory(this,"SimpleAssignment_9",new SCreator(SimpleAssignment_9_factory));
new Sfactory(this,"BinaryExpression_15",new SCreator(BinaryExpression_15_factory));
new Sfactory(this,"BinaryExpression_16",new SCreator(BinaryExpression_16_factory));
new Sfactory(this,"BinaryExpression_17",new SCreator(BinaryExpression_17_factory));
new Sfactory(this,"BinaryExpression_18",new SCreator(BinaryExpression_18_factory));
new Sfactory(this,"Event_25",new SCreator(Event_25_factory));
new Sfactory(this,"Event_9",new SCreator(Event_9_factory));
new Sfactory(this,"Statement",new SCreator(Statement_factory));
new Sfactory(this,"JumpStatement",new SCreator(JumpStatement_factory));
new Sfactory(this,"BinaryExpression_11",new SCreator(BinaryExpression_11_factory));
new Sfactory(this,"BinaryExpression_12",new SCreator(BinaryExpression_12_factory));
new Sfactory(this,"BinaryExpression_13",new SCreator(BinaryExpression_13_factory));
new Sfactory(this,"BinaryExpression_14",new SCreator(BinaryExpression_14_factory));
new Sfactory(this,"BinaryExpression_6",new SCreator(BinaryExpression_6_factory));
new Sfactory(this,"BinaryExpression_7",new SCreator(BinaryExpression_7_factory));
new Sfactory(this,"BinaryExpression_8",new SCreator(BinaryExpression_8_factory));
new Sfactory(this,"ArgumentList",new SCreator(ArgumentList_factory));
new Sfactory(this,"Event_10",new SCreator(Event_10_factory));
new Sfactory(this,"ConstantExpression_1",new SCreator(ConstantExpression_1_factory));
new Sfactory(this,"Event_12",new SCreator(Event_12_factory));
new Sfactory(this,"Event_14",new SCreator(Event_14_factory));
new Sfactory(this,"Event_17",new SCreator(Event_17_factory));
new Sfactory(this,"Event_18",new SCreator(Event_18_factory));
new Sfactory(this,"Event_19",new SCreator(Event_19_factory));
new Sfactory(this,"BinaryExpression_10",new SCreator(BinaryExpression_10_factory));
new Sfactory(this,"StateEvent_1",new SCreator(StateEvent_1_factory));
new Sfactory(this,"VectorConstant",new SCreator(VectorConstant_factory));
new Sfactory(this,"TypecastExpression_4",new SCreator(TypecastExpression_4_factory));
new Sfactory(this,"TypecastExpression_6",new SCreator(TypecastExpression_6_factory));
new Sfactory(this,"TypecastExpression_7",new SCreator(TypecastExpression_7_factory));
new Sfactory(this,"FunctionCall",new SCreator(FunctionCall_factory));
new Sfactory(this,"Event_27",new SCreator(Event_27_factory));
new Sfactory(this,"Event_28",new SCreator(Event_28_factory));
new Sfactory(this,"Event_29",new SCreator(Event_29_factory));
new Sfactory(this,"ListConstant_1",new SCreator(ListConstant_1_factory));
new Sfactory(this,"Event_6",new SCreator(Event_6_factory));
new Sfactory(this,"Declaration_1",new SCreator(Declaration_1_factory));
new Sfactory(this,"SimpleAssignment_7",new SCreator(SimpleAssignment_7_factory));
new Sfactory(this,"ForLoop",new SCreator(ForLoop_factory));
new Sfactory(this,"Event_30",new SCreator(Event_30_factory));
new Sfactory(this,"Event_31",new SCreator(Event_31_factory));
new Sfactory(this,"Event_33",new SCreator(Event_33_factory));
new Sfactory(this,"GlobalFunctionDefinition_1",new SCreator(GlobalFunctionDefinition_1_factory));
new Sfactory(this,"JumpLabel_1",new SCreator(JumpLabel_1_factory));
new Sfactory(this,"IfStatement",new SCreator(IfStatement_factory));
new Sfactory(this,"ForLoopStatement_1",new SCreator(ForLoopStatement_1_factory));
new Sfactory(this,"ForLoopStatement_2",new SCreator(ForLoopStatement_2_factory));
new Sfactory(this,"ForLoopStatement_3",new SCreator(ForLoopStatement_3_factory));
new Sfactory(this,"ArgumentDeclarationList_4",new SCreator(ArgumentDeclarationList_4_factory));
new Sfactory(this,"ArgumentDeclarationList_5",new SCreator(ArgumentDeclarationList_5_factory));
new Sfactory(this,"WhileStatement",new SCreator(WhileStatement_factory));
new Sfactory(this,"ForLoop_1",new SCreator(ForLoop_1_factory));
new Sfactory(this,"Constant_2",new SCreator(Constant_2_factory));
new Sfactory(this,"StatementList",new SCreator(StatementList_factory));
new Sfactory(this,"StateBody_2",new SCreator(StateBody_2_factory));
new Sfactory(this,"WhileStatement_2",new SCreator(WhileStatement_2_factory));
new Sfactory(this,"IdentExpression_1",new SCreator(IdentExpression_1_factory));
new Sfactory(this,"States",new SCreator(States_factory));
}
public static object ExpressionArgument_1_factory(Parser yyp) { return new ExpressionArgument_1(yyp); }
public static object SimpleAssignment_8_factory(Parser yyp) { return new SimpleAssignment_8(yyp); }
public static object StatementList_1_factory(Parser yyp) { return new StatementList_1(yyp); }
public static object StateChange_1_factory(Parser yyp) { return new StateChange_1(yyp); }
public static object StateChange_2_factory(Parser yyp) { return new StateChange_2(yyp); }
public static object Declaration_factory(Parser yyp) { return new Declaration(yyp); }
public static object IdentExpression_factory(Parser yyp) { return new IdentExpression(yyp); }
public static object error_factory(Parser yyp) { return new error(yyp); }
public static object BinaryExpression_2_factory(Parser yyp) { return new BinaryExpression_2(yyp); }
public static object BinaryExpression_3_factory(Parser yyp) { return new BinaryExpression_3(yyp); }
public static object BinaryExpression_4_factory(Parser yyp) { return new BinaryExpression_4(yyp); }
public static object BinaryExpression_5_factory(Parser yyp) { return new BinaryExpression_5(yyp); }
public static object ReturnStatement_2_factory(Parser yyp) { return new ReturnStatement_2(yyp); }
public static object SimpleAssignment_19_factory(Parser yyp) { return new SimpleAssignment_19(yyp); }
public static object BinaryExpression_9_factory(Parser yyp) { return new BinaryExpression_9(yyp); }
public static object VectorConstant_1_factory(Parser yyp) { return new VectorConstant_1(yyp); }
public static object ParenthesisExpression_factory(Parser yyp) { return new ParenthesisExpression(yyp); }
public static object UnaryExpression_factory(Parser yyp) { return new UnaryExpression(yyp); }
public static object IdentDotExpression_1_factory(Parser yyp) { return new IdentDotExpression_1(yyp); }
public static object ArgumentList_4_factory(Parser yyp) { return new ArgumentList_4(yyp); }
public static object Typename_factory(Parser yyp) { return new Typename(yyp); }
public static object IfStatement_1_factory(Parser yyp) { return new IfStatement_1(yyp); }
public static object Assignment_factory(Parser yyp) { return new Assignment(yyp); }
public static object CompoundStatement_1_factory(Parser yyp) { return new CompoundStatement_1(yyp); }
public static object CompoundStatement_2_factory(Parser yyp) { return new CompoundStatement_2(yyp); }
public static object ReturnStatement_1_factory(Parser yyp) { return new ReturnStatement_1(yyp); }
public static object IdentDotExpression_factory(Parser yyp) { return new IdentDotExpression(yyp); }
public static object Argument_factory(Parser yyp) { return new Argument(yyp); }
public static object State_2_factory(Parser yyp) { return new State_2(yyp); }
public static object WhileStatement_1_factory(Parser yyp) { return new WhileStatement_1(yyp); }
public static object GlobalDefinitions_3_factory(Parser yyp) { return new GlobalDefinitions_3(yyp); }
public static object GlobalDefinitions_4_factory(Parser yyp) { return new GlobalDefinitions_4(yyp); }
public static object Event_1_factory(Parser yyp) { return new Event_1(yyp); }
public static object ListConstant_factory(Parser yyp) { return new ListConstant(yyp); }
public static object Event_3_factory(Parser yyp) { return new Event_3(yyp); }
public static object Event_4_factory(Parser yyp) { return new Event_4(yyp); }
public static object SimpleAssignment_5_factory(Parser yyp) { return new SimpleAssignment_5(yyp); }
public static object Typename_1_factory(Parser yyp) { return new Typename_1(yyp); }
public static object Typename_2_factory(Parser yyp) { return new Typename_2(yyp); }
public static object Typename_3_factory(Parser yyp) { return new Typename_3(yyp); }
public static object Typename_4_factory(Parser yyp) { return new Typename_4(yyp); }
public static object Typename_5_factory(Parser yyp) { return new Typename_5(yyp); }
public static object Typename_6_factory(Parser yyp) { return new Typename_6(yyp); }
public static object Typename_7_factory(Parser yyp) { return new Typename_7(yyp); }
public static object ArgumentDeclarationList_factory(Parser yyp) { return new ArgumentDeclarationList(yyp); }
public static object ConstantExpression_factory(Parser yyp) { return new ConstantExpression(yyp); }
public static object LSLProgramRoot_1_factory(Parser yyp) { return new LSLProgramRoot_1(yyp); }
public static object LSLProgramRoot_2_factory(Parser yyp) { return new LSLProgramRoot_2(yyp); }
public static object States_1_factory(Parser yyp) { return new States_1(yyp); }
public static object States_2_factory(Parser yyp) { return new States_2(yyp); }
public static object FunctionCallExpression_1_factory(Parser yyp) { return new FunctionCallExpression_1(yyp); }
public static object ForLoopStatement_factory(Parser yyp) { return new ForLoopStatement(yyp); }
public static object DoWhileStatement_1_factory(Parser yyp) { return new DoWhileStatement_1(yyp); }
public static object DoWhileStatement_2_factory(Parser yyp) { return new DoWhileStatement_2(yyp); }
public static object ForLoopStatement_4_factory(Parser yyp) { return new ForLoopStatement_4(yyp); }
public static object SimpleAssignment_11_factory(Parser yyp) { return new SimpleAssignment_11(yyp); }
public static object SimpleAssignment_12_factory(Parser yyp) { return new SimpleAssignment_12(yyp); }
public static object SimpleAssignment_13_factory(Parser yyp) { return new SimpleAssignment_13(yyp); }
public static object JumpLabel_factory(Parser yyp) { return new JumpLabel(yyp); }
public static object SimpleAssignment_15_factory(Parser yyp) { return new SimpleAssignment_15(yyp); }
public static object SimpleAssignment_17_factory(Parser yyp) { return new SimpleAssignment_17(yyp); }
public static object SimpleAssignment_18_factory(Parser yyp) { return new SimpleAssignment_18(yyp); }
public static object JumpStatement_1_factory(Parser yyp) { return new JumpStatement_1(yyp); }
public static object GlobalDefinitions_factory(Parser yyp) { return new GlobalDefinitions(yyp); }
public static object FunctionCall_1_factory(Parser yyp) { return new FunctionCall_1(yyp); }
public static object ArgumentList_3_factory(Parser yyp) { return new ArgumentList_3(yyp); }
public static object Assignment_2_factory(Parser yyp) { return new Assignment_2(yyp); }
public static object TypecastExpression_1_factory(Parser yyp) { return new TypecastExpression_1(yyp); }
public static object SimpleAssignment_21_factory(Parser yyp) { return new SimpleAssignment_21(yyp); }
public static object SimpleAssignment_22_factory(Parser yyp) { return new SimpleAssignment_22(yyp); }
public static object SimpleAssignment_23_factory(Parser yyp) { return new SimpleAssignment_23(yyp); }
public static object TypecastExpression_9_factory(Parser yyp) { return new TypecastExpression_9(yyp); }
public static object ArgumentDeclarationList_1_factory(Parser yyp) { return new ArgumentDeclarationList_1(yyp); }
public static object ArgumentDeclarationList_2_factory(Parser yyp) { return new ArgumentDeclarationList_2(yyp); }
public static object ArgumentDeclarationList_3_factory(Parser yyp) { return new ArgumentDeclarationList_3(yyp); }
public static object GlobalDefinitions_1_factory(Parser yyp) { return new GlobalDefinitions_1(yyp); }
public static object GlobalDefinitions_2_factory(Parser yyp) { return new GlobalDefinitions_2(yyp); }
public static object IncrementDecrementExpression_factory(Parser yyp) { return new IncrementDecrementExpression(yyp); }
public static object GlobalVariableDeclaration_factory(Parser yyp) { return new GlobalVariableDeclaration(yyp); }
public static object Event_11_factory(Parser yyp) { return new Event_11(yyp); }
public static object TypecastExpression_2_factory(Parser yyp) { return new TypecastExpression_2(yyp); }
public static object TypecastExpression_3_factory(Parser yyp) { return new TypecastExpression_3(yyp); }
public static object TypecastExpression_5_factory(Parser yyp) { return new TypecastExpression_5(yyp); }
public static object TypecastExpression_8_factory(Parser yyp) { return new TypecastExpression_8(yyp); }
public static object Constant_1_factory(Parser yyp) { return new Constant_1(yyp); }
public static object Expression_factory(Parser yyp) { return new Expression(yyp); }
public static object Constant_3_factory(Parser yyp) { return new Constant_3(yyp); }
public static object Constant_4_factory(Parser yyp) { return new Constant_4(yyp); }
public static object BinaryExpression_1_factory(Parser yyp) { return new BinaryExpression_1(yyp); }
public static object IfStatement_2_factory(Parser yyp) { return new IfStatement_2(yyp); }
public static object IfStatement_3_factory(Parser yyp) { return new IfStatement_3(yyp); }
public static object IfStatement_4_factory(Parser yyp) { return new IfStatement_4(yyp); }
public static object ReturnStatement_factory(Parser yyp) { return new ReturnStatement(yyp); }
public static object Event_2_factory(Parser yyp) { return new Event_2(yyp); }
public static object RotationConstant_factory(Parser yyp) { return new RotationConstant(yyp); }
public static object Statement_12_factory(Parser yyp) { return new Statement_12(yyp); }
public static object Statement_13_factory(Parser yyp) { return new Statement_13(yyp); }
public static object UnaryExpression_1_factory(Parser yyp) { return new UnaryExpression_1(yyp); }
public static object UnaryExpression_2_factory(Parser yyp) { return new UnaryExpression_2(yyp); }
public static object UnaryExpression_3_factory(Parser yyp) { return new UnaryExpression_3(yyp); }
public static object ArgumentList_1_factory(Parser yyp) { return new ArgumentList_1(yyp); }
public static object ArgumentList_2_factory(Parser yyp) { return new ArgumentList_2(yyp); }
public static object Constant_factory(Parser yyp) { return new Constant(yyp); }
public static object State_factory(Parser yyp) { return new State(yyp); }
public static object Event_13_factory(Parser yyp) { return new Event_13(yyp); }
public static object LSLProgramRoot_factory(Parser yyp) { return new LSLProgramRoot(yyp); }
public static object StateChange_factory(Parser yyp) { return new StateChange(yyp); }
public static object IncrementDecrementExpression_2_factory(Parser yyp) { return new IncrementDecrementExpression_2(yyp); }
public static object GlobalVariableDeclaration_1_factory(Parser yyp) { return new GlobalVariableDeclaration_1(yyp); }
public static object GlobalVariableDeclaration_2_factory(Parser yyp) { return new GlobalVariableDeclaration_2(yyp); }
public static object IncrementDecrementExpression_5_factory(Parser yyp) { return new IncrementDecrementExpression_5(yyp); }
public static object GlobalFunctionDefinition_2_factory(Parser yyp) { return new GlobalFunctionDefinition_2(yyp); }
public static object IncrementDecrementExpression_7_factory(Parser yyp) { return new IncrementDecrementExpression_7(yyp); }
public static object IncrementDecrementExpression_8_factory(Parser yyp) { return new IncrementDecrementExpression_8(yyp); }
public static object Assignment_1_factory(Parser yyp) { return new Assignment_1(yyp); }
public static object Event_21_factory(Parser yyp) { return new Event_21(yyp); }
public static object Event_22_factory(Parser yyp) { return new Event_22(yyp); }
public static object CompoundStatement_factory(Parser yyp) { return new CompoundStatement(yyp); }
public static object RotationConstant_1_factory(Parser yyp) { return new RotationConstant_1(yyp); }
public static object SimpleAssignment_3_factory(Parser yyp) { return new SimpleAssignment_3(yyp); }
public static object SimpleAssignment_4_factory(Parser yyp) { return new SimpleAssignment_4(yyp); }
public static object Statement_1_factory(Parser yyp) { return new Statement_1(yyp); }
public static object Statement_2_factory(Parser yyp) { return new Statement_2(yyp); }
public static object Statement_3_factory(Parser yyp) { return new Statement_3(yyp); }
public static object Statement_4_factory(Parser yyp) { return new Statement_4(yyp); }
public static object Statement_5_factory(Parser yyp) { return new Statement_5(yyp); }
public static object Statement_6_factory(Parser yyp) { return new Statement_6(yyp); }
public static object Statement_7_factory(Parser yyp) { return new Statement_7(yyp); }
public static object Statement_8_factory(Parser yyp) { return new Statement_8(yyp); }
public static object Statement_9_factory(Parser yyp) { return new Statement_9(yyp); }
public static object ExpressionArgument_factory(Parser yyp) { return new ExpressionArgument(yyp); }
public static object GlobalFunctionDefinition_factory(Parser yyp) { return new GlobalFunctionDefinition(yyp); }
public static object State_1_factory(Parser yyp) { return new State_1(yyp); }
public static object DoWhileStatement_factory(Parser yyp) { return new DoWhileStatement(yyp); }
public static object ParenthesisExpression_1_factory(Parser yyp) { return new ParenthesisExpression_1(yyp); }
public static object Event_5_factory(Parser yyp) { return new Event_5(yyp); }
public static object StateBody_factory(Parser yyp) { return new StateBody(yyp); }
public static object Event_7_factory(Parser yyp) { return new Event_7(yyp); }
public static object Event_8_factory(Parser yyp) { return new Event_8(yyp); }
public static object IncrementDecrementExpression_1_factory(Parser yyp) { return new IncrementDecrementExpression_1(yyp); }
public static object IncrementDecrementExpression_3_factory(Parser yyp) { return new IncrementDecrementExpression_3(yyp); }
public static object IncrementDecrementExpression_4_factory(Parser yyp) { return new IncrementDecrementExpression_4(yyp); }
public static object IncrementDecrementExpression_6_factory(Parser yyp) { return new IncrementDecrementExpression_6(yyp); }
public static object StateEvent_factory(Parser yyp) { return new StateEvent(yyp); }
public static object Event_20_factory(Parser yyp) { return new Event_20(yyp); }
public static object Event_23_factory(Parser yyp) { return new Event_23(yyp); }
public static object Event_24_factory(Parser yyp) { return new Event_24(yyp); }
public static object Event_26_factory(Parser yyp) { return new Event_26(yyp); }
public static object SimpleAssignment_10_factory(Parser yyp) { return new SimpleAssignment_10(yyp); }
public static object Event_factory(Parser yyp) { return new Event(yyp); }
public static object SimpleAssignment_14_factory(Parser yyp) { return new SimpleAssignment_14(yyp); }
public static object SimpleAssignment_16_factory(Parser yyp) { return new SimpleAssignment_16(yyp); }
public static object Statement_10_factory(Parser yyp) { return new Statement_10(yyp); }
public static object Statement_11_factory(Parser yyp) { return new Statement_11(yyp); }
public static object SimpleAssignment_factory(Parser yyp) { return new SimpleAssignment(yyp); }
public static object TypecastExpression_factory(Parser yyp) { return new TypecastExpression(yyp); }
public static object Event_15_factory(Parser yyp) { return new Event_15(yyp); }
public static object Event_16_factory(Parser yyp) { return new Event_16(yyp); }
public static object Event_32_factory(Parser yyp) { return new Event_32(yyp); }
public static object SimpleAssignment_20_factory(Parser yyp) { return new SimpleAssignment_20(yyp); }
public static object SimpleAssignment_24_factory(Parser yyp) { return new SimpleAssignment_24(yyp); }
public static object SimpleAssignment_1_factory(Parser yyp) { return new SimpleAssignment_1(yyp); }
public static object SimpleAssignment_2_factory(Parser yyp) { return new SimpleAssignment_2(yyp); }
public static object BinaryExpression_factory(Parser yyp) { return new BinaryExpression(yyp); }
public static object FunctionCallExpression_factory(Parser yyp) { return new FunctionCallExpression(yyp); }
public static object SimpleAssignment_6_factory(Parser yyp) { return new SimpleAssignment_6(yyp); }
public static object StateBody_1_factory(Parser yyp) { return new StateBody_1(yyp); }
public static object StatementList_2_factory(Parser yyp) { return new StatementList_2(yyp); }
public static object SimpleAssignment_9_factory(Parser yyp) { return new SimpleAssignment_9(yyp); }
public static object BinaryExpression_15_factory(Parser yyp) { return new BinaryExpression_15(yyp); }
public static object BinaryExpression_16_factory(Parser yyp) { return new BinaryExpression_16(yyp); }
public static object BinaryExpression_17_factory(Parser yyp) { return new BinaryExpression_17(yyp); }
public static object BinaryExpression_18_factory(Parser yyp) { return new BinaryExpression_18(yyp); }
public static object Event_25_factory(Parser yyp) { return new Event_25(yyp); }
public static object Event_9_factory(Parser yyp) { return new Event_9(yyp); }
public static object Statement_factory(Parser yyp) { return new Statement(yyp); }
public static object JumpStatement_factory(Parser yyp) { return new JumpStatement(yyp); }
public static object BinaryExpression_11_factory(Parser yyp) { return new BinaryExpression_11(yyp); }
public static object BinaryExpression_12_factory(Parser yyp) { return new BinaryExpression_12(yyp); }
public static object BinaryExpression_13_factory(Parser yyp) { return new BinaryExpression_13(yyp); }
public static object BinaryExpression_14_factory(Parser yyp) { return new BinaryExpression_14(yyp); }
public static object BinaryExpression_6_factory(Parser yyp) { return new BinaryExpression_6(yyp); }
public static object BinaryExpression_7_factory(Parser yyp) { return new BinaryExpression_7(yyp); }
public static object BinaryExpression_8_factory(Parser yyp) { return new BinaryExpression_8(yyp); }
public static object ArgumentList_factory(Parser yyp) { return new ArgumentList(yyp); }
public static object Event_10_factory(Parser yyp) { return new Event_10(yyp); }
public static object ConstantExpression_1_factory(Parser yyp) { return new ConstantExpression_1(yyp); }
public static object Event_12_factory(Parser yyp) { return new Event_12(yyp); }
public static object Event_14_factory(Parser yyp) { return new Event_14(yyp); }
public static object Event_17_factory(Parser yyp) { return new Event_17(yyp); }
public static object Event_18_factory(Parser yyp) { return new Event_18(yyp); }
public static object Event_19_factory(Parser yyp) { return new Event_19(yyp); }
public static object BinaryExpression_10_factory(Parser yyp) { return new BinaryExpression_10(yyp); }
public static object StateEvent_1_factory(Parser yyp) { return new StateEvent_1(yyp); }
public static object VectorConstant_factory(Parser yyp) { return new VectorConstant(yyp); }
public static object TypecastExpression_4_factory(Parser yyp) { return new TypecastExpression_4(yyp); }
public static object TypecastExpression_6_factory(Parser yyp) { return new TypecastExpression_6(yyp); }
public static object TypecastExpression_7_factory(Parser yyp) { return new TypecastExpression_7(yyp); }
public static object FunctionCall_factory(Parser yyp) { return new FunctionCall(yyp); }
public static object Event_27_factory(Parser yyp) { return new Event_27(yyp); }
public static object Event_28_factory(Parser yyp) { return new Event_28(yyp); }
public static object Event_29_factory(Parser yyp) { return new Event_29(yyp); }
public static object ListConstant_1_factory(Parser yyp) { return new ListConstant_1(yyp); }
public static object Event_6_factory(Parser yyp) { return new Event_6(yyp); }
public static object Declaration_1_factory(Parser yyp) { return new Declaration_1(yyp); }
public static object SimpleAssignment_7_factory(Parser yyp) { return new SimpleAssignment_7(yyp); }
public static object ForLoop_factory(Parser yyp) { return new ForLoop(yyp); }
public static object Event_30_factory(Parser yyp) { return new Event_30(yyp); }
public static object Event_31_factory(Parser yyp) { return new Event_31(yyp); }
public static object Event_33_factory(Parser yyp) { return new Event_33(yyp); }
public static object GlobalFunctionDefinition_1_factory(Parser yyp) { return new GlobalFunctionDefinition_1(yyp); }
public static object JumpLabel_1_factory(Parser yyp) { return new JumpLabel_1(yyp); }
public static object IfStatement_factory(Parser yyp) { return new IfStatement(yyp); }
public static object ForLoopStatement_1_factory(Parser yyp) { return new ForLoopStatement_1(yyp); }
public static object ForLoopStatement_2_factory(Parser yyp) { return new ForLoopStatement_2(yyp); }
public static object ForLoopStatement_3_factory(Parser yyp) { return new ForLoopStatement_3(yyp); }
public static object ArgumentDeclarationList_4_factory(Parser yyp) { return new ArgumentDeclarationList_4(yyp); }
public static object ArgumentDeclarationList_5_factory(Parser yyp) { return new ArgumentDeclarationList_5(yyp); }
public static object WhileStatement_factory(Parser yyp) { return new WhileStatement(yyp); }
public static object ForLoop_1_factory(Parser yyp) { return new ForLoop_1(yyp); }
public static object Constant_2_factory(Parser yyp) { return new Constant_2(yyp); }
public static object StatementList_factory(Parser yyp) { return new StatementList(yyp); }
public static object StateBody_2_factory(Parser yyp) { return new StateBody_2(yyp); }
public static object WhileStatement_2_factory(Parser yyp) { return new WhileStatement_2(yyp); }
public static object IdentExpression_1_factory(Parser yyp) { return new IdentExpression_1(yyp); }
public static object States_factory(Parser yyp) { return new States(yyp); }
}
public class LSLSyntax
: Parser {
public LSLSyntax
():base(new yyLSLSyntax
(),new LSLTokens()) {}
public LSLSyntax
(YyParser syms):base(syms,new LSLTokens()) {}
public LSLSyntax
(YyParser syms,ErrorHandler erh):base(syms,new LSLTokens(erh)) {}

 }
}
